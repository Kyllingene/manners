{"root":"0:0:307","crate_version":"1.79.0-nightly\t(c9f8f3438\t2024-03-27)","includes_private":false,"index":{"0:7956":{"id":"0:7956","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[33,0],"end":[33,105]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:7959:678","0:7960:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6731":{"id":"0:6731","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[353,0],"end":[361,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6734:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5502:3587":{"id":"0:5502:3587","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/slice.rs","begin":[822,4],"end":[824,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1518:4524":{"id":"a:1:32053:3459-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7984:1135":{"id":"0:7984:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[37,0],"end":[37,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6242:3225":{"id":"0:6242:3225","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[2727,4],"end":[2731,5]},"visibility":"public","docs":"Consumes the `Weak<T>` and turns it into a raw pointer.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the `Weak<T>` with [`from_raw`].\n\nThe same restrictions of accessing the target of the pointer as with\n[`as_ptr`] apply.\n\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\nlet weak = Arc::downgrade(&strong);\nlet raw = weak.into_raw();\n\nassert_eq!(1, Arc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw(raw) });\nassert_eq!(0, Arc::weak_count(&strong));\n```\n\n[`from_raw`]: Weak::from_raw\n[`as_ptr`]: Weak::as_ptr","links":{"Weak::from_raw":"0:6237:3190","Weak::as_ptr":"0:6241:334"},"attrs":["#[must_use = \"losing the pointer will leak memory\"]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7480:4175":{"id":"b:1:2898-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5259:8123":{"id":"0:5259:8123","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[3149,4],"end":[3151,5]},"visibility":"public","docs":"Gets the number of strong (`Rc`) pointers pointing to this allocation.\n\nIf `self` was created using [`Weak::new`], this will return 0.","links":{"`Weak::new`":"0:5237:1153"},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6102:8122":{"id":"0:6102:8122","crate_id":0,"name":"try_unwrap","span":{"filename":"library/alloc/src/sync.rs","begin":[963,4],"end":[980,5]},"visibility":"public","docs":"Returns the inner value, if the `Arc` has exactly one strong reference.\n\nOtherwise, an [`Err`] is returned with the same `Arc` that was\npassed in.\n\nThis will succeed even if there are outstanding weak references.\n\nIt is strongly recommended to use [`Arc::into_inner`] instead if you don't\nwant to keep the `Arc` in the [`Err`] case.\nImmediately dropping the [`Err`] payload, like in the expression\n`Arc::try_unwrap(this).ok()`, can still cause the strong count to\ndrop to zero and the inner value of the `Arc` to be dropped:\nFor instance if two threads each execute this expression in parallel, then\nthere is a race condition. The threads could first both check whether they\nhave the last clone of their `Arc` via `Arc::try_unwrap`, and then\nboth drop their `Arc` in the call to [`ok`][`Result::ok`],\ntaking the strong count from two down to zero.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(3);\nassert_eq!(Arc::try_unwrap(x), Ok(3));\n\nlet x = Arc::new(4);\nlet _y = Arc::clone(&x);\nassert_eq!(*Arc::try_unwrap(x).unwrap_err(), 4);\n```","links":{"`Err`":"1:41636:135","`Result::ok`":"1:9536:4592","`Arc::into_inner`":"0:6103:3104"},"attrs":["#[inline]","#[stable(feature = \"arc_unique\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7133:3924":{"id":"0:7133:3924","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2049,4],"end":[2059,5]},"visibility":"public","docs":"Removes the last element from a vector and returns it, or [`None`] if it\nis empty.\n\nIf you'd like to pop the first element, consider using\n[`VecDeque::pop_front`] instead.\n\n[`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nassert_eq!(vec.pop(), Some(3));\nassert_eq!(vec, [1, 2]);\n```\n\n# Time complexity\n\nTakes *O*(1) time.","links":{"`None`":"1:41519:190","crate::collections::VecDeque::pop_front":"0:4532:6209"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:3635:181":{"id":"b:1:2615-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3783:3437":{"id":"0:3783:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1290,4],"end":[1302,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:3271:5793":{"id":"b:1:2618-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:7363:2619":{"id":"b:1:2892-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1423-0:1342:4372":{"id":"0:1423-0:1342:4372","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[25,23],"end":[25,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"entry::OccupiedEntry","name":"OccupiedEntry","id":"0:1342:4372","glob":false}}},"0:1114:4175":{"id":"0:1114:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1811,4],"end":[1811,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"b:1:2888-0:2089:4918":{"id":"b:1:2888-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:1577:4553":{"id":"a:1:32053:3459-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4972:3069":{"id":"0:4972:3069","crate_id":0,"name":"try_new_zeroed","span":{"filename":"library/alloc/src/rc.rs","begin":[644,4],"end":[652,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, returning an error if the allocation fails\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::rc::Rc;\n\nlet zero = Rc::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:7597:7097":{"id":"b:1:3727-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:3279:5798":{"id":"a:1:32053:3459-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:3209:100":{"id":"b:1:2888-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1632:4727":{"id":"0:1632:4727","crate_id":0,"name":"range_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1245,4],"end":[1256,5]},"visibility":"public","docs":"Constructs a mutable double-ended iterator over a sub-range of elements in the map.\nThe simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n`range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\nrange from 4 to 10.\n\n# Panics\n\nPanics if range `start > end`.\nPanics if range `start == end` and both bounds are `Excluded`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, i32> =\n    [(\"Alice\", 0), (\"Bob\", 0), (\"Carol\", 0), (\"Cheryl\", 0)].into();\nfor (_, balance) in map.range_mut(\"B\"..\"Cheryl\") {\n    *balance += 100;\n}\nfor (name, balance) in &map {\n    println!(\"{name} => {balance}\");\n}\n```","links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:6554:4150":{"id":"b:1:2888-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:7363:2619":{"id":"a:1:3146:11953-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:4149:4509":{"id":"b:1:2892-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:7538:2621":{"id":"a:1:3146:11953-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4252:3434":{"id":"0:4252:3434","crate_id":0,"name":"fold","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[117,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1546:4541":{"id":"b:1:2888-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:1518:4524":{"id":"a:1:41612:4469-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3729:1770":{"id":"1:3729:1770","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39295:11874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3245:5783":{"id":"b:1:2888-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1985:1167":{"id":"0:1985:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2190,4],"end":[2192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3848:4997":{"id":"0:3848:4997","crate_id":0,"name":"as_cursor","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1605,4],"end":[1607,5]},"visibility":"public","docs":"Returns a read-only cursor pointing to the current element.\n\nThe lifetime of the returned `Cursor` is bound to that of the\n`CursorMut`, which means it cannot outlive the `CursorMut` and that the\n`CursorMut` is frozen for the lifetime of the `Cursor`.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4803:2574":{"id":"0:4803:2574","crate_id":0,"name":"into_vec","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[955,4],"end":[957,5]},"visibility":"public","docs":"Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet nul_error = CString::new(\"foo\\0bar\").unwrap_err();\nassert_eq!(nul_error.into_vec(), b\"foo\\0bar\");\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7632:242":{"id":"b:0:727-0:7632:242","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:3807:4931":{"id":"a:1:41611:4468-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:7714:4776":{"id":"a:1:32053:3459-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3648:4057":{"id":"0:3648:4057","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[74,0],"end":[79,1]},"visibility":"public","docs":"An iterator over the elements of a `LinkedList`.\n\nThis `struct` is created by [`LinkedList::iter()`]. See its\ndocumentation for more.","links":{"`LinkedList::iter()`":"0:3705:954"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3648:4057","a:1:32053:3459-0:3648:4057","a:1:41612:4469-0:3648:4057","a:1:41611:4468-0:3648:4057","b:0:727-0:3648:4057","b:1:8171-0:3648:4057","b:1:2888-0:3648:4057","b:1:2618-0:3648:4057","b:1:2615-0:3648:4057","b:1:3727-0:3648:4057","b:1:2892-0:3648:4057","b:1:2903-0:3648:4057","b:1:2898-0:3648:4057","0:3655","0:3658","0:3765","0:3752","0:4009","0:3767","0:3769","0:4007","0:3760"]}}},"0:4338:3431":{"id":"0:4338:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1813:3437":{"id":"0:1813:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1836,4],"end":[1838,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1428:99":{"id":"b:1:2615-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3446:1689":{"id":"0:3446:1689","crate_id":0,"name":"sub","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1369,4],"end":[1374,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([3, 4, 5]);\n\nlet result = &a - &b;\nassert_eq!(result, BTreeSet::from([1, 2]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7553:7100":{"id":"b:0:727-0:7553:7100","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2888-0:7730:10536":{"id":"b:1:2888-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7974:1135":{"id":"0:7974:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[36,0],"end":[36,117]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1857:1167":{"id":"0:1857:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1922,4],"end":[1924,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:4074:4150":{"id":"a:1:3146:11953-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2903-0:7380:4065":{"id":"b:1:2903-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:727-0:3209:100":{"id":"b:0:727-0:3209:100","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8171-0:5922:4150":{"id":"b:1:8171-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:342:359":{"id":"0:342:359","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/boxed.rs","begin":[900,4],"end":[903,5]},"visibility":"public","docs":"Converts to `Box<[T], A>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the values\nreally are in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut values = Box::<[u32]>::new_uninit_slice(3);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{"mem::MaybeUninit::assume_init":"1:1821:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:6644:810":{"id":"0:6644:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[52,4],"end":[54,5]},"visibility":"default","docs":"Creates a [`Borrowed`] variant of [`Cow`]\nfrom a reference to [`Vec`].\n\nThis conversion does not allocate or clone the data.\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed","links":{"crate::borrow::Cow::Borrowed":"0:735:3354","`Cow`":"0:732:118","`Vec`":"0:7048:263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4493:3831":{"id":"0:4493:3831","crate_id":0,"name":"swap","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[730,4],"end":[736,5]},"visibility":"public","docs":"Swaps elements at indices `i` and `j`.\n\n`i` and `j` may be equal.\n\nElement at index 0 is the front of the queue.\n\n# Panics\n\nPanics if either index is out of bounds.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nassert_eq!(buf, [3, 4, 5]);\nbuf.swap(0, 2);\nassert_eq!(buf, [5, 4, 3]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}],["j",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6314":{"id":"0:6314","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3294,0],"end":[3298,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6317:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4745:7299":{"id":"0:4745:7299","crate_id":0,"name":"into_bytes_with_nul","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Equivalent to [`CString::into_bytes()`] except that the\nreturned vector includes the trailing nul terminator.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.into_bytes_with_nul();\nassert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n```","links":{"`CString::into_bytes()`":"0:4744:7197"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7472:4175":{"id":"0:7472:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[142,0],"end":[147,1]},"visibility":"public","docs":"An owning iterator over the elements of a `LinkedList`.\n\nThis `struct` is created by the [`into_iter`] method on [`LinkedList`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: LinkedList::into_iter","links":{"`LinkedList`":"0:3635:181","LinkedList::into_iter":"0:3921:933","`IntoIterator`":"1:8167:164"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:7472:4175","a:1:32053:3459-0:7472:4175","a:1:3111:246-0:7472:4175","a:1:31996:236-0:7472:4175","a:1:41612:4469-0:7472:4175","a:1:41611:4468-0:7472:4175","b:0:727-0:7472:4175","b:1:8171-0:7472:4175","b:1:2888-0:7472:4175","b:1:2618-0:7472:4175","b:1:2615-0:7472:4175","b:1:3727-0:7472:4175","b:1:2892-0:7472:4175","b:1:2903-0:7472:4175","b:1:2898-0:7472:4175","0:3903","0:3909","0:3893","0:3906","0:3899","0:3671","0:7476"]}}},"0:7145:6786":{"id":"0:7145:6786","crate_id":0,"name":"resize_with","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2330,4],"end":[2340,5]},"visibility":"public","docs":"Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `Vec` is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure `f`. The return values from `f` will end up\nin the `Vec` in the order they have been generated.\n\nIf `new_len` is less than `len`, the `Vec` is simply truncated.\n\nThis method uses a closure to create new values on every push. If\nyou'd rather [`Clone`] a given value, use [`Vec::resize`]. If you\nwant to use the [`Default`] trait to generate values, you can\npass [`Default::default`] as the second argument.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.resize_with(5, Default::default);\nassert_eq!(vec, [1, 2, 3, 0, 0]);\n\nlet mut vec = vec![];\nlet mut p = 1;\nvec.resize_with(4, || { p *= 2; p });\nassert_eq!(vec, [2, 4, 8, 16]);\n```","links":{"`Vec::resize`":"0:7155:6933","`Default`":"1:2940:123","`Clone`":"1:2631:112","`Default::default`":"1:2941:60"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6718:1167":{"id":"0:6718:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[202,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:1135":{"id":"0:382:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/boxed.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4434":{"id":"0:4434","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[123,0],"end":[145,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4437:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:1536:4534":{"id":"b:1:2903-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3694":{"id":"0:3694","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[426,0],"end":[432,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3696:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6424":{"id":"0:6424","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/task.rs","begin":[287,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"local_waker\", issue = \"118959\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LocalWake","id":"0:6421:10507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"core::task::LocalWaker","id":"1:13664:10390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6426:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5748:780":{"id":"0:5748:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2072,4],"end":[2074,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7350":{"id":"0:7350","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3448,0],"end":[3459,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:7351:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3560:4798":{"id":"0:3560:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1723,4],"end":[1725,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7538:2621":{"id":"0:7538:2621","crate_id":0,"name":"TryReserveErrorKind","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[86,0],"end":[107,1]},"visibility":"public","docs":"Details of the allocation that caused a `TryReserveError`","links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:7539:2715","0:7541:2720"],"impls":["a:1:3146:11953-0:7538:2621","a:1:32053:3459-0:7538:2621","a:1:3111:246-0:7538:2621","a:1:31996:236-0:7538:2621","a:1:41612:4469-0:7538:2621","a:1:41611:4468-0:7538:2621","b:0:727-0:7538:2621","b:1:2888-0:7538:2621","b:1:2618-0:7538:2621","b:1:2615-0:7538:2621","b:1:3727-0:7538:2621","b:1:2892-0:7538:2621","b:1:2903-0:7538:2621","b:1:2898-0:7538:2621","0:7546","0:7547","0:7549","0:7551","0:4680","0:4678","0:7544"]}}},"b:1:2888-0:6039:8069":{"id":"b:1:2888-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7075:3096":{"id":"0:7075:3096","crate_id":0,"name":"into_boxed_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1139,4],"end":[1147,5]},"visibility":"public","docs":"Converts the vector into [`Box<[T]>`][owned slice].\n\nBefore doing the conversion, this method discards excess capacity like [`shrink_to_fit`].\n\n[owned slice]: Box\n[`shrink_to_fit`]: Vec::shrink_to_fit\n\n# Examples\n\n```\nlet v = vec![1, 2, 3];\n\nlet slice = v.into_boxed_slice();\n```\n\nAny excess capacity is removed:\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert!(vec.capacity() >= 10);\nlet slice = vec.into_boxed_slice();\nassert_eq!(slice.into_vec().capacity(), 3);\n```","links":{"Vec::shrink_to_fit":"0:7073:2775","Box":"0:295:2399"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:5854-0:218:3019":{"id":"b:0:5854-0:218:3019","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7306":{"id":"0:7306","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3270,0],"end":[3274,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7309:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:7444:209":{"id":"b:1:8171-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:4408:172":{"id":"1:4408:172","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"AsyncIterator","id":"1:4383:2999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:3209:100":{"id":"0:3209:100","crate_id":0,"name":"BTreeSet","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[75,0],"end":[80,1]},"visibility":"public","docs":"An ordered set based on a B-Tree.\n\nSee [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance\nbenefits and drawbacks.\n\nIt is a logic error for an item to be modified in such a way that the item's ordering relative\nto any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\nThe behavior resulting from such a logic error is not specified, but will be encapsulated to the\n`BTreeSet` that observed the logic error and not result in undefined behavior. This could\ninclude panics, incorrect results, aborts, memory leaks, and non-termination.\n\nIterators returned by [`BTreeSet::iter`] and [`BTreeSet::into_iter`] produce their items in order, and take worst-case\nlogarithmic and amortized constant time per item returned.\n\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `BTreeSet<&str>` in this example).\nlet mut books = BTreeSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\");\nbooks.insert(\"To Kill a Mockingbird\");\nbooks.insert(\"The Odyssey\");\nbooks.insert(\"The Great Gatsby\");\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{book}\");\n}\n```\n\nA `BTreeSet` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\n```","links":{"`Ord`":"1:2701:194","core::cell::RefCell":"1:4613:220","`BTreeSet::iter`":"0:3364:954","`BTreeSet::into_iter`":"0:3389:933","`BTreeMap`":"0:1428:99","core::cell::Cell":"1:4543:8012"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BTreeSet\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:3314","0:3317","a:1:3146:11953-0:3209:100","a:1:32053:3459-0:3209:100","a:1:3111:246-0:3209:100","a:1:31996:236-0:3209:100","a:1:41612:4469-0:3209:100","a:1:41611:4468-0:3209:100","b:0:727-0:3209:100","b:1:2888-0:3209:100","b:1:2618-0:3209:100","b:1:2615-0:3209:100","b:1:3727-0:3209:100","b:1:2892-0:3209:100","b:1:2903-0:3209:100","b:1:2898-0:3209:100","0:3447","0:3442","0:3377","0:3425","0:3452","0:3213","0:3390","0:3218","0:3439","0:3432","0:3225","0:3462","0:3222","0:3367","0:3229","0:3457","0:3384","0:3233"]}}},"a:1:3111:246-0:1428:99":{"id":"a:1:3111:246-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2902:1757":{"id":"1:2902:1757","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1546:4541":{"id":"a:1:3146:11953-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:826:101":{"id":"b:1:2618-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:826:101":{"id":"b:1:2892-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7367:462":{"id":"0:7367:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/alloc.rs","begin":[51,15],"end":[51,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1316:4652":{"id":"0:1316:4652","crate_id":0,"name":"Vacant","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[28,4],"end":[28,82]},"visibility":"default","docs":"A vacant entry.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1318:1923"]},"discriminant":null}}},"b:1:2892-0:1342:4372":{"id":"b:1:2892-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:2089:4918":{"id":"b:1:2618-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5352-1:11945:8696":{"id":"0:5352-1:11945:8696","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[49,22],"end":[49,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::from_mut_ptr_range","name":"from_mut_ptr_range","id":"1:11945:8696","glob":false}}},"b:1:2892-0:1568:209":{"id":"b:1:2892-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3388:4175":{"id":"0:3388:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1238,4],"end":[1238,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:6355:136":{"id":"0:6355:136","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/sync.rs","begin":[3497,4],"end":[3497,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"1:13130:3305":{"id":"1:13130:3305","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12360:7286"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5274:780":{"id":"0:5274:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[3298,4],"end":[3300,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5936:336":{"id":"0:5936:336","crate_id":0,"name":"as_str","span":{"filename":"library/alloc/src/string.rs","begin":[2984,4],"end":[2986,5]},"visibility":"public","docs":"Returns the remaining (sub)string of this iterator as a slice.\n\n# Examples\n\n```\nlet mut s = String::from(\"abc\");\nlet mut drain = s.drain(..);\nassert_eq!(drain.as_str(), \"abc\");\nlet _ = drain.next().unwrap();\nassert_eq!(drain.as_str(), \"bc\");\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[47,0],"end":[47,52]},"visibility":"default","docs":"`ThinBox<T>` is `Sync` if `T` is `Sync` because the data is owned.","links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:605:464":{"id":"0:605:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2087,4],"end":[2093,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6707:335":{"id":"0:6707:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[187,4],"end":[189,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1596:2669":{"id":"0:1596:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[674,4],"end":[676,5]},"visibility":"public","docs":"Makes a new empty BTreeMap with a reasonable choice for B.\n\n# Examples\n\n```\n# #![feature(allocator_api)]\n# #![feature(btreemap_alloc)]\nuse std::collections::BTreeMap;\nuse std::alloc::Global;\n\nlet mut map = BTreeMap::new_in(Global);\n\n// entries can now be inserted into the empty map\nmap.insert(1, \"a\");\n```","links":{},"attrs":["#[unstable(feature = \"btreemap_alloc\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1557:4545":{"id":"a:1:31996:236-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31996:236-0:732:118":{"id":"a:1:31996:236-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:727-0:6681:4175":{"id":"b:0:727-0:6681:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:3271:5793":{"id":"a:1:41612:4469-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1894:3431":{"id":"0:1894:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3928:933":{"id":"0:3928:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3377":{"id":"0:3377","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1212,0],"end":[1233,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3381:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7659:780":{"id":"0:7659:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[424,9],"end":[424,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6380":{"id":"0:6380","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3610,0],"end":[3610,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:6681:4175":{"id":"a:1:3146:11953-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:7553:7100":{"id":"b:1:2888-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2014,0],"end":[2020,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:32083:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FnOnce","id":"1:3358:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:559:198","0:560:426"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4227":{"id":"0:4227","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[42,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4230:172","0:4231:1167","0:4232:3429","0:4233:6996","0:4234:557","0:4235:6999","0:4252:3434","0:4256:3431","0:4257:7012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5568-1:43379:8711":{"id":"0:5568-1:43379:8711","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[51,28],"end":[51,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Split","name":"Split","id":"1:43379:8711","glob":false}}},"a:1:41612:4469-0:3209:100":{"id":"a:1:41612:4469-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2185:780":{"id":"0:2185:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3402,4],"end":[3404,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3799":{"id":"0:3799","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1339,0],"end":[1344,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3802:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:3872:4776":{"id":"b:1:2903-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4524:4149":{"id":"0:4524:4149","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1412,4],"end":[1450,5]},"visibility":"public","docs":"Removes the specified range from the deque in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.\n\nThe returned iterator keeps a mutable borrow on the queue to optimize\nits implementation.\n\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.\n\n# Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to\n[`mem::forget`], for example), the deque may have lost and leaked\nelements arbitrarily, including elements outside the range.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [1, 2, 3].into();\nlet drained = deque.drain(2..).collect::<VecDeque<_>>();\nassert_eq!(drained, [3]);\nassert_eq!(deque, [1, 2]);\n\n// A full range clears all contents, like `clear()` does\ndeque.drain(..);\nassert!(deque.is_empty());\n```","links":{"`mem::forget`":"1:1907:792"},"attrs":["#[inline]","#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:3305:5807":{"id":"b:0:727-0:3305:5807","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7621:8665":{"id":"0:7621:8665","crate_id":0,"name":"UniqueRc","span":{"filename":"library/alloc/src/rc.rs","begin":[3505,0],"end":[3508,1]},"visibility":"public","docs":"A uniquely owned `Rc`\n\nThis represents an `Rc` that is known to be uniquely owned -- that is, have exactly one strong\nreference. Multiple weak pointers can be created, but attempts to upgrade those to strong\nreferences will fail unless the `UniqueRc` they point to has been converted into a regular `Rc`.\n\nBecause they are uniquely owned, the contents of a `UniqueRc` can be freely mutated. A common\nuse case is to have an object be mutable during its initialization phase but then have it become\nimmutable and converted to a normal `Rc`.\n\nThis can be used as a flexible way to create cyclic data structures, as in the example below.\n\n```\n#![feature(unique_rc_arc)]\nuse std::rc::{Rc, Weak, UniqueRc};\n\nstruct Gadget {\n    #[allow(dead_code)]\n    me: Weak<Gadget>,\n}\n\nfn create_gadget() -> Option<Rc<Gadget>> {\n    let mut rc = UniqueRc::new(Gadget {\n        me: Weak::new(),\n    });\n    rc.me = UniqueRc::downgrade(&rc);\n    Some(UniqueRc::into_rc(rc))\n}\n\ncreate_gadget().unwrap();\n```\n\nAn advantage of using `UniqueRc` over [`Rc::new_cyclic`] to build cyclic data structures is that\n[`Rc::new_cyclic`]'s `data_fn` parameter cannot be async or return a [`Result`]. As shown in the\nprevious example, `UniqueRc` allows for more flexibility in the construction of cyclic data,\nincluding fallible or async constructors.","links":{"`Rc::new_cyclic`":"0:4963:8067","`Result`":"1:41630:225"},"attrs":["#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:5309","a:1:3146:11953-0:7621:8665","a:1:32053:3459-0:7621:8665","a:1:3111:246-0:7621:8665","a:1:31996:236-0:7621:8665","a:1:41612:4469-0:7621:8665","a:1:41611:4468-0:7621:8665","b:1:2888-0:7621:8665","b:1:2618-0:7621:8665","b:1:2615-0:7621:8665","b:1:3727-0:7621:8665","b:1:2892-0:7621:8665","b:1:2903-0:7621:8665","b:1:2898-0:7621:8665","0:5321","0:5318","0:5314","0:7625"]}}},"b:1:2903-0:7655:9289":{"id":"b:1:2903-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6075:2330":{"id":"0:6075:2330","crate_id":0,"name":"new_uninit","span":{"filename":"library/alloc/src/sync.rs","begin":[534,4],"end":[542,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut five = Arc::<u32>::new_uninit();\n\n// Deferred initialization:\nArc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1972:3437":{"id":"0:1972:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2171,4],"end":[2173,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7217:198":{"id":"0:7217:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2852,4],"end":[2852,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}}}},"0:1611:4628":{"id":"0:1611:4628","crate_id":0,"name":"pop_last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[896,4],"end":[901,5]},"visibility":"public","docs":"Removes and returns the last element in the map.\nThe key of this element is the maximum key that was in the map.\n\n# Examples\n\nDraining elements in descending order, while keeping a usable map each iteration.\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nwhile let Some((key, _val)) = map.pop_last() {\n    assert!(map.iter().all(|(k, _v)| *k < key));\n}\nassert!(map.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3466":{"id":"0:3466","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1460,0],"end":[1464,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3468:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6296":{"id":"0:6296","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3252,0],"end":[3252,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[67,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"debug_btree_map\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1341:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:3792:4918":{"id":"b:0:727-0:3792:4918","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3321:4502":{"id":"0:3321:4502","crate_id":0,"name":"range","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[393,4],"end":[400,5]},"visibility":"public","docs":"Constructs a double-ended iterator over a sub-range of elements in the set.\nThe simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n`range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\nrange from 4 to 10.\n\n# Panics\n\nPanics if range `start > end`.\nPanics if range `start == end` and both bounds are `Excluded`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\nuse std::ops::Bound::Included;\n\nlet mut set = BTreeSet::new();\nset.insert(3);\nset.insert(5);\nset.insert(8);\nfor &elem in set.range((Included(&4), Included(&8))) {\n    println!(\"{elem}\");\n}\nassert_eq!(Some(&5), set.range(4..).next());\n```","links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3696:60":{"id":"0:3696:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[429,4],"end":[431,5]},"visibility":"default","docs":"Creates an empty `LinkedList<T>`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4614:4175":{"id":"0:4614:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2794,4],"end":[2794,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:5455:198":{"id":"0:5455:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[686,4],"end":[686,16]},"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:3324:5833":{"id":"0:3324:5833","crate_id":0,"name":"difference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[423,4],"end":[461,5]},"visibility":"public","docs":"Visits the elements representing the difference,\ni.e., the elements that are in `self` but not in `other`,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet diff: Vec<_> = a.difference(&b).cloned().collect();\nassert_eq!(diff, [1]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3349:4498":{"id":"0:3349:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[902,4],"end":[907,5]},"visibility":"public","docs":"Adds a value to the set.\n\nReturns whether the value was newly inserted. That is:\n\n- If the set did not previously contain an equal value, `true` is\n  returned.\n- If the set already contained an equal value, `false` is returned, and\n  the entry is not updated.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: index.html#insert-and-complex-keys\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push\", \"put\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7363:2619":{"id":"b:0:727-0:7363:2619","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:685:810":{"id":"0:685:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2396,4],"end":[2398,5]},"visibility":"default","docs":"Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n\n[`str`]: prim@str\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Sync`":"1:3111:246","prim@str":"1:52084:1672","`Send`":"1:31996:236","`Error`":"1:2951:136"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:6554:4150":{"id":"b:1:2892-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7371:780":{"id":"0:7371:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/alloc.rs","begin":[51,31],"end":[51,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2182,0],"end":[2192,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"async_iterator\", issue = \"79024\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncIterator","id":"1:4383:2999","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["size_hint"],"trait":{"name":"AsyncIterator","id":"1:4383:2999","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:646:172","0:647:1272","0:648:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7444:209":{"id":"0:7444:209","crate_id":0,"name":"Range","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[167,0],"end":[169,1]},"visibility":"public","docs":"An iterator over a sub-range of items in a `BTreeSet`.\n\nThis `struct` is created by the [`range`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`range`]: BTreeSet::range","links":{"BTreeSet::range":"0:3321:4502","`BTreeSet`":"0:3209:100"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:7444:209","a:1:32053:3459-0:7444:209","a:1:3111:246-0:7444:209","a:1:31996:236-0:7444:209","a:1:41612:4469-0:7444:209","a:1:41611:4468-0:7444:209","b:0:727-0:7444:209","b:1:8171-0:7444:209","b:1:2888-0:7444:209","b:1:2618-0:7444:209","b:1:2615-0:7444:209","b:1:3727-0:7444:209","b:1:2892-0:7444:209","b:1:2903-0:7444:209","b:1:2898-0:7444:209","0:3525","0:7448","0:3516","0:3530","0:3513","0:3532"]}}},"a:1:3111:246-0:3245:5783":{"id":"a:1:3111:246-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31996:236-0:1518:4524":{"id":"a:1:31996:236-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6222:3411":{"id":"0:6222:3411","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/sync.rs","begin":[2530,4],"end":[2538,5]},"visibility":"public","docs":"Downcasts the `Arc<dyn Any + Send + Sync>` to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\nuse std::sync::Arc;\n\nlet x: Arc<dyn Any + Send + Sync> = Arc::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:6220:3409"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1351":{"id":"0:1351","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[93,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"debug_btree_map\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1355:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1449:462":{"id":"0:1449:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[208,4],"end":[289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1017:311":{"id":"0:1017:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1606,4],"end":[1608,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1428:99":{"id":"0:1428:99","crate_id":0,"name":"BTreeMap","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[173,0],"end":[184,1]},"visibility":"public","docs":"An ordered map based on a [B-Tree].\n\nB-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\nthe amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\nchoice for a sorted map, as a perfectly balanced BST performs the theoretical minimum amount of\ncomparisons necessary to find an element (log<sub>2</sub>n). However, in practice the way this\nis done is *very* inefficient for modern computer architectures. In particular, every element\nis stored in its own individually heap-allocated node. This means that every single insertion\ntriggers a heap-allocation, and every single comparison should be a cache-miss. Since these\nare both notably expensive things to do in practice, we are forced to, at the very least,\nreconsider the BST strategy.\n\nA B-Tree instead makes each node contain B-1 to 2B-1 elements in a contiguous array. By doing\nthis, we reduce the number of allocations by a factor of B, and improve cache efficiency in\nsearches. However, this does mean that searches will have to do *more* comparisons on average.\nThe precise number of comparisons depends on the node search strategy used. For optimal cache\nefficiency, one could search the nodes linearly. For optimal comparisons, one could search\nthe node using binary search. As a compromise, one could also perform a linear search\nthat initially only checks every i<sup>th</sup> element for some choice of i.\n\nCurrently, our implementation simply performs naive linear search. This provides excellent\nperformance on *small* nodes of elements which are cheap to compare. However in the future we\nwould like to further explore choosing the optimal search strategy based on the choice of B,\nand possibly other factors. Using linear search, searching for a random element is expected\nto take B * log(n) comparisons, which is generally worse than a BST. In practice,\nhowever, performance is excellent.\n\nIt is a logic error for a key to be modified in such a way that the key's ordering relative to\nany other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\nThe behavior resulting from such a logic error is not specified, but will be encapsulated to the\n`BTreeMap` that observed the logic error and not result in undefined behavior. This could\ninclude panics, incorrect results, aborts, memory leaks, and non-termination.\n\nIterators obtained from functions such as [`BTreeMap::iter`], [`BTreeMap::into_iter`], [`BTreeMap::values`], or\n[`BTreeMap::keys`] produce their items in order by key, and take worst-case logarithmic and\namortized constant time per item returned.\n\n[B-Tree]: https://en.wikipedia.org/wiki/B-tree\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `BTreeMap<&str, &str>` in this example).\nlet mut movie_reviews = BTreeMap::new();\n\n// review some movies.\nmovie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");\nmovie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");\nmovie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");\nmovie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it a lot.\");\n\n// check for a specific one.\nif !movie_reviews.contains_key(\"Les Misérables\") {\n    println!(\"We've got {} reviews, but Les Misérables ain't one.\",\n             movie_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nmovie_reviews.remove(\"The Blues Brothers\");\n\n// look up the values associated with some keys.\nlet to_find = [\"Up!\", \"Office Space\"];\nfor movie in &to_find {\n    match movie_reviews.get(movie) {\n       Some(review) => println!(\"{movie}: {review}\"),\n       None => println!(\"{movie} is unreviewed.\")\n    }\n}\n\n// Look up the value for a key (will panic if the key is not found).\nprintln!(\"Movie review: {}\", movie_reviews[\"Office Space\"]);\n\n// iterate over everything.\nfor (movie, review) in &movie_reviews {\n    println!(\"{movie}: \\\"{review}\\\"\");\n}\n```\n\nA `BTreeMap` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BTreeMap;\n\nlet solar_distance = BTreeMap::from([\n    (\"Mercury\", 0.4),\n    (\"Venus\", 0.7),\n    (\"Earth\", 1.0),\n    (\"Mars\", 1.5),\n]);\n```\n\n`BTreeMap` implements an [`Entry API`], which allows for complex\nmethods of getting, setting, updating and removing keys and their values:\n\n[`Entry API`]: BTreeMap::entry\n\n```\nuse std::collections::BTreeMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `BTreeMap<&str, u8>` in this example).\nlet mut player_stats = BTreeMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();\n\n// modify an entry before an insert with in-place mutation\nplayer_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n```","links":{"core::cell::RefCell":"1:4613:220","BTreeMap::entry":"0:1635:4370","`BTreeMap::iter`":"0:2074:954","`BTreeMap::keys`":"0:2076:4872","`Ord`":"1:2701:194","`BTreeMap::into_iter`":"0:1720:933","`BTreeMap::values`":"0:2077:1874","core::cell::Cell":"1:4543:8012"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BTreeMap\"]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1587","0:1591","0:1597","0:2070","a:1:3146:11953-0:1428:99","a:1:32053:3459-0:1428:99","a:1:3111:246-0:1428:99","a:1:31996:236-0:1428:99","a:1:41612:4469-0:1428:99","b:0:727-0:1428:99","b:1:2888-0:1428:99","b:1:2618-0:1428:99","b:1:2615-0:1428:99","b:1:3727-0:1428:99","b:1:2892-0:1428:99","b:1:2903-0:1428:99","b:1:2898-0:1428:99","0:1436","0:2040","0:2062","0:2030","0:2055","0:2045","0:1997","0:1679","0:1714","0:2036","0:2003","0:2020","0:2050","0:1645","0:2011","0:1445","0:1441","0:2026"]}}},"0:1705:974":{"id":"0:1705:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1619,4],"end":[1621,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6113:3131":{"id":"0:6113:3131","crate_id":0,"name":"new_uninit_slice_in","span":{"filename":"library/alloc/src/sync.rs","begin":[1205,4],"end":[1207,5]},"visibility":"public","docs":"Constructs a new atomically reference-counted slice with uninitialized contents in the\nprovided allocator.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet mut values = Arc::<[u32], _>::new_uninit_slice_in(3, System);\n\nlet values = unsafe {\n    // Deferred initialization:\n    Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n    Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n    Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7645:9281":{"id":"a:1:3146:11953-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6212:8273":{"id":"0:6212:8273","crate_id":0,"name":"get_mut_unchecked","span":{"filename":"library/alloc/src/sync.rs","begin":[2360,4],"end":[2364,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Arc`,\nwithout any check.\n\nSee also [`get_mut`], which is safe and does appropriate checks.\n\n[`get_mut`]: Arc::get_mut\n\n# Safety\n\nIf any other `Arc` or [`Weak`] pointers to the same allocation exist, then\nthey must not be dereferenced or have active borrows for the duration\nof the returned borrow, and their inner type must be exactly the same as the\ninner type of this Rc (including lifetimes). This is trivially the case if no\nsuch pointers exist, for example immediately after `Arc::new`.\n\n# Examples\n\n```\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut x = Arc::new(String::new());\nunsafe {\n    Arc::get_mut_unchecked(&mut x).push_str(\"foo\")\n}\nassert_eq!(*x, \"foo\");\n```\nOther `Arc` pointers to the same allocation must be to the same type.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet x: Arc<str> = Arc::from(\"Hello, world!\");\nlet mut y: Arc<[u8]> = x.clone().into();\nunsafe {\n    // this is Undefined Behavior, because x's inner type is str, not [u8]\n    Arc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n}\nprintln!(\"{}\", &*x); // Invalid UTF-8 in a str\n```\nOther `Arc` pointers to the same allocation must be to the exact same type, including lifetimes.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet x: Arc<&str> = Arc::new(\"Hello, world!\");\n{\n    let s = String::from(\"Oh, no!\");\n    let mut y: Arc<&str> = x.clone().into();\n    unsafe {\n        // this is Undefined Behavior, because x's inner type\n        // is &'long str, not &'short str\n        *Arc::get_mut_unchecked(&mut y) = &s;\n    }\n}\nprintln!(\"{}\", &*x); // Use-after-free\n```","links":{"`Weak`":"0:6039:8069","Arc::get_mut":"0:6211:4637"},"attrs":["#[inline]","#[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:921:311":{"id":"0:921:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1250,4],"end":[1252,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4352":{"id":"0:4352","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[160,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4354:974","0:4355:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3655":{"id":"0:3655","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[82,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3657:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5943":{"id":"0:5943","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[3004,0],"end":[3020,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5944:172","0:5945:1167","0:5946:3429","0:5947:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7972:678":{"id":"0:7972:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[36,0],"end":[36,117]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7444:209":{"id":"b:1:2892-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5919":{"id":"0:5919","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2912,0],"end":[2924,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_char","write_fmt"],"trait":{"name":"Write","id":"1:10203:7841","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5920:1911","0:5921:9861"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7644:462":{"id":"0:7644:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/string.rs","begin":[401,47],"end":[401,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:307":{"id":"0:98:307","crate_id":0,"name":"alloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[1,0],"end":[452,1]},"visibility":"public","docs":"Memory allocation APIs","links":{},"attrs":["#![stable(feature = \"alloc_module\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:7363:2619","0:110:307","0:111:585","0:112:1365","0:113:310","0:127:2617","0:103-1:13696:307"],"is_stripped":false}}},"0:4770":{"id":"0:4770","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[767,0],"end":[774,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4771:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1105:810":{"id":"0:1105:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1796,4],"end":[1798,5]},"visibility":"default","docs":"Converts a `BinaryHeap<T>` into a `Vec<T>`.\n\nThis conversion requires no data movement or allocation, and has\nconstant time complexity.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["heap",{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1568:209":{"id":"b:1:2615-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:2089:4918":{"id":"b:1:2892-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1934":{"id":"0:1934","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2102,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1938:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4622:933":{"id":"0:4622:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2808,4],"end":[2810,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7545:462":{"id":"0:7545:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5228":{"id":"0:5228","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2801,0],"end":[2801,96]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3599:3007","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5876":{"id":"0:5876","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2678,0],"end":[2683,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5877:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6288:1016":{"id":"0:6288:1016","crate_id":0,"name":"lt","span":{"filename":"library/alloc/src/sync.rs","begin":[3176,4],"end":[3178,5]},"visibility":"default","docs":"Less-than comparison for two `Arc`s.\n\nThe two are compared by calling `<` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five < Arc::new(6));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13227:28445":{"id":"1:13227:28445","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1815":{"id":"0:1815","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1842,0],"end":[1846,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1818:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4491:3917":{"id":"0:4491:3917","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[667,4],"end":[674,5]},"visibility":"public","docs":"Provides a reference to the element at the given index.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nbuf.push_back(6);\nassert_eq!(buf.get(1), Some(&4));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1327:4374":{"id":"b:1:2615-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:918:4123":{"id":"0:918:4123","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1198,4],"end":[1200,5]},"visibility":"public","docs":"Discards capacity with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n\nassert!(heap.capacity() >= 100);\nheap.shrink_to(10);\nassert!(heap.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5503:3595":{"id":"0:5503:3595","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/slice.rs","begin":[831,4],"end":[833,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2098:462":{"id":"0:2098:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2794,4],"end":[2797,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4193":{"id":"0:4193","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[162,0],"end":[162,43]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7074:4123":{"id":"0:7074:4123","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1106,4],"end":[1110,5]},"visibility":"public","docs":"Shrinks the capacity of the vector with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\nassert!(vec.capacity() >= 10);\nvec.shrink_to(4);\nassert!(vec.capacity() >= 4);\nvec.shrink_to(0);\nassert!(vec.capacity() >= 3);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7487:462":{"id":"0:7487:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5756":{"id":"0:5756","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2107,0],"end":[2113,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5757:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3476:4798":{"id":"0:3476:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1481,4],"end":[1486,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:4423:264":{"id":"a:1:3111:246-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4358":{"id":"0:4358","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[174,0],"end":[174,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1030":{"id":"0:1030","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1634,0],"end":[1634,72]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7397":{"id":"0:7397","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1643,9],"end":[1643,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7401:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:13432-0:295:2399":{"id":"b:1:13432-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:44290:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:44293:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:13434:198","1:13435:163","1:13436:932"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"b:1:2903-0:4149:4509":{"id":"b:1:2903-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7509:678":{"id":"0:7509:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2733,0],"end":[2733,62]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5461":{"id":"0:5461","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[707,0],"end":[718,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Concat","id":"0:5453:8837","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"slice":{"generic":"V"}},"items":["0:5464:198","0:5465:487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13132:334":{"id":"1:13132:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13133:2855","`u8`":"1:52095:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:4074:4150":{"id":"b:1:2892-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:612":{"id":"0:247:612","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[146,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:651":{"id":"0:250:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[156,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4778":{"id":"0:4778","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[823,0],"end":[828,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4779:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2000:813":{"id":"0:2000:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2225,4],"end":[2235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4776":{"id":"0:4776","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[800,0],"end":[819,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_of_nonzerou8\", since = \"1.43.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4777:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5026:8123":{"id":"0:5026:8123","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[1516,4],"end":[1518,5]},"visibility":"public","docs":"Gets the number of strong (`Rc`) pointers to this allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\nlet _also_five = Rc::clone(&five);\n\nassert_eq!(2, Rc::strong_count(&five));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_counts\", since = \"1.15.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3844:4987":{"id":"0:3844:4987","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1572,4],"end":[1580,5]},"visibility":"public","docs":"Returns a reference to the next element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7645:9281":{"id":"a:1:3111:246-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:7609:7098":{"id":"b:1:2615-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:7402:4039":{"id":"b:1:2892-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2888-0:218:3019":{"id":"b:1:2888-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1671":{"id":"0:1671","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1546,0],"end":[1550,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1674:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2123":{"id":"0:2123","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2872,0],"end":[2876,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2127:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5552-1:43687:8931":{"id":"0:5552-1:43687:8931","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[40,33],"end":[40,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::EscapeDefault","name":"EscapeDefault","id":"1:43687:8931","glob":false}}},"0:5851:9321":{"id":"0:5851:9321","crate_id":0,"name":"from_str","span":{"filename":"library/alloc/src/string.rs","begin":[2506,4],"end":[2508,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12772:8933","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7652:678":{"id":"0:7652:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[402,16],"end":[402,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1116":{"id":"0:1116","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1837,0],"end":[1844,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1120:172","0:1121:4175","0:1122:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2030":{"id":"0:2030","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2286,0],"end":[2290,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2034:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:7645:9281":{"id":"b:1:2888-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:7527:2620":{"id":"a:1:41611:4468-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1480:4509":{"id":"b:1:2615-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4182:7004":{"id":"0:4182:7004","crate_id":0,"name":"rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[132,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["accum",{"generic":"Acc"}],["f",{"generic":"F"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:2114:4932":{"id":"b:1:2892-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:445:810":{"id":"0:445:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1570,4],"end":[1572,5]},"visibility":"default","docs":"Converts a `&str` into a `Box<str>`\n\nThis conversion allocates on the heap\nand performs a copy of `s`.\n\n# Examples\n\n```rust\nlet boxed: Box<str> = Box::from(\"hello\");\nprintln!(\"{boxed}\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1568:209":{"id":"0:1568:209","crate_id":0,"name":"Range","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[576,0],"end":[578,1]},"visibility":"public","docs":"An iterator over a sub-range of entries in a `BTreeMap`.\n\nThis `struct` is created by the [`range`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`range`]: BTreeMap::range","links":{"BTreeMap::range":"0:1629:4502","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1568:209","a:1:32053:3459-0:1568:209","a:1:3111:246-0:1568:209","a:1:31996:236-0:1568:209","a:1:41612:4469-0:1568:209","a:1:41611:4468-0:1568:209","b:0:727-0:1568:209","b:1:8171-0:1568:209","b:1:2888-0:1568:209","b:1:2618-0:1568:209","b:1:2615-0:1568:209","b:1:3727-0:1568:209","b:1:2892-0:1568:209","b:1:2903-0:1568:209","b:1:2898-0:1568:209","0:1573","0:1873","0:1882","0:1976","0:1968","0:1973"]}}},"0:5464:198":{"id":"0:5464:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[708,4],"end":[708,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:1:2618-0:7380:4065":{"id":"b:1:2618-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7544":{"id":"0:7544","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7545:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3111:246-0:7372:4175":{"id":"a:1:3111:246-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3111:246-0:7380:4065":{"id":"a:1:3111:246-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3581":{"id":"0:3581","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1798,0],"end":[1815,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3584:172","0:3585:1167","0:3586:3429","0:3587:4798"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7932":{"id":"0:7932","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[27,0],"end":[27,126]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"items":["0:7936:678","0:7937:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:1546:4541":{"id":"b:1:8171-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:41611:4468-0:7569:7099":{"id":"a:1:41611:4468-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6562":{"id":"0:6562","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[37,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6565:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3512:60":{"id":"0:3512:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1566,4],"end":[1568,5]},"visibility":"default","docs":"Creates an empty `btree_set::IntoIter`.\n\n```\n# use std::collections::btree_set;\nlet iter: btree_set::IntoIter<u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13125:29474":{"id":"1:13125:29474","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3369:813":{"id":"0:3369:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1190,4],"end":[1200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2062":{"id":"0:2062","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2338,0],"end":[2357,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:2067:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:1557:4545":{"id":"b:1:2618-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3473:1167":{"id":"0:3473:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1469,4],"end":[1471,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1384:5063":{"id":"0:1384:5063","crate_id":0,"name":"or_insert","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:4925:216":{"id":"b:0:727-0:4925:216","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1092":{"id":"0:1092","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1763,0],"end":[1772,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1095:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1789":{"id":"0:1789","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1794,0],"end":[1794,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3921:933":{"id":"0:3921:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":"Consumes the list into an iterator yielding elements by value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:893:3991":{"id":"0:893:3991","crate_id":0,"name":"into_sorted_vec","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[638,4],"end":[656,5]},"visibility":"public","docs":"Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from([1, 2, 4, 5, 7]);\nheap.push(6);\nheap.push(3);\n\nlet vec = heap.into_sorted_vec();\nassert_eq!(vec, [1, 2, 3, 4, 5, 6, 7]);\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4015":{"id":"0:4015","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2209,0],"end":[2209,70]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1552,0],"end":[1563,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:999:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4286":{"id":"0:4286","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[250,0],"end":[255,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4289:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7674:1135":{"id":"0:7674:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2346,0],"end":[2346,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7938":{"id":"0:7938","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[28,0],"end":[28,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"U"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7942:678","0:7943:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:8174:4175":{"id":"1:8174:4175","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:3727-0:6554:4150":{"id":"b:1:3727-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4862-1:10258:7844":{"id":"0:4862-1:10258:7844","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[594,20],"end":[594,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::LowerHex","name":"LowerHex","id":"1:10258:7844","glob":false}}},"0:5564-1:43583:8938":{"id":"0:5564-1:43583:8938","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[49,20],"end":[49,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Matches","name":"Matches","id":"1:43583:8938","glob":false}}},"0:692:810":{"id":"0:692:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2440,4],"end":[2442,5]},"visibility":"default","docs":"Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\nuse std::borrow::Cow;\n\nlet a_cow_str_error = Cow::from(\"a str error\");\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Sync`":"1:3111:246","`Cow`":"0:732:118","`Send`":"1:31996:236","`Error`":"1:2951:136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2181:5027":{"id":"0:2181:5027","crate_id":0,"name":"insert_before","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3370,4],"end":[3372,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the\nnewly inserted element.\n\nIf the inserted key is not greater than the key before the cursor\n(if any), or if it not less than the key after the cursor (if any),\nthen an [`UnorderedKeyError`] is returned since this would\ninvalidate the [`Ord`] invariant between the keys of the map.","links":{"`Ord`":"1:2701:194","`UnorderedKeyError`":"0:7412:5026"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1480:4509":{"id":"a:1:31996:236-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5130:678":{"id":"0:5130:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/rc.rs","begin":[2292,4],"end":[2294,5]},"visibility":"default","docs":"Equality for two `Rc`s.\n\nTwo `Rc`s are equal if their inner values are equal, even if they are\nstored in different allocation.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Rc`s that point to the same allocation are\nalways equal.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five == Rc::new(5));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7079:334":{"id":"0:7079:334","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1302,4],"end":[1306,5]},"visibility":"public","docs":"Returns a raw pointer to the vector's buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn't allocate.\n\nThe caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.\n\nThe caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an `UnsafeCell`) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n\nThis method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to [`as_ptr`] and [`as_mut_ptr`].\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.\n\n\n# Examples\n\n```\nlet x = vec![1, 2, 4];\nlet x_ptr = x.as_ptr();\n\nunsafe {\n    for i in 0..x.len() {\n        assert_eq!(*x_ptr.add(i), 1 << i);\n    }\n}\n```\n\nDue to the aliasing guarantee, the following code is legal:\n\n```rust\nunsafe {\n    let mut v = vec![0, 1, 2];\n    let ptr1 = v.as_ptr();\n    let _ = ptr1.read();\n    let ptr2 = v.as_mut_ptr().offset(2);\n    ptr2.write(2);\n    // Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    let _ = ptr1.read();\n}\n```\n\n[`as_mut_ptr`]: Vec::as_mut_ptr\n[`as_ptr`]: Vec::as_ptr","links":{"Vec::as_mut_ptr":"0:7080:2855","Vec::as_ptr":"0:7079:334"},"attrs":["#[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]","#[rustc_never_returns_null_ptr]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:2398":{"id":"0:142:2398","crate_id":0,"name":"boxed","span":{"filename":"library/alloc/src/boxed.rs","begin":[1,0],"end":[2485,1]},"visibility":"public","docs":"The `Box<T>` type for heap allocation.\n\n[`Box<T>`], casually referred to as a 'box', provides the simplest form of\nheap allocation in Rust. Boxes provide ownership for this allocation, and\ndrop their contents when they go out of scope. Boxes also ensure that they\nnever allocate more than `isize::MAX` bytes.\n\n# Examples\n\nMove a value from the stack to the heap by creating a [`Box`]:\n\n```\nlet val: u8 = 5;\nlet boxed: Box<u8> = Box::new(val);\n```\n\nMove a value from a [`Box`] back to the stack by [dereferencing]:\n\n```\nlet boxed: Box<u8> = Box::new(5);\nlet val: u8 = *boxed;\n```\n\nCreating a recursive data structure:\n\n```\n##[allow(dead_code)]\n#[derive(Debug)]\nenum List<T> {\n    Cons(T, Box<List<T>>),\n    Nil,\n}\n\nlet list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));\nprintln!(\"{list:?}\");\n```\n\nThis will print `Cons(1, Cons(2, Nil))`.\n\nRecursive structures must be boxed, because if the definition of `Cons`\nlooked like this:\n\n```compile_fail,E0072\n# enum List<T> {\nCons(T, List<T>),\n# }\n```\n\nIt wouldn't work. This is because the size of a `List` depends on how many\nelements are in the list, and so we don't know how much memory to allocate\nfor a `Cons`. By introducing a [`Box<T>`], which has a defined size, we know how\nbig `Cons` needs to be.\n\n# Memory layout\n\nFor non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\nits allocation. It is valid to convert both ways between a [`Box`] and a\nraw pointer allocated with the [`Global`] allocator, given that the\n[`Layout`] used with the allocator is correct for the type. More precisely,\na `value: *mut T` that has been allocated with the [`Global`] allocator\nwith `Layout::for_value(&*value)` may be converted into a box using\n[`Box::<T>::from_raw(value)`]. Conversely, the memory backing a `value: *mut\nT` obtained from [`Box::<T>::into_raw`] may be deallocated using the\n[`Global`] allocator with [`Layout::for_value(&*value)`].\n\nFor zero-sized values, the `Box` pointer still has to be [valid] for reads\nand writes and sufficiently aligned. In particular, casting any aligned\nnon-zero integer literal to a raw pointer produces a valid pointer, but a\npointer pointing into previously allocated memory that since got freed is\nnot valid. The recommended way to build a Box to a ZST if `Box::new` cannot\nbe used is to use [`ptr::NonNull::dangling`].\n\nSo long as `T: Sized`, a `Box<T>` is guaranteed to be represented\nas a single pointer and is also ABI-compatible with C pointers\n(i.e. the C type `T*`). This means that if you have extern \"C\"\nRust functions that will be called from C, you can define those\nRust functions using `Box<T>` types, and use `T*` as corresponding\ntype on the C side. As an example, consider this C header which\ndeclares functions that create and destroy some kind of `Foo`\nvalue:\n\n```c\n/* C header */\n\n/* Returns ownership to the caller */\nstruct Foo* foo_new(void);\n\n/* Takes ownership from the caller; no-op when invoked with null */\nvoid foo_delete(struct Foo*);\n```\n\nThese two functions might be implemented in Rust as follows. Here, the\n`struct Foo*` type from C is translated to `Box<Foo>`, which captures\nthe ownership constraints. Note also that the nullable argument to\n`foo_delete` is represented in Rust as `Option<Box<Foo>>`, since `Box<Foo>`\ncannot be null.\n\n```\n#[repr(C)]\npub struct Foo;\n\n#[no_mangle]\npub extern \"C\" fn foo_new() -> Box<Foo> {\n    Box::new(Foo)\n}\n\n#[no_mangle]\npub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n```\n\nEven though `Box<T>` has the same representation and C ABI as a C pointer,\nthis does not mean that you can convert an arbitrary `T*` into a `Box<T>`\nand expect things to work. `Box<T>` values will always be fully aligned,\nnon-null pointers. Moreover, the destructor for `Box<T>` will attempt to\nfree the value with the global allocator. In general, the best practice\nis to only use `Box<T>` for pointers that originated from the global\nallocator.\n\n**Important.** At least at present, you should avoid using\n`Box<T>` types for functions that are defined in C but invoked\nfrom Rust. In those cases, you should directly mirror the C types\nas closely as possible. Using types like `Box<T>` where the C\ndefinition is just using `T*` can lead to undefined behavior, as\ndescribed in [rust-lang/unsafe-code-guidelines#198][ucg#198].\n\n# Considerations for unsafe code\n\n**Warning: This section is not normative and is subject to change, possibly\nbeing relaxed in the future! It is a simplified summary of the rules\ncurrently implemented in the compiler.**\n\nThe aliasing rules for `Box<T>` are the same as for `&mut T`. `Box<T>`\nasserts uniqueness over its content. Using raw pointers derived from a box\nafter that box has been mutated through, moved or borrowed as `&mut T`\nis not allowed. For more guidance on working with box from unsafe code, see\n[rust-lang/unsafe-code-guidelines#326][ucg#326].\n\n\n[ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198\n[ucg#326]: https://github.com/rust-lang/unsafe-code-guidelines/issues/326\n[dereferencing]: core::ops::Deref\n[`Box::<T>::from_raw(value)`]: Box::from_raw\n[`Global`]: crate::alloc::Global\n[`Layout`]: crate::alloc::Layout\n[`Layout::for_value(&*value)`]: crate::alloc::Layout::for_value\n[valid]: ptr#safety","links":{"crate::alloc::Global":"0:7363:2619","crate::alloc::Layout":"1:44378:179","`Box<T>`":"0:295:2399","`ptr::NonNull::dangling`":"1:2137:2691","ptr#safety":"1:1976:1312","`Box::<T>::into_raw`":"0:350:3225","`Box`":"0:295:2399","crate::alloc::Layout::for_value":"1:13725:13020","core::ops::Deref":"1:3319:124","Box::from_raw":"0:345:3190"},"attrs":["#[cfg(not(test))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:194-0:218:3019","0:295:2399"],"is_stripped":false}}},"1:43919:8912":{"id":"1:43919:8912","crate_id":1,"name":"Searcher","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"CharPredicateSearcher","id":"1:43903:12224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"F"}}],"bindings":[]}}}}}}},"0:4969:3058":{"id":"0:4969:3058","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/rc.rs","begin":[576,4],"end":[587,5]},"visibility":"public","docs":"Constructs a new `Rc<T>`, returning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api)]\nuse std::rc::Rc;\n\nlet five = Rc::try_new(5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:943:4057":{"id":"b:1:2898-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:3271:5793":{"id":"b:1:2615-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3525":{"id":"0:3525","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1606,0],"end":[1610,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3528:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:2089:4918":{"id":"a:1:31996:236-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13154:29479":{"id":"1:13154:29479","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43633:8934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7714:4776":{"id":"b:1:2615-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6124:359":{"id":"0:6124:359","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/sync.rs","begin":[1326,4],"end":[1329,5]},"visibility":"public","docs":"Converts to `Arc<[T]>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut values = Arc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Arc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{"mem::MaybeUninit::assume_init":"1:1821:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:917:2775":{"id":"0:917:2775","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1175,4],"end":[1177,5]},"visibility":"public","docs":"Discards as much additional capacity as possible.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n\nassert!(heap.capacity() >= 100);\nheap.shrink_to_fit();\nassert!(heap.capacity() == 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3973":{"id":"0:3973","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2122,0],"end":[2141,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3976:462","0:3977:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:7527:2620":{"id":"b:1:2615-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7369:60":{"id":"0:7369:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/alloc.rs","begin":[51,22],"end":[51,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3909":{"id":"0:3909","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2002,0],"end":[2013,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3911:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5567-1:43397:8720":{"id":"0:5567-1:43397:8720","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[51,20],"end":[51,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::RSplit","name":"RSplit","id":"1:43397:8720","glob":false}}},"0:6759":{"id":"0:6759","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[426,0],"end":[448,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6762:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3869:6188":{"id":"0:3869:6188","crate_id":0,"name":"front_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1874,4],"end":[1876,5]},"visibility":"public","docs":"Provides a mutable reference to the front element of the cursor's\nparent list, or None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:715-1:2612:103":{"id":"0:715-1:2612:103","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[12,31],"end":[12,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::borrow::BorrowMut","name":"BorrowMut","id":"1:2612:103","glob":false}}},"0:1918:2785":{"id":"0:1918:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2076,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6257":{"id":"0:6257","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2993,0],"end":[3011,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6259:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13149:9024":{"id":"1:13149:9024","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:52078:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43349:8925","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3893":{"id":"0:3893","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1973,0],"end":[1985,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3896:172","0:3897:1167","0:3898:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2895-0:295:2399":{"id":"b:1:2895-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2897:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:956:172":{"id":"0:956:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1448,4],"end":[1448,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"a:1:3111:246-0:7569:7099":{"id":"a:1:3111:246-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:3661:4509":{"id":"b:1:8171-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2898-0:1830:4776":{"id":"b:1:2898-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1120:172":{"id":"0:1120:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1838,4],"end":[1838,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"a:1:3111:246-0:4309:4057":{"id":"a:1:3111:246-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5825":{"id":"0:5825","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2372,0],"end":[2377,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5826:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7291":{"id":"0:7291","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3239,0],"end":[3246,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7293:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:3271:5793":{"id":"b:1:3727-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:4074:4150":{"id":"b:1:3727-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:4406-0:295:2399":{"id":"b:1:4406-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"AsyncIterator","id":"1:4383:2999","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoAsyncIterator","id":"1:4402:11875","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:4408:172","1:4409:24836","1:4410:24837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:3111:246-0:826:101":{"id":"a:1:3111:246-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5788:4213":{"id":"0:5788:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/string.rs","begin":[2218,4],"end":[2220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7444:209":{"id":"a:1:31996:236-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:578":{"id":"0:578","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2047,0],"end":[2053,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"async_fn_traits\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:32083:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsyncFnMut","id":"1:3187:3005","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncFnMut","id":"1:3187:3005","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:582:108","0:584:362"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3670:780":{"id":"0:3670:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[120,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5584:198":{"id":"0:5584:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/str.rs","begin":[74,4],"end":[74,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2892-0:7645:9281":{"id":"b:1:2892-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6596":{"id":"0:6596","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[174,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6599:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:4149:4509":{"id":"a:1:32053:3459-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3232:469":{"id":"0:3232:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:3238:4057":{"id":"b:1:2903-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5582":{"id":"0:5582","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[73,0],"end":[79,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"slice":{"generic":"S"}},"items":["0:5584:198","0:5585:8844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7635":{"id":"0:7635","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[362,9],"end":[362,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7636:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7638:1252":{"id":"0:7638:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/string.rs","begin":[362,20],"end":[362,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7637":{"id":"0:7637","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[362,20],"end":[362,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7638:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7363:2619":{"id":"b:1:3727-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:7538:2621":{"id":"b:1:2618-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5015:3190":{"id":"0:5015:3190","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[1262,4],"end":[1264,5]},"visibility":"public","docs":"Constructs an `Rc<T>` from a raw pointer.\n\nThe raw pointer must have been previously returned by a call to\n[`Rc<U>::into_raw`][into_raw] with the following requirements:\n\n* If `U` is sized, it must have the same size and alignment as `T`. This\n  is trivially true if `U` is `T`.\n* If `U` is unsized, its data pointer must have the same size and\n  alignment as `T`. This is trivially true if `Rc<U>` was constructed\n  through `Rc<T>` and then converted to `Rc<U>` through an [unsized\n  coercion].\n\nNote that if `U` or `U`'s data pointer is not `T` but has the same size\nand alignment, this is basically like transmuting references of\ndifferent types. See [`mem::transmute`][transmute] for more information\non what restrictions apply in this case.\n\nThe raw pointer must point to a block of memory allocated by the global allocator\n\nThe user of `from_raw` has to make sure a specific value of `T` is only\ndropped once.\n\nThis function is unsafe because improper use may lead to memory unsafety,\neven if the returned `Rc<T>` is never accessed.\n\n[into_raw]: Rc::into_raw\n[transmute]: core::mem::transmute\n[unsized coercion]: https://doc.rust-lang.org/reference/type-coercions.html#unsized-coercions\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(\"hello\".to_owned());\nlet x_ptr = Rc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Rc` to prevent leak.\n    let x = Rc::from_raw(x_ptr);\n    assert_eq!(&*x, \"hello\");\n\n    // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n```\n\nConvert a slice back into its original array:\n\n```\nuse std::rc::Rc;\n\nlet x: Rc<[u32]> = Rc::new([1, 2, 3]);\nlet x_ptr: *const [u32] = Rc::into_raw(x);\n\nunsafe {\n    let x: Rc<[u32; 3]> = Rc::from_raw(x_ptr.cast::<[u32; 3]>());\n    assert_eq!(&*x, &[1, 2, 3]);\n}\n```","links":{"Rc::into_raw":"0:5021:3225","core::mem::transmute":"1:1567:1740"},"attrs":["#[inline]","#[stable(feature = \"rc_raw\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:3807:4931":{"id":"b:1:2892-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4773:810":{"id":"0:4773:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[781,4],"end":[786,5]},"visibility":"default","docs":"Converts a `Cow<'a, CStr>` into a `Box<CStr>`,\nby copying the contents if they are borrowed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cow",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3490:172":{"id":"0:3490:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1513,4],"end":[1513,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:4719:3305":{"id":"0:4719:3305","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[188,4],"end":[190,5]},"visibility":"public","docs":"Returns a slice of [`u8`]s bytes that were attempted to convert to a [`CString`].\n\n# Examples\n\nBasic usage:\n\n```\nuse std::ffi::CString;\n\n// Some invalid bytes in a vector\nlet bytes = b\"f\\0oo\".to_vec();\n\nlet value = CString::from_vec_with_nul(bytes.clone());\n\nassert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n```","links":{"`CString`":"0:7553:7100","`u8`":"1:52095:1800"},"attrs":["#[must_use]","#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7286:469":{"id":"0:7286:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3220,4],"end":[3222,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:43924:9747":{"id":"1:43924:9747","crate_id":1,"name":"is_suffix_of","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"CharPredicateSearcher","id":"1:43903:12224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"F"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:4925:216":{"id":"b:1:2618-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4785":{"id":"0:4785","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[849,0],"end":[855,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4787:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3897:1167":{"id":"0:3897:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1977,4],"end":[1979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4847-1:10252:128":{"id":"0:4847-1:10252:128","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[586,27],"end":[586,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Display","name":"Display","id":"1:10252:128","glob":false}}},"0:7066:7372":{"id":"0:7066:7372","crate_id":0,"name":"into_raw_parts","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[856,4],"end":[859,5]},"visibility":"public","docs":"Decomposes a `Vec<T>` into its raw components: `(pointer, length, capacity)`.\n\nReturns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to [`from_raw_parts`].\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Vec`. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a `Vec` with the [`from_raw_parts`] function, allowing\nthe destructor to perform the cleanup.\n\n[`from_raw_parts`]: Vec::from_raw_parts\n\n# Examples\n\n```\n#![feature(vec_into_raw_parts)]\nlet v: Vec<i32> = vec![-1, 0, 1];\n\nlet (ptr, len, cap) = v.into_raw_parts();\n\nlet rebuilt = unsafe {\n    // We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    let ptr = ptr as *mut u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\nassert_eq!(rebuilt, [4294967295, 0, 1]);\n```","links":{"Vec::from_raw_parts":"0:7058:3544"},"attrs":["#[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n\"65816\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5693:3688":{"id":"0:5693:3688","crate_id":0,"name":"push_str","span":{"filename":"library/alloc/src/string.rs","begin":[1066,4],"end":[1068,5]},"visibility":"public","docs":"Appends a given string slice onto the end of this `String`.\n\n# Examples\n\n```\nlet mut s = String::from(\"foo\");\n\ns.push_str(\"bar\");\n\nassert_eq!(\"foobar\", s);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"append\", \"push\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["string",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:1830:4776":{"id":"b:1:8171-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2892-0:3305:5807":{"id":"b:1:2892-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7402:4039":{"id":"0:7402:4039","crate_id":0,"name":"DrainSorted","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1701,0],"end":[1707,1]},"visibility":"public","docs":"A draining iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::drain_sorted()`]. See its\ndocumentation for more.\n\n[`drain_sorted`]: BinaryHeap::drain_sorted","links":{"`BinaryHeap::drain_sorted()`":"0:902:4038"},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1054","a:1:3146:11953-0:7402:4039","a:1:32053:3459-0:7402:4039","a:1:3111:246-0:7402:4039","a:1:31996:236-0:7402:4039","a:1:41612:4469-0:7402:4039","a:1:41611:4468-0:7402:4039","b:1:8171-0:7402:4039","b:1:2888-0:7402:4039","b:1:2618-0:7402:4039","b:1:2615-0:7402:4039","b:1:3727-0:7402:4039","b:1:2892-0:7402:4039","b:1:2903-0:7402:4039","b:1:2898-0:7402:4039","0:7407","0:1089","0:1077","0:1086","0:1083","0:1059"]}}},"0:7488":{"id":"0:7488","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2730,0],"end":[2730,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7492:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1123":{"id":"0:1123","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1847,0],"end":[1863,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1126:3569","0:1128:2350","0:1129:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4678":{"id":"0:4678","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[114,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4679:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7608:780":{"id":"0:7608:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,31],"end":[161,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:2103:4931":{"id":"a:1:3111:246-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3416:172":{"id":"0:3416:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1301,4],"end":[1301,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7912:678":{"id":"0:7912:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[23,0],"end":[23,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A2"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6590:3429":{"id":"0:6590:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[160,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7645:9281":{"id":"b:1:2618-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:7363:2619":{"id":"a:1:3111:246-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3584:172":{"id":"0:3584:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1799,4],"end":[1799,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:3658":{"id":"0:3658","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[99,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3660:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:1428:99":{"id":"b:0:727-0:1428:99","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1905":{"id":"0:1905","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2051,0],"end":[2051,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1536:4534":{"id":"0:1536:4534","crate_id":0,"name":"ValuesMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[515,0],"end":[517,1]},"visibility":"public","docs":"A mutable iterator over the values of a `BTreeMap`.\n\nThis `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`values_mut`]: BTreeMap::values_mut","links":{"BTreeMap::values_mut":"0:2078:4883","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1536:4534","a:1:32053:3459-0:1536:4534","a:1:3111:246-0:1536:4534","a:1:31996:236-0:1536:4534","a:1:41612:4469-0:1536:4534","a:1:41611:4468-0:1536:4534","b:1:8171-0:1536:4534","b:1:2888-0:1536:4534","b:1:2618-0:1536:4534","b:1:2615-0:1536:4534","b:1:3727-0:1536:4534","b:1:2892-0:1536:4534","b:1:2903-0:1536:4534","b:1:2898-0:1536:4534","0:1905","0:1901","0:1886","0:1541","0:1895"]}}},"0:778:60":{"id":"0:778:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/borrow.rs","begin":[415,4],"end":[417,5]},"visibility":"default","docs":"Creates an owned Cow<'a, B> with the default value for the contained owned value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1342:4372":{"id":"0:1342:4372","crate_id":0,"name":"OccupiedEntry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[76,0],"end":[90,1]},"visibility":"public","docs":"A view into an occupied entry in a `BTreeMap`.\nIt is part of the [`Entry`] enum.","links":{"`Entry`":"0:1311:4371"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1407","a:1:3146:11953-0:1342:4372","a:1:32053:3459-0:1342:4372","a:1:3111:246-0:1342:4372","a:1:31996:236-0:1342:4372","a:1:41612:4469-0:1342:4372","a:1:41611:4468-0:1342:4372","b:1:2888-0:1342:4372","b:1:2618-0:1342:4372","b:1:2615-0:1342:4372","b:1:3727-0:1342:4372","b:1:2892-0:1342:4372","b:1:2903-0:1342:4372","b:1:2898-0:1342:4372","0:1351"]}}},"a:1:3146:11953-0:7472:4175":{"id":"a:1:3146:11953-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3859:5027":{"id":"0:3859:5027","crate_id":0,"name":"insert_before","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1683,4],"end":[1693,5]},"visibility":"public","docs":"Inserts a new element into the `LinkedList` before the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new element is\ninserted at the end of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:3245:5783":{"id":"a:1:41612:4469-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5001:3131":{"id":"0:5001:3131","crate_id":0,"name":"new_uninit_slice_in","span":{"filename":"library/alloc/src/rc.rs","begin":[1066,4],"end":[1068,5]},"visibility":"public","docs":"Constructs a new reference-counted slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet mut values = Rc::<[u32], _>::new_uninit_slice_in(3, System);\n\nlet values = unsafe {\n    // Deferred initialization:\n    Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n    Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n    Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7363:2619":{"id":"b:1:2615-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6426:810":{"id":"0:6426:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/task.rs","begin":[291,4],"end":[295,5]},"visibility":"default","docs":"Use a `Wake`-able type as a `LocalWaker`.\n\nNo heap allocations or atomic operations are used for this conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["waker",{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"LocalWaker","id":"1:13664:10390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6139:8206":{"id":"0:6139:8206","crate_id":0,"name":"increment_strong_count_in","span":{"filename":"library/alloc/src/sync.rs","begin":[1739,4],"end":[1747,5]},"visibility":"public","docs":"Increments the strong reference count on the `Arc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Arc::into_raw`, and the\nassociated `Arc` instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method,, and `ptr` must point to a block of memory\nallocated by `alloc`.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet five = Arc::new_in(5, System);\n\nunsafe {\n    let ptr = Arc::into_raw(five);\n    Arc::increment_strong_count_in(ptr, System);\n\n    // This assertion is deterministic because we haven't shared\n    // the `Arc` between threads.\n    let five = Arc::from_raw_in(ptr, System);\n    assert_eq!(2, Arc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3701":{"id":"0:3701","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[502,0],"end":[1167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3704:2669","0:3705:954","0:3706:955","0:3707:6148","0:3708:6150","0:3709:6152","0:3710:6155","0:3711:3440","0:3712:974","0:3713:4152","0:3714:5864","0:3716:4780","0:3718:6188","0:3720:5177","0:3722:6196","0:3724:6200","0:3725:6209","0:3726:6214","0:3727:6219","0:3728:4749","0:3729:4222","0:3730:4049","0:3733:6255","0:3735:4683"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3791:60":{"id":"0:3791:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1313,4],"end":[1315,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5838:917":{"id":"0:5838:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2456,4],"end":[2458,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:10903:238","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:6039:8069":{"id":"a:1:41612:4469-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13236:29493":{"id":"1:13236:29493","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3238:4057":{"id":"0:3238:4057","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"An iterator over the items of a `BTreeSet`.\n\nThis `struct` is created by the [`iter`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`iter`]: BTreeSet::iter","links":{"`BTreeSet`":"0:3209:100","BTreeSet::iter":"0:3364:954"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3238:4057","a:1:32053:3459-0:3238:4057","a:1:3111:246-0:3238:4057","a:1:31996:236-0:3238:4057","a:1:41612:4469-0:3238:4057","a:1:41611:4468-0:3238:4057","b:0:727-0:3238:4057","b:1:8171-0:3238:4057","b:1:2888-0:3238:4057","b:1:2618-0:3238:4057","b:1:2615-0:3238:4057","b:1:3727-0:3238:4057","b:1:2892-0:3238:4057","b:1:2903-0:3238:4057","b:1:2898-0:3238:4057","0:3242","0:3494","0:3485","0:3466","0:3478","0:3469","0:3482"]}}},"b:1:2892-0:3245:5783":{"id":"b:1:2892-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:560:426":{"id":"0:560:426","crate_id":0,"name":"call_once","span":{"filename":"library/alloc/src/boxed.rs","begin":[2017,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["args",{"generic":"Args"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3358:141","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}}},"b:1:2892-0:3661:4509":{"id":"b:1:2892-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6138:8123":{"id":"0:6138:8123","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1703,4],"end":[1705,5]},"visibility":"public","docs":"Gets the number of strong (`Arc`) pointers to this allocation.\n\n# Safety\n\nThis method by itself is safe, but using it correctly requires extra care.\nAnother thread can change the strong count at any time,\nincluding potentially between calling this method and acting on the result.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\nlet _also_five = Arc::clone(&five);\n\n// This assertion is deterministic because we haven't shared\n// the `Arc` between threads.\nassert_eq!(2, Arc::strong_count(&five));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"arc_counts\", since = \"1.15.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1356:4373":{"id":"b:1:2615-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:890:3924":{"id":"0:890:3924","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[566,4],"end":[575,5]},"visibility":"public","docs":"Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::from([1, 3]);\n\nassert_eq!(heap.pop(), Some(3));\nassert_eq!(heap.pop(), Some(1));\nassert_eq!(heap.pop(), None);\n```\n\n# Time complexity\n\nThe worst case cost of `pop` on a heap containing *n* elements is *O*(log(*n*)).","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2895-0:6007:71":{"id":"b:1:2895-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2897:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4160:780":{"id":"0:4160:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5789":{"id":"0:5789","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2225,0],"end":[2234,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5791:3569","0:5794:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3358:3978":{"id":"0:3358:3978","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1038,4],"end":[1044,5]},"visibility":"public","docs":"Moves all elements from `other` into `self`, leaving `other` empty.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\na.insert(3);\n\nlet mut b = BTreeSet::new();\nb.insert(3);\nb.insert(4);\nb.insert(5);\n\na.append(&mut b);\n\nassert_eq!(a.len(), 5);\nassert_eq!(b.len(), 0);\n\nassert!(a.contains(&1));\nassert!(a.contains(&2));\nassert!(a.contains(&3));\nassert!(a.contains(&4));\nassert!(a.contains(&5));\n```","links":{},"attrs":["#[stable(feature = \"btree_append\", since = \"1.11.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:3397:4776":{"id":"b:1:2892-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:794":{"id":"0:794","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[464,0],"end":[477,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"1:33079:3572","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:796:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:1536:4534":{"id":"a:1:3146:11953-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4166:6996":{"id":"0:4166:6996","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[51,4],"end":[59,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2067:810":{"id":"0:2067:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2348,4],"end":[2356,5]},"visibility":"default","docs":"Converts a `[(K, V); N]` into a `BTreeMap<(K, V)>`.\n\n```\nuse std::collections::BTreeMap;\n\nlet map1 = BTreeMap::from([(1, 2), (3, 4)]);\nlet map2: BTreeMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6407:810":{"id":"0:6407:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/task.rs","begin":[113,4],"end":[117,5]},"visibility":"default","docs":"Use a [`Wake`]-able type as a `Waker`.\n\nNo heap allocations or atomic operations are used for this conversion.","links":{"`Wake`":"0:6402:10439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["waker",{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Waker","id":"1:13644:10393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5603":{"id":"0:5603","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[223,0],"end":[596,1]},"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["0:5604:8969","0:5605:4230","0:5608:8993","0:5611:9013","0:5619:9042","0:5620:7285","0:5621:8830","0:5622:8862","0:5623:8869"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:7363:2619":{"id":"b:1:2618-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1311:4371":{"id":"a:1:3111:246-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7942:678":{"id":"0:7942:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[28,0],"end":[28,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:4309:4057":{"id":"a:1:41612:4469-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:959:3431":{"id":"0:959:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1461,4],"end":[1463,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:1342:4372":{"id":"b:1:2903-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3977:464":{"id":"0:3977:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2129,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1610:4622":{"id":"0:1610:4622","crate_id":0,"name":"last_entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[862,4],"end":[875,5]},"visibility":"public","docs":"Returns the last entry in the map for in-place manipulation.\nThe key of this entry is the maximum key in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nif let Some(mut entry) = map.last_entry() {\n    if *entry.key() > 0 {\n        entry.insert(\"last\");\n    }\n}\nassert_eq!(*map.get(&1).unwrap(), \"a\");\nassert_eq!(*map.get(&2).unwrap(), \"last\");\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6570:2428":{"id":"0:6570:2428","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[57,4],"end":[59,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.\n\n# Examples\n\n```\nlet mut vec = vec!['a', 'b', 'c'];\nlet mut drain = vec.drain(..);\nassert_eq!(drain.as_slice(), &['a', 'b', 'c']);\nlet _ = drain.next().unwrap();\nassert_eq!(drain.as_slice(), &['b', 'c']);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:3238:4057":{"id":"a:1:31996:236-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1546:4541":{"id":"b:1:2615-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:491:3411":{"id":"0:491:3411","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/boxed.rs","begin":[1892,4],"end":[1899,5]},"visibility":"public","docs":"Downcasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send + Sync> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:477:3409"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7549":{"id":"0:7549","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,27],"end":[80,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:7569:7099":{"id":"b:1:2898-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:1568:209":{"id":"a:1:41611:4468-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3778:3429":{"id":"0:3778:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1277,4],"end":[1279,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7655:9289":{"id":"a:1:32053:3459-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:320:3096":{"id":"0:320:3096","crate_id":0,"name":"into_boxed_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[588,4],"end":[591,5]},"visibility":"public","docs":"Converts a `Box<T>` into a `Box<[T]>`\n\nThis conversion does not allocate on the heap and happens in place.","links":{},"attrs":["#[unstable(feature = \"box_into_boxed_slice\", issue = \"71582\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7055:1153":{"id":"0:7055:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[422,4],"end":[424,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n# Examples\n\n```\n# #![allow(unused_mut)]\nlet mut vec: Vec<i32> = Vec::new();\n```","links":{},"attrs":["#[inline]","#[rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:2103:4931":{"id":"b:1:2618-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:7372:4175":{"id":"b:1:3727-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:1830:4776":{"id":"b:1:2618-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1327:4374":{"id":"a:1:3111:246-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4549:6786":{"id":"0:4549:6786","crate_id":0,"name":"resize_with","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2123,4],"end":[2131,5]},"visibility":"public","docs":"Modifies the deque in-place so that `len()` is equal to `new_len`,\neither by removing excess elements from the back or by appending\nelements generated by calling `generator` to the back.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize_with(5, Default::default);\nassert_eq!(buf, [5, 10, 15, 0, 0]);\n\nbuf.resize_with(2, || unreachable!());\nassert_eq!(buf, [5, 10]);\n\nlet mut state = 100;\nbuf.resize_with(5, || { state += 1; state });\nassert_eq!(buf, [5, 10, 101, 102, 103]);\n```","links":{},"attrs":["#[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["generator",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl FnMut() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6699:311":{"id":"0:6699:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[108,4],"end":[110,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3271:5793":{"id":"b:1:2888-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1775:3429":{"id":"0:1775:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1756,4],"end":[1758,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7527:2620":{"id":"b:1:2888-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:826:101":{"id":"b:1:2615-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3316:1153":{"id":"0:3316:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[341,4],"end":[343,5]},"visibility":"public","docs":"Makes a new, empty `BTreeSet`.\n\nDoes not allocate anything on its own.\n\n# Examples\n\n```\n# #![allow(unused_mut)]\nuse std::collections::BTreeSet;\n\nlet mut set: BTreeSet<i32> = BTreeSet::new();\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_btree_new\", since = \"1.66.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5544-1:43355:8924":{"id":"0:5544-1:43355:8924","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,53],"end":[36,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::CharIndices","name":"CharIndices","id":"1:43355:8924","glob":false}}},"0:5775:813":{"id":"0:5775:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2167,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5391-1:11217:8728":{"id":"0:5391-1:11217:8728","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[71,38],"end":[71,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::SplitInclusiveMut","name":"SplitInclusiveMut","id":"1:11217:8728","glob":false}}},"b:1:2618-0:1428:99":{"id":"b:1:2618-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:6681:4175":{"id":"b:1:2615-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8171-0:1527:4528":{"id":"b:1:8171-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1885:60":{"id":"0:1885:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2014,4],"end":[2016,5]},"visibility":"default","docs":"Creates an empty `btree_map::Range`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::Range<'_, u8, u8> = Default::default();\nassert_eq!(iter.count(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1327:4374":{"id":"a:1:41612:4469-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:7372:4175":{"id":"b:1:8171-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:3519:172":{"id":"0:3519:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1580,4],"end":[1580,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:4018":{"id":"0:4018","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2212,0],"end":[2212,70]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4423:264":{"id":"0:4423:264","crate_id":0,"name":"VecDeque","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[94,0],"end":[106,1]},"visibility":"public","docs":"A double-ended queue implemented with a growable ring buffer.\n\nThe \"default\" usage of this type as a queue is to use [`push_back`] to add to\nthe queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\npush onto the back in this manner, and iterating over `VecDeque` goes front\nto back.\n\nA `VecDeque` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::VecDeque;\n\nlet deq = VecDeque::from([-1, 0, 1]);\n```\n\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous\nin memory. If you want to access the elements as a single slice, such as for\nefficient sorting, you can use [`make_contiguous`]. It rotates the `VecDeque`\nso that its elements do not wrap, and returns a mutable slice to the\nnow-contiguous element sequence.\n\n[`push_back`]: VecDeque::push_back\n[`pop_front`]: VecDeque::pop_front\n[`extend`]: VecDeque::extend\n[`append`]: VecDeque::append\n[`make_contiguous`]: VecDeque::make_contiguous","links":{"VecDeque::extend":"0:4633:3569","VecDeque::pop_front":"0:4532:6209","VecDeque::make_contiguous":"0:4550:6815","VecDeque::append":"0:4542:3978","VecDeque::push_back":"0:4535:6214"},"attrs":["#[rustc_diagnostic_item = \"VecDeque\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:4480","0:4485","0:4571","a:1:3146:11953-0:4423:264","a:1:32053:3459-0:4423:264","a:1:3111:246-0:4423:264","a:1:31996:236-0:4423:264","a:1:41612:4469-0:4423:264","a:1:41611:4468-0:4423:264","b:0:727-0:4423:264","b:1:2888-0:4423:264","b:1:2618-0:4423:264","b:1:2615-0:4423:264","b:1:3727-0:4423:264","b:1:2892-0:4423:264","b:1:2903-0:4423:264","b:1:2898-0:4423:264","0:4602","0:4657","0:4434","0:4583","0:7493","0:4637","0:4591","0:4653","0:4623","0:4580","0:4616","0:4429","0:4447","0:4610","0:4630","0:4587","0:7498","0:4645","0:4649","0:4606","0:4576","0:7511","0:7503","0:4597","0:7488","0:7519"]}}},"0:7273:2350":{"id":"0:7273:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3189,4],"end":[3191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:2114:4932":{"id":"b:1:2618-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:3792:4918":{"id":"b:1:2615-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4830:3494":{"id":"0:4830:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6072:1153":{"id":"0:6072:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/sync.rs","begin":[392,4],"end":[401,5]},"visibility":"public","docs":"Constructs a new `Arc<T>`.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:4925:216":{"id":"b:1:2898-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3867:6219":{"id":"0:3867:6219","crate_id":0,"name":"pop_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1845,4],"end":[1859,5]},"visibility":"public","docs":"Removes the last element from the cursor's parent list and returns it,\nor None if the list is empty. The element the cursor points to remains\nunchanged, unless it was pointing to the back element. In that case, it\npoints to the \"ghost\" element.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]","#[rustc_confusables(\"pop\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7271:3569":{"id":"0:7271:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3184,4],"end":[3186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:4309:4057":{"id":"b:1:2888-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:1830:4776":{"id":"b:1:3727-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:3635:181":{"id":"b:1:2892-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:7553:7100":{"id":"b:1:2892-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5167":{"id":"0:5167","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2489,0],"end":[2506,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_array\", since = \"1.74.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:5171:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7472:4175":{"id":"a:1:31996:236-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5558-1:43633:8934":{"id":"0:5558-1:43633:8934","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[45,20],"end":[45,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Lines","name":"Lines","id":"1:43633:8934","glob":false}}},"a:1:41611:4468-0:3872:4776":{"id":"a:1:41611:4468-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:5533-1:43671:8916":{"id":"0:5533-1:43671:8916","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[26,0],"end":[26,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::EncodeUtf16","name":"EncodeUtf16","id":"1:43671:8916","glob":false}}},"0:7539:2715":{"id":"0:7539:2715","crate_id":0,"name":"CapacityOverflow","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[89,4],"end":[89,20]},"visibility":"default","docs":"Error due to the computed capacity exceeding the collection's maximum\n(usually `isize::MAX` bytes).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:5694:9514":{"id":"0:5694:9514","crate_id":0,"name":"extend_from_within","span":{"filename":"library/alloc/src/string.rs","begin":[1094,4],"end":[1104,5]},"visibility":"public","docs":"Copies elements from `src` range to the end of the string.\n\n# Panics\n\nPanics if the starting point or end point do not lie on a [`char`]\nboundary, or if they're out of bounds.\n\n# Examples\n\n```\n#![feature(string_extend_from_within)]\nlet mut string = String::from(\"abcde\");\n\nstring.extend_from_within(2..);\nassert_eq!(string, \"abcdecde\");\n\nstring.extend_from_within(..2);\nassert_eq!(string, \"abcdecdeab\");\n\nstring.extend_from_within(4..8);\nassert_eq!(string, \"abcdecdeabecde\");\n```","links":{"`char`":"1:52078:458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"string_extend_from_within\", issue = \"103806\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"generic":"R"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7363:2619":{"id":"a:1:41612:4469-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:295:2399":{"id":"b:1:2888-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8171-0:7380:4065":{"id":"b:1:8171-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:5361-1:11858:8702":{"id":"0:5361-1:11858:8702","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[55,22],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_group_by\", since = \"1.77.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ChunkBy","name":"ChunkBy","id":"1:11858:8702","glob":false}}},"b:1:2615-0:3807:4931":{"id":"b:1:2615-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:6681:4175":{"id":"a:1:41611:4468-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:3305:5807":{"id":"a:1:41611:4468-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:4149:4509":{"id":"b:1:2888-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2010:2350":{"id":"0:2010:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2248,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["(k, v)",{"tuple":[{"generic":"K"},{"generic":"V"}]}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3779:3431":{"id":"0:3779:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1282,4],"end":[1284,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7730:10536":{"id":"a:1:31996:236-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4175:3431":{"id":"0:4175:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:4925:216":{"id":"a:1:3146:11953-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:6039:8069":{"id":"a:1:32053:3459-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3341:5836":{"id":"0:3341:5836","crate_id":0,"name":"first","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[794,4],"end":[799,5]},"visibility":"public","docs":"Returns a reference to the first element in the set, if any.\nThis element is always the minimum of all elements in the set.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nassert_eq!(set.first(), None);\nset.insert(1);\nassert_eq!(set.first(), Some(&1));\nset.insert(2);\nassert_eq!(set.first(), Some(&1));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"map_first_last\", since = \"1.66.0\")]","#[rustc_confusables(\"front\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415:3316":{"id":"0:415:3316","crate_id":0,"name":"write_i16","span":{"filename":"library/alloc/src/boxed.rs","begin":[1423,4],"end":[1425,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4805:780":{"id":"0:4805:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[962,4],"end":[964,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3866:6209":{"id":"0:3866:6209","crate_id":0,"name":"pop_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1817,4],"end":[1835,5]},"visibility":"public","docs":"Removes the first element from the cursor's parent list and returns it,\nor None if the list is empty. The element the cursor points to remains\nunchanged, unless it was pointing to the front element. In that case, it\npoints to the new front element.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7569:7099":{"id":"b:1:2615-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1606:4601":{"id":"0:1606:4601","crate_id":0,"name":"first_entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[779,4],"end":[792,5]},"visibility":"public","docs":"Returns the first entry in the map for in-place manipulation.\nThe key of this entry is the minimum key in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nif let Some(mut entry) = map.first_entry() {\n    if *entry.key() > 0 {\n        entry.insert(\"first\");\n    }\n}\nassert_eq!(*map.get(&1).unwrap(), \"first\");\nassert_eq!(*map.get(&2).unwrap(), \"b\");\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1342:4372":{"id":"a:1:3146:11953-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1917:4798":{"id":"0:1917:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2069,4],"end":[2074,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5258:8595":{"id":"0:5258:8595","crate_id":0,"name":"upgrade","span":{"filename":"library/alloc/src/rc.rs","begin":[3128,4],"end":[3142,5]},"visibility":"public","docs":"Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\ndropping of the inner value if successful.\n\nReturns [`None`] if the inner value has since been dropped.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet weak_five = Rc::downgrade(&five);\n\nlet strong_five: Option<Rc<_>> = weak_five.upgrade();\nassert!(strong_five.is_some());\n\n// Destroy all strong pointers.\ndrop(strong_five);\ndrop(five);\n\nassert!(weak_five.upgrade().is_none());\n```","links":{"`Rc`":"0:4925:216","`None`":"1:41519:190"},"attrs":["#[must_use =\n\"this returns a new `Rc`, \\\n                  without modifying the original weak pointer\"]","#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:5922:4150":{"id":"a:1:32053:3459-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1577,0],"end":[1608,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:447:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1994":{"id":"0:1994","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2221,0],"end":[2221,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4021":{"id":"0:4021","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2215,0],"end":[2215,73]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7576":{"id":"0:7576","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,16],"end":[136,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7577:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:5922:4150":{"id":"a:1:41611:4468-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:861:462":{"id":"0:861:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[384,4],"end":[386,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4323:462":{"id":"0:4323:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5176:810":{"id":"0:5176:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2522,4],"end":[2524,5]},"visibility":"default","docs":"Allocate a reference-counted slice and fill it by cloning `v`'s items.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: &[i32] = &[1, 2, 3];\nlet shared: Rc<[i32]> = Rc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1403:4229":{"id":"0:1403:4229","crate_id":0,"name":"key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5549-1:43338:8928":{"id":"0:5549-1:43338:8928","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[38,66],"end":[38,80]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::ParseBoolError","name":"ParseBoolError","id":"1:43338:8928","glob":false}}},"0:1967:60":{"id":"0:1967:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":"Creates an empty `btree_map::IntoValues`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::IntoValues<u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7246:4175":{"id":"0:7246:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2977,4],"end":[2977,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:11072:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:6388:3494":{"id":"0:6388:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/sync.rs","begin":[3637,4],"end":[3639,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated, deprecated_in_future)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:730:3587":{"id":"0:730:3587","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5033":{"id":"0:5033","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1724,0],"end":[1843,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5036:8336","0:5037:8356"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:111:585":{"id":"0:111:585","crate_id":0,"name":"dealloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Deallocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::dealloc`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `dealloc` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::dealloc`].","links":{"`Global`":"0:7363:2619","`Allocator`":"1:13756:2618","`GlobalAlloc::dealloc`":"1:13703:585"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:770":{"id":"0:770","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[384,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"constraint":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:772:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:909:954":{"id":"0:909:954","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[957,4],"end":[959,5]},"visibility":"public","docs":"Returns an iterator visiting all values in the underlying vector, in\narbitrary order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4]);\n\n// Print 1, 2, 3, 4 in arbitrary order\nfor x in heap.iter() {\n    println!(\"{x}\");\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7444:209":{"id":"b:1:2888-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4591":{"id":"0:4591","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2753,0],"end":[2764,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4594:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:1327:4374":{"id":"b:1:2618-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6082:3064":{"id":"0:6082:3064","crate_id":0,"name":"try_new_uninit","span":{"filename":"library/alloc/src/sync.rs","begin":[641,4],"end":[649,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, returning an error\nif allocation fails.\n\n# Examples\n\n```\n#![feature(new_uninit, allocator_api)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut five = Arc::<u32>::try_new_uninit()?;\n\n// Deferred initialization:\nArc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:830:3912":{"id":"b:1:2615-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5009":{"id":"0:5009","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1154,0],"end":[1196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5012:359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3573:3429":{"id":"0:3573:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1774,4],"end":[1781,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5730:974":{"id":"0:5730:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/string.rs","begin":[1758,4],"end":[1760,5]},"visibility":"public","docs":"Returns the length of this `String`, in bytes, not [`char`]s or\ngraphemes. In other words, it might not be what a human considers the\nlength of the string.\n\n# Examples\n\n```\nlet a = String::from(\"foo\");\nassert_eq!(a.len(), 3);\n\nlet fancy_f = String::from(\"ƒoo\");\nassert_eq!(fancy_f.len(), 4);\nassert_eq!(fancy_f.chars().count(), 3);\n```","links":{"`char`":"1:52078:458"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7117:11090":{"id":"0:7117:11090","crate_id":0,"name":"dedup_by","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1814,4],"end":[1940,5]},"visibility":"public","docs":"Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.\n\nThe `same_bucket` function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.\n\nIf the vector is sorted, this removes all duplicates.\n\n# Examples\n\n```\nlet mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\nassert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n```","links":{},"attrs":["#[stable(feature = \"dedup_by\", since = \"1.16.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4059-0:4074:4150":{"id":"0:4059-0:4074:4150","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[35,0],"end":[35,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::drain::Drain","name":"Drain","id":"0:4074:4150","glob":false}}},"a:1:41612:4469-0:7730:10536":{"id":"a:1:41612:4469-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:1480:4509":{"id":"b:1:2892-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:315:3035":{"id":"0:315:3035","crate_id":0,"name":"new_uninit_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[442,4],"end":[453,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents in the provided allocator.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut five = Box::<u32, _>::new_uninit_in(System);\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1539,0],"end":[1553,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:443:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:796:296":{"id":"0:796:296","crate_id":0,"name":"add_assign","span":{"filename":"library/alloc/src/borrow.rs","begin":[465,4],"end":[476,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4756":{"id":"0:4756","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[711,0],"end":[718,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4757:248","0:4758:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1413:4610":{"id":"0:1413:4610","crate_id":0,"name":"remove_entry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[427,4],"end":[429,5]},"visibility":"public","docs":"Take ownership of the key and value from the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    // We delete the entry from the map.\n    o.remove_entry();\n}\n\n// If now try to get the value, it will panic:\n// println!(\"{}\", map[\"poneyland\"]);\n```","links":{},"attrs":["#[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3451:401":{"id":"0:3451:401","crate_id":0,"name":"bitxor","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1394,4],"end":[1399,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([2, 3, 4]);\n\nlet result = &a ^ &b;\nassert_eq!(result, BTreeSet::from([1, 4]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4637":{"id":"0:4637","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2841,0],"end":[2855,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4641:3569","0:4643:2350","0:4644:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5344-1:43264:8687":{"id":"0:5344-1:43264:8687","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[39,0],"end":[39,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"array_chunks\", issue = \"74985\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ArrayChunksMut","name":"ArrayChunksMut","id":"1:43264:8687","glob":false}}},"0:5027:8206":{"id":"0:5027:8206","crate_id":0,"name":"increment_strong_count_in","span":{"filename":"library/alloc/src/rc.rs","begin":[1550,4],"end":[1558,5]},"visibility":"public","docs":"Increments the strong reference count on the `Rc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Rc::into_raw`, the\nassociated `Rc` instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method, and `ptr` must point to a block of memory\nallocated by `alloc`\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet five = Rc::new_in(5, System);\n\nunsafe {\n    let ptr = Rc::into_raw(five);\n    Rc::increment_strong_count_in(ptr, System);\n\n    let five = Rc::from_raw_in(ptr, System);\n    assert_eq!(2, Rc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:6090:2669":{"id":"0:6090:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/sync.rs","begin":[711,4],"end":[724,5]},"visibility":"public","docs":"Constructs a new `Arc<T>` in the provided allocator.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet five = Arc::new_in(5, System);\n```","links":{},"attrs":["#[inline]","#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:699:3494":{"id":"0:699:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/boxed.rs","begin":[2469,4],"end":[2471,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated, deprecated_in_future)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4781:810":{"id":"0:4781:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[834,4],"end":[836,5]},"visibility":"default","docs":"Converts a [`CString`] into a <code>[Box]<[CStr]></code> without copying or allocating.","links":{"Box":"0:295:2399","CStr":"1:40050:106","`CString`":"0:7553:7100"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3328:5848":{"id":"0:3328:5848","crate_id":0,"name":"intersection","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[515,4],"end":[545,5]},"visibility":"public","docs":"Visits the elements representing the intersection,\ni.e., the elements that are both in `self` and `other`,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet intersection: Vec<_> = a.intersection(&b).cloned().collect();\nassert_eq!(intersection, [2]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:779":{"id":"0:779","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[421,0],"end":[429,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:781:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5346-1:42970:8691":{"id":"0:5346-1:42970:8691","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[43,0],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::EscapeAscii","name":"EscapeAscii","id":"1:42970:8691","glob":false}}},"b:1:3727-0:7730:10536":{"id":"b:1:3727-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4974:1263":{"id":"0:4974:1263","crate_id":0,"name":"pin","span":{"filename":"library/alloc/src/rc.rs","begin":[658,4],"end":[660,5]},"visibility":"public","docs":"Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n`value` will be pinned in memory and unable to be moved.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"pin\", since = \"1.33.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5473":{"id":"0:5473","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[745,0],"end":[765,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"slice":{"generic":"V"}},"items":["0:5476:198","0:5477:8844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7245:172":{"id":"0:7245:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2976,4],"end":[2976,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"0:1858:3429":{"id":"0:1858:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1926,4],"end":[1928,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3279:5798":{"id":"b:1:2888-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1416:5064":{"id":"0:1416:5064","crate_id":0,"name":"into_mut","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Converts the entry into a mutable reference to its value.\n\nIf you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n\n[`get_mut`]: OccupiedEntry::get_mut\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    *o.into_mut() += 10;\n}\nassert_eq!(map[\"poneyland\"], 22);\n```","links":{"OccupiedEntry::get_mut":"0:1415:4637"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:3064":{"id":"0:308:3064","crate_id":0,"name":"try_new_uninit","span":{"filename":"library/alloc/src/boxed.rs","begin":[330,4],"end":[332,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents on the heap,\nreturning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet mut five = Box::<u32>::try_new_uninit()?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1480:4509":{"id":"b:1:2898-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5933:651":{"id":"0:5933:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/string.rs","begin":[2958,4],"end":[2967,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7065:2729":{"id":"0:7065:2729","crate_id":0,"name":"from_raw_parts_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[819,4],"end":[821,5]},"visibility":"public","docs":"Creates a `Vec<T, A>` directly from a pointer, a length, a capacity,\nand an allocator.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `ptr` must be [*currently allocated*] via the given allocator `alloc`.\n* `T` needs to have the same alignment as what `ptr` was allocated with.\n  (`T` having a less strict alignment is not sufficient, the alignment really\n  needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n  allocated and deallocated with the same layout.)\n* The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n  to be the same size as the pointer was allocated with. (Because similar to\n  alignment, [`dealloc`] must be called with the same layout `size`.)\n* `length` needs to be less than or equal to `capacity`.\n* The first `length` values must be properly initialized values of type `T`.\n* `capacity` needs to [*fit*] the layout size that the pointer was allocated with.\n* The allocated size in bytes must be no larger than `isize::MAX`.\n  See the safety documentation of [`pointer::offset`].\n\nThese requirements are always upheld by any `ptr` that has been allocated\nvia `Vec<T, A>`. Other allocation sources are allowed if the invariants are\nupheld.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures. For example it is **not** safe\nto build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.\nIt's also not safe to build one from a `Vec<u16>` and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for `u16`), but after\nturning it into a `Vec<u8>` it'll be deallocated with alignment 1.\n\nThe ownership of `ptr` is effectively transferred to the\n`Vec<T>` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n[`String`]: crate::string::String\n[`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n[*currently allocated*]: crate::alloc::Allocator#currently-allocated-memory\n[*fit*]: crate::alloc::Allocator#memory-fitting\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nuse std::ptr;\nuse std::mem;\n\nlet mut v = Vec::with_capacity_in(3, System);\nv.push(1);\nv.push(2);\nv.push(3);\n\n// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\nlet mut v = mem::ManuallyDrop::new(v);\n\n// Pull out the various important pieces of information about `v`\nlet p = v.as_mut_ptr();\nlet len = v.len();\nlet cap = v.capacity();\nlet alloc = v.allocator();\n\nunsafe {\n    // Overwrite memory with 4, 5, 6\n    for i in 0..len {\n        ptr::write(p.add(i), 4 + i);\n    }\n\n    // Put everything back together into a Vec\n    let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    assert_eq!(rebuilt, [4, 5, 6]);\n}\n```\n\nUsing memory that was allocated elsewhere:\n\n```rust\n#![feature(allocator_api)]\n\nuse std::alloc::{AllocError, Allocator, Global, Layout};\n\nfn main() {\n    let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n\n    let vec = unsafe {\n        let mem = match Global.allocate(layout) {\n            Ok(mem) => mem.cast::<u32>().as_ptr(),\n            Err(AllocError) => return,\n        };\n\n        mem.write(1_000_000);\n\n        Vec::from_raw_parts_in(mem, 1, 16, Global)\n    };\n\n    assert_eq!(vec, &[1_000_000]);\n    assert_eq!(vec.capacity(), 16);\n}\n```","links":{"`pointer::offset`":"1:2326:1205","crate::alloc::GlobalAlloc::dealloc":"1:13703:585","crate::alloc::Allocator#memory-fitting":"1:13756:2618","crate::alloc::Allocator#currently-allocated-memory":"1:13756:2618"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:1465:4057":{"id":"b:0:727-0:1465:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:3648:4057":{"id":"a:1:3146:11953-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4555:6875":{"id":"0:4555:6875","crate_id":0,"name":"binary_search","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2474,4],"end":[2479,5]},"visibility":"public","docs":"Binary searches this `VecDeque` for a given element.\nIf the `VecDeque` is not sorted, the returned result is unspecified and\nmeaningless.\n\nIf the value is found then [`Result::Ok`] is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n[`Result::Err`] is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.\n\nSee also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n\n[`binary_search_by`]: VecDeque::binary_search_by\n[`binary_search_by_key`]: VecDeque::binary_search_by_key\n[`partition_point`]: VecDeque::partition_point\n\n# Examples\n\nLooks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n\nassert_eq!(deque.binary_search(&13),  Ok(9));\nassert_eq!(deque.binary_search(&4),   Err(7));\nassert_eq!(deque.binary_search(&100), Err(13));\nlet r = deque.binary_search(&1);\nassert!(matches!(r, Ok(1..=4)));\n```\n\nIf you want to insert an item to a sorted deque, while maintaining\nsort order, consider using [`partition_point`]:\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\nlet num = 42;\nlet idx = deque.partition_point(|&x| x < num);\n// The above is equivalent to `let idx = deque.binary_search(&num).unwrap_or_else(|x| x);`\ndeque.insert(idx, num);\nassert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```","links":{"VecDeque::binary_search_by_key":"0:4563:6908","`Result::Err`":"1:41636:135","VecDeque::partition_point":"0:4568:6925","`Result::Ok`":"1:41633:192","VecDeque::binary_search_by":"0:4557:6876"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7730:10536":{"id":"b:1:2898-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:295:2399":{"id":"a:1:3111:246-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3839:6239":{"id":"0:3839:6239","crate_id":0,"name":"move_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1518,4],"end":[1532,5]},"visibility":"public","docs":"Moves the cursor to the next element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2040":{"id":"0:2040","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2296,0],"end":[2301,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2044:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1986:3431":{"id":"0:1986:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2194,4],"end":[2196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7609:7098":{"id":"a:1:41612:4469-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:450:810":{"id":"0:450:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1629,4],"end":[1632,5]},"visibility":"default","docs":"Converts a `Box<str>` into a `Box<[u8]>`\n\nThis conversion does not allocate on the heap and happens in place.\n\n# Examples\n```rust\n// create a Box<str> which will be used to create a Box<[u8]>\nlet boxed: Box<str> = Box::from(\"hello\");\nlet boxed_str: Box<[u8]> = Box::from(boxed);\n\n// create a &[u8] which will be used to create a Box<[u8]>\nlet slice: &[u8] = &[104, 101, 108, 108, 111];\nlet boxed_slice = Box::from(slice);\n\nassert_eq!(boxed_slice, boxed_str);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3421":{"id":"0:3421","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1315,0],"end":[1315,103]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2892-0:7730:10536":{"id":"b:1:2892-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2153:4981":{"id":"0:2153:4981","crate_id":0,"name":"prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3042,4],"end":[3059,5]},"visibility":"public","docs":"Advances the cursor to the previous gap, returning the key and value of\nthe element that it moved over.\n\nIf the cursor is already at the start of the map then `None` is returned\nand the cursor is not moved.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1342:4372":{"id":"a:1:31996:236-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1670:3437":{"id":"0:1670:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1535,4],"end":[1542,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5553-1:43696:8932":{"id":"0:5553-1:43696:8932","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[40,48],"end":[40,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::EscapeUnicode","name":"EscapeUnicode","id":"1:43696:8932","glob":false}}},"0:523:172":{"id":"0:523:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/boxed.rs","begin":[1950,4],"end":[1950,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1378,0],"end":[1383,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:394:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496:780":{"id":"0:496:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1904,4],"end":[1906,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4290":{"id":"0:4290","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[258,0],"end":[258,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6303":{"id":"0:6303","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3262,0],"end":[3266,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6306:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7064:2696":{"id":"0:7064:2696","crate_id":0,"name":"try_with_capacity_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[705,4],"end":[707,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T, A>` with at least the specified capacity\nwith the provided allocator.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\n# Errors\n\nReturns an error if the capacity exceeds `isize::MAX` _bytes_,\nor if the allocator reports allocation failure.","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5479":{"id":"0:5479","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[772,0],"end":[776,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::vec::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5482:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:7655:9289":{"id":"b:1:2888-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1480:4509":{"id":"a:1:3111:246-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7414:462":{"id":"0:7414:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,9],"end":[3396,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440:810":{"id":"0:440:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1532,4],"end":[1534,5]},"visibility":"default","docs":"Converts a `&[T]` into a `Box<[T]>`\n\nThis conversion allocates on the heap\nand performs a copy of `slice` and its contents.\n\n# Examples\n```rust\n// create a &[u8] which will be used to create a Box<[u8]>\nlet slice: &[u8] = &[104, 101, 108, 108, 111];\nlet boxed_slice: Box<[u8]> = Box::from(slice);\n\nprintln!(\"{boxed_slice:?}\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5446:8844":{"id":"0:5446:8844","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.\n\n# Examples\n\n```\nassert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);\nassert_eq!([[1, 2], [3, 4]].join(&[0, 0][..]), [1, 2, 0, 0, 3, 4]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sep",{"generic":"Separator"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Separator"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:719":{"id":"0:719","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[21,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:722:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:957:1167":{"id":"0:957:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1451,4],"end":[1453,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3700:3978":{"id":"0:3700:3978","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[482,4],"end":[499,5]},"visibility":"public","docs":"Moves all elements from `other` to the end of the list.\n\nThis reuses all the nodes from `other` and moves them into `self`. After\nthis operation, `other` becomes empty.\n\nThis operation should compute in *O*(1) time and *O*(1) memory.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list1 = LinkedList::new();\nlist1.push_back('a');\n\nlet mut list2 = LinkedList::new();\nlist2.push_back('b');\nlist2.push_back('c');\n\nlist1.append(&mut list2);\n\nlet mut iter = list1.iter();\nassert_eq!(iter.next(), Some(&'a'));\nassert_eq!(iter.next(), Some(&'b'));\nassert_eq!(iter.next(), Some(&'c'));\nassert!(iter.next().is_none());\n\nassert!(list2.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4528:4780":{"id":"0:4528:4780","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1520,4],"end":[1522,5]},"visibility":"public","docs":"Provides a reference to the front element, or `None` if the deque is\nempty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.front(), Some(&1));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"first\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7231:172":{"id":"0:7231:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2927,4],"end":[2927,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:4665:3696":{"id":"0:4665:3696","crate_id":0,"name":"btree_set","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[24,0],"end":[24,17]},"visibility":"public","docs":"An ordered set based on a B-Tree.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:4666-0:3173:3698"],"is_stripped":false}}},"0:4257:7012":{"id":"0:4257:7012","crate_id":0,"name":"next_chunk","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[132,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}},"len":"N"}}},{"type":{"resolved_path":{"name":"array::IntoIter","id":"1:3965:4175","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5877:335":{"id":"0:5877:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2680,4],"end":[2682,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5715:4049":{"id":"0:5715:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/string.rs","begin":[1580,4],"end":[1631,5]},"visibility":"public","docs":"Retains only the characters specified by the predicate.\n\nIn other words, remove all characters `c` such that `f(c)` returns `false`.\nThis method operates in place, visiting each character exactly once in the\noriginal order, and preserves the order of the retained characters.\n\n# Examples\n\n```\nlet mut s = String::from(\"f_o_ob_ar\");\n\ns.retain(|c| c != '_');\n\nassert_eq!(s, \"foobar\");\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\nlet mut s = String::from(\"abcde\");\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\ns.retain(|_| *iter.next().unwrap());\nassert_eq!(s, \"bce\");\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"string_retain\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"primitive":"char"}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4931":{"id":"0:4931","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[327,0],"end":[327,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}}},"0:4608:813":{"id":"0:4608:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2786,4],"end":[2788,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6335:810":{"id":"0:6335:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3395,4],"end":[3397,5]},"visibility":"default","docs":"Allocate a reference-counted `str` and copy `v` into it.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet unique: String = \"eggplant\".to_owned();\nlet shared: Arc<str> = Arc::from(unique);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4185:7005":{"id":"0:4185:7005","crate_id":0,"name":"try_rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[140,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3554:253","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7538:2621":{"id":"b:1:2892-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7241":{"id":"0:7241","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2975,0],"end":[2982,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:7245:172","0:7246:4175","0:7247:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3758:3429":{"id":"0:3758:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1209,4],"end":[1211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5708:4222":{"id":"0:5708:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/string.rs","begin":[1463,4],"end":[1476,5]},"visibility":"public","docs":"Removes a [`char`] from this `String` at a byte position and returns it.\n\nThis is an *O*(*n*) operation, as it requires copying every element in the\nbuffer.\n\n# Panics\n\nPanics if `idx` is larger than or equal to the `String`'s length,\nor if it does not lie on a [`char`] boundary.\n\n# Examples\n\n```\nlet mut s = String::from(\"abç\");\n\nassert_eq!(s.remove(0), 'a');\nassert_eq!(s.remove(1), 'ç');\nassert_eq!(s.remove(0), 'b');\n```","links":{"`char`":"1:52078:458"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"delete\", \"take\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["idx",{"primitive":"usize"}]],"output":{"primitive":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5427:4845":{"id":"0:5427:4845","crate_id":0,"name":"sort_by","span":{"filename":"library/alloc/src/slice.rs","begin":[263,4],"end":[268,5]},"visibility":"public","docs":"Sorts the slice with a comparator function.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.\n\nThe comparator function must define a total ordering for the elements in the slice. If\nthe ordering is not total, the order of the elements is unspecified. An order is a\ntotal order if it is (for all `a`, `b` and `c`):\n\n* total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and\n* transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n\nFor example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use\n`partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.\n\n```\nlet mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\nfloats.sort_by(|a, b| a.partial_cmp(b).unwrap());\nassert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n```\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn't allocate auxiliary memory.\nSee [`sort_unstable_by`](slice::sort_unstable_by).\n\n# Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by\n[timsort](https://en.wikipedia.org/wiki/Timsort).\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a\nnon-allocating insertion sort is used instead.\n\n# Examples\n\n```\nlet mut v = [5, 4, 1, 3, 2];\nv.sort_by(|a, b| a.cmp(b));\nassert!(v == [1, 2, 3, 4, 5]);\n\n// reverse sorting\nv.sort_by(|a, b| b.cmp(a));\nassert!(v == [5, 4, 3, 2, 1]);\n```","links":{"`f64`":"1:52089:733","slice::sort_unstable_by":"1:12218:13834","`Ord`":"1:2701:194"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["compare",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:468:1755":{"id":"0:468:1755","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1682,4],"end":[1688,5]},"visibility":"default","docs":"Attempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n\nThe conversion occurs in-place and does not require a\nnew memory allocation.\n\n# Errors\n\nReturns the old `Box<[T]>` in the `Err` variant if\n`boxed_slice.len()` does not equal `N`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed_slice",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2872:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:696:810":{"id":"0:696:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2461,4],"end":[2463,5]},"visibility":"default","docs":"Converts a [`Cow`] into a box of dyn [`Error`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\nuse std::borrow::Cow;\n\nlet a_cow_str_error = Cow::from(\"a str error\");\nlet a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Cow`":"0:732:118","`Error`":"1:2951:136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3222":{"id":"0:3222","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[97,0],"end":[97,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3929":{"id":"0:3929","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2047,0],"end":[2054,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3933:172","0:3934:4175","0:3935:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4813":{"id":"0:4813","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1005,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4814:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:943:4057":{"id":"b:1:2618-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:7553:7100":{"id":"a:1:41612:4469-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5139:1016":{"id":"0:5139:1016","crate_id":0,"name":"lt","span":{"filename":"library/alloc/src/rc.rs","begin":[2357,4],"end":[2359,5]},"visibility":"default","docs":"Less-than comparison for two `Rc`s.\n\nThe two are compared by calling `<` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five < Rc::new(6));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:617:335":{"id":"0:617:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/boxed.rs","begin":[2112,4],"end":[2114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3485":{"id":"0:3485","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1509,0],"end":[1509,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1440,0],"end":[1444,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:952:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4980:3035":{"id":"0:4980:3035","crate_id":0,"name":"new_uninit_in","span":{"filename":"library/alloc/src/rc.rs","begin":[724,4],"end":[735,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents in the provided allocator.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet mut five = Rc::<u32, _>::new_uninit_in(System);\n\nlet five = unsafe {\n    // Deferred initialization:\n    Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4838-1:10050:7833":{"id":"0:4838-1:10050:7833","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[580,0],"end":[580,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"debug_closure_helpers\", issue = \"117729\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::FormatterFn","name":"FormatterFn","id":"1:10050:7833","glob":false}}},"a:1:3146:11953-0:3209:100":{"id":"a:1:3146:11953-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6:793":{"id":"0:6:793","crate_id":0,"name":"format","span":{"filename":"library/alloc/src/macros.rs","begin":[123,0],"end":[128,1]},"visibility":"public","docs":"Creates a `String` using interpolation of runtime expressions.\n\nThe first argument `format!` receives is a format string. This must be a string\nliteral. The power of the formatting string is in the `{}`s contained.\nAdditional parameters passed to `format!` replace the `{}`s within the\nformatting string in the order given unless named or positional parameters\nare used.\n\nSee [the formatting syntax documentation in `std::fmt`](../std/fmt/index.html)\nfor details.\n\nA common use for `format!` is concatenation and interpolation of strings.\nThe same convention is used with [`print!`] and [`write!`] macros,\ndepending on the intended destination of the string; all these macros internally use [`format_args!`].\n\nTo convert a single value to a string, use the [`to_string`] method. This\nwill use the [`Display`] formatting trait.\n\nTo concatenate literals into a `&'static str`, use the [`concat!`] macro.\n\n[`print!`]: ../std/macro.print.html\n[`write!`]: core::write\n[`format_args!`]: core::format_args\n[`to_string`]: crate::string::ToString\n[`Display`]: core::fmt::Display\n[`concat!`]: core::concat\n\n# Panics\n\n`format!` panics if a formatting trait implementation returns an error.\nThis indicates an incorrect implementation\nsince `fmt::Write for String` never returns an error itself.\n\n# Examples\n\n```\nformat!(\"test\");                             // => \"test\"\nformat!(\"hello {}\", \"world!\");               // => \"hello world!\"\nformat!(\"x = {}, y = {val}\", 10, val = 30);  // => \"x = 10, y = 30\"\nlet (x, y) = (1, 2);\nformat!(\"{x} + {y} = 3\");                    // => \"1 + 2 = 3\"\n```","links":{"core::write":"1:15:2895","crate::string::ToString":"0:5852:250","core::format_args":"1:22:795","core::fmt::Display":"1:10252:128","core::concat":"1:29:487"},"attrs":["#[macro_export]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"format_macro\"]"],"deprecation":null,"inner":{"macro":"macro_rules! format {\n    ($($arg:tt)*) => { ... };\n}"}},"b:1:2892-0:1496:4175":{"id":"b:1:2892-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:853":{"id":"0:853","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[365,0],"end":[380,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:857:3924"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3853:6322":{"id":"0:3853:6322","crate_id":0,"name":"splice_before","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1641,4],"end":[1654,5]},"visibility":"public","docs":"Inserts the elements from the given `LinkedList` before the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new elements are\ninserted at the end of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["list",{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3475:3431":{"id":"0:3475:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1477,4],"end":[1479,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3872:4776":{"id":"b:1:2898-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7401:780":{"id":"0:7401:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1643,9],"end":[1643,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4677:961":{"id":"0:4677:961","crate_id":0,"name":"kind","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[74,4],"end":[76,5]},"visibility":"public","docs":"Details about the allocation that caused the error","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7695":{"id":"0:7695","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2350,0],"end":[2350,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}},"items":["0:7698:678","0:7699:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4606":{"id":"0:4606","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2785,0],"end":[2789,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4608:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4741:3225":{"id":"0:4741:3225","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[452,4],"end":[454,5]},"visibility":"public","docs":"Consumes the `CString` and transfers ownership of the string to a C caller.\n\nThe pointer which this function returns must be returned to Rust and reconstituted using\n[`CString::from_raw`] to be properly deallocated. Specifically, one\nshould *not* use the standard C `free()` function to deallocate\nthis string.\n\nFailure to call [`CString::from_raw`] will lead to a memory leak.\n\nThe C side must **not** modify the length of the string (by writing a\nnul byte somewhere inside the string or removing the final one) before\nit makes it back into Rust using [`CString::from_raw`]. See the safety section\nin [`CString::from_raw`].\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n\nlet ptr = c_string.into_raw();\n\nunsafe {\n    assert_eq!(b'f', *ptr as u8);\n    assert_eq!(b'o', *ptr.add(1) as u8);\n    assert_eq!(b'o', *ptr.add(2) as u8);\n    assert_eq!(b'\\0', *ptr.add(3) as u8);\n\n    // retake pointer to free memory\n    let _ = CString::from_raw(ptr);\n}\n```","links":{"`CString::from_raw`":"0:4738:3190"},"attrs":["#[inline]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstr_memory\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"c_char","id":"1:40103:7105","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7472:4175":{"id":"b:1:2618-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1946:3429":{"id":"0:1946:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2126,4],"end":[2128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4819":{"id":"0:4819","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1028,0],"end":[1034,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_asref\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4820:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7632:242":{"id":"b:1:2903-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:7380:4065":{"id":"a:1:41611:4468-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:3209:100":{"id":"b:1:2898-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:727-0:7048:263":{"id":"b:0:727-0:7048:263","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443:810":{"id":"0:443:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1547,4],"end":[1552,5]},"visibility":"default","docs":"Converts a `Cow<'_, [T]>` into a `Box<[T]>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this\nconversion allocates on the heap and copies the\nunderlying slice. Otherwise, it will try to reuse the owned\n`Vec`'s allocation.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cow",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3364:954":{"id":"0:3364:954","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1136,4],"end":[1138,5]},"visibility":"public","docs":"Gets an iterator that visits the elements in the `BTreeSet` in ascending\norder.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([3, 1, 2]);\nlet mut set_iter = set.iter();\nassert_eq!(set_iter.next(), Some(&1));\nassert_eq!(set_iter.next(), Some(&2));\nassert_eq!(set_iter.next(), Some(&3));\nassert_eq!(set_iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:637:227":{"id":"0:637:227","crate_id":0,"name":"Return","span":{"filename":"library/alloc/src/boxed.rs","begin":[2165,4],"end":[2165,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"G"},"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}}},"0:5934":{"id":"0:5934","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2970,0],"end":[2987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:5936:336"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7480:4175":{"id":"b:1:3727-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:4423:264":{"id":"b:1:3727-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4522:4727":{"id":"0:4522:4727","crate_id":0,"name":"range_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1363,4],"end":[1375,5]},"visibility":"public","docs":"Creates an iterator that covers the specified mutable range in the deque.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [1, 2, 3].into();\nfor v in deque.range_mut(2..) {\n  *v *= 2;\n}\nassert_eq!(deque, [1, 2, 6]);\n\n// A full range covers all contents\nfor v in deque.range_mut(..) {\n  *v *= 2;\n}\nassert_eq!(deque, [2, 4, 12]);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"deque_range\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7575":{"id":"0:7575","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,16],"end":[136,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4736:7228":{"id":"0:4736:7228","crate_id":0,"name":"from_vec_unchecked","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[342,4],"end":[345,5]},"visibility":"public","docs":"Creates a C-compatible string by consuming a byte vector,\nwithout checking for interior 0 bytes.\n\nTrailing 0 byte will be appended by this function.\n\nThis method is equivalent to [`CString::new`] except that no runtime\nassertion is made that `v` contains no 0 bytes, and it requires an\nactual byte vector, not anything that can be converted to one with Into.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet raw = b\"foo\".to_vec();\nunsafe {\n    let c_string = CString::from_vec_unchecked(raw);\n}\n```","links":{"`CString::new`":"0:4722:1153"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1641:4787":{"id":"0:1641:4787","crate_id":0,"name":"into_keys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1445,4],"end":[1447,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys, in sorted order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(2, \"b\");\na.insert(1, \"a\");\n\nlet keys: Vec<i32> = a.into_keys().collect();\nassert_eq!(keys, [1, 2]);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7164:11314":{"id":"0:7164:11314","crate_id":0,"name":"into_flattened","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2626,4],"end":[2645,5]},"visibility":"public","docs":"Takes a `Vec<[T; N]>` and flattens it into a `Vec<T>`.\n\n# Panics\n\nPanics if the length of the resulting vector would overflow a `usize`.\n\nThis is only possible when flattening a vector of arrays of zero-sized\ntypes, and thus tends to be irrelevant in practice. If\n`size_of::<T>() > 0`, this will never panic.\n\n# Examples\n\n```\n#![feature(slice_flatten)]\n\nlet mut vec = vec![[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nassert_eq!(vec.pop(), Some([7, 8, 9]));\n\nlet mut flattened = vec.into_flattened();\nassert_eq!(flattened.pop(), Some(6));\n```","links":{},"attrs":["#[unstable(feature = \"slice_flatten\", issue = \"95629\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5387-1:11331:8724":{"id":"0:5387-1:11331:8724","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[69,43],"end":[69,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::SplitN","name":"SplitN","id":"1:11331:8724","glob":false}}},"0:7363:2619":{"id":"0:7363:2619","crate_id":0,"name":"Global","span":{"filename":"library/alloc/src/alloc.rs","begin":[55,0],"end":[55,18]},"visibility":"public","docs":"The global memory allocator.\n\nThis type implements the [`Allocator`] trait by forwarding calls\nto the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nNote: while this type is unstable, the functionality it provides can be\naccessed through the [free functions in `alloc`](self#functions).","links":{"`Allocator`":"1:13756:2618","self#functions":"0:98:307"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[cfg(not(test))]","#[lang = \"global_alloc_ty\"]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:3146:11953-0:7363:2619","a:1:32053:3459-0:7363:2619","a:1:3111:246-0:7363:2619","a:1:31996:236-0:7363:2619","a:1:41612:4469-0:7363:2619","a:1:41611:4468-0:7363:2619","b:0:727-0:7363:2619","b:1:2888-0:7363:2619","b:1:2618-0:7363:2619","b:1:2615-0:7363:2619","b:1:3727-0:7363:2619","b:1:2892-0:7363:2619","b:1:2903-0:7363:2619","b:1:2898-0:7363:2619","0:7365","0:117","0:594","0:7366","0:7368","0:7370"]}}},"0:7607":{"id":"0:7607","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,31],"end":[161,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7608:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:1518:4524":{"id":"b:0:727-0:1518:4524","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:987":{"id":"0:987","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1538,0],"end":[1542,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:990:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5266:651":{"id":"0:5266:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/rc.rs","begin":[3260,4],"end":[3271,5]},"visibility":"default","docs":"Drops the `Weak` pointer.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo = Rc::new(Foo);\nlet weak_foo = Rc::downgrade(&foo);\nlet other_weak_foo = Weak::clone(&weak_foo);\n\ndrop(weak_foo);   // Doesn't print anything\ndrop(foo);        // Prints \"dropped!\"\n\nassert!(other_weak_foo.upgrade().is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13131:29476":{"id":"1:13131:29476","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:5217:8069":{"id":"b:0:727-0:5217:8069","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4790:810":{"id":"0:4790:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[861,4],"end":[863,5]},"visibility":"default","docs":"Converts a `&`[`CString`] into a borrowed [`Cow`] without copying or allocating.","links":{"`Cow`":"0:732:118","`CString`":"0:7553:7100"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2113:780":{"id":"0:2113:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2831,4],"end":[2833,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1702":{"id":"0:1702","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1618,0],"end":[1622,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1705:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7597:7097":{"id":"a:1:31996:236-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5028:8214":{"id":"0:5028:8214","crate_id":0,"name":"decrement_strong_count_in","span":{"filename":"library/alloc/src/rc.rs","begin":[1593,4],"end":[1595,5]},"visibility":"public","docs":"Decrements the strong reference count on the `Rc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Rc::into_raw`, the\nassociated `Rc` instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method, and `ptr` must point to a block of memory\nallocated by `alloc`. This method can be used to release the final `Rc` and backing storage,\nbut **should not** be called after the final `Rc` has been released.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet five = Rc::new_in(5, System);\n\nunsafe {\n    let ptr = Rc::into_raw(five);\n    Rc::increment_strong_count_in(ptr, System);\n\n    let five = Rc::from_raw_in(ptr, System);\n    assert_eq!(2, Rc::strong_count(&five));\n    Rc::decrement_strong_count_in(ptr, System);\n    assert_eq!(1, Rc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5263":{"id":"0:5263","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3235,0],"end":[3272,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5266:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6571:311":{"id":"0:6571:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[65,4],"end":[67,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7372:4175":{"id":"a:1:41611:4468-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1285,0],"end":[1331,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:374:462","0:375:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1925":{"id":"0:1925","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2092,0],"end":[2096,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1929:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1799:60":{"id":"0:1799:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1812,4],"end":[1814,5]},"visibility":"default","docs":"Creates an empty `btree_map::Keys`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::Keys<'_, u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:2103:4931":{"id":"b:1:2903-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7548:678":{"id":"0:7548:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,16],"end":[80,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4795":{"id":"0:4795","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[891,0],"end":[899,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::rc::Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4796:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:7527:2620":{"id":"b:1:2898-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:5217:8069":{"id":"b:1:2892-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:7392:4150":{"id":"b:1:2903-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3237:464":{"id":"0:3237:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[119,4],"end":[121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4024":{"id":"0:4024","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2218,0],"end":[2218,73]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5156":{"id":"0:5156","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2453,0],"end":[2457,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5159:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4515:6420":{"id":"0:4515:6420","crate_id":0,"name":"as_mut_slices","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1216,4],"end":[1221,5]},"visibility":"public","docs":"Returns a pair of slices which contain, in order, the contents of the\ndeque.\n\nIf [`make_contiguous`] was previously called, all elements of the\ndeque will be in the first slice and the second slice will be empty.\n\n[`make_contiguous`]: VecDeque::make_contiguous\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\n\ndeque.push_front(10);\ndeque.push_front(9);\n\ndeque.as_mut_slices().0[0] = 42;\ndeque.as_mut_slices().1[0] = 24;\nassert_eq!(deque.as_slices(), (&[42, 10][..], &[24, 1][..]));\n```","links":{"VecDeque::make_contiguous":"0:4550:6815"},"attrs":["#[inline]","#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1788:974":{"id":"0:1788:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1788,4],"end":[1790,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350:3225":{"id":"0:350:3225","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/boxed.rs","begin":[1060,4],"end":[1062,5]},"visibility":"public","docs":"Consumes the `Box`, returning a wrapped raw pointer.\n\nThe pointer will be properly aligned and non-null.\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Box`. In particular, the\ncaller should properly destroy `T` and release the memory, taking\ninto account the [memory layout] used by `Box`. The easiest way to\ndo this is to convert the raw pointer back into a `Box` with the\n[`Box::from_raw`] function, allowing the `Box` destructor to perform\nthe cleanup.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\nis so that there is no conflict with a method on the inner type.\n\n# Examples\nConverting the raw pointer back into a `Box` with [`Box::from_raw`]\nfor automatic cleanup:\n```\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };\n```\nManual cleanup by explicitly running the destructor and deallocating\nthe memory:\n```\nuse std::alloc::{dealloc, Layout};\nuse std::ptr;\n\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nunsafe {\n    ptr::drop_in_place(ptr);\n    dealloc(ptr as *mut u8, Layout::new::<String>());\n}\n```\nNote: This is equivalent to the following:\n```\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nunsafe {\n    drop(Box::from_raw(ptr));\n}\n```\n\n[memory layout]: self#memory-layout","links":{"`Box::from_raw`":"0:345:3190","self#memory-layout":"0:142:2398"},"attrs":["#[stable(feature = \"box_raw\", since = \"1.4.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"generic":"Self"}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7568:462":{"id":"0:7568:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,47],"end":[111,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6016":{"id":"0:6016","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[260,0],"end":[260,79]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:7402:4039":{"id":"b:1:2615-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:7480:4175":{"id":"b:1:2615-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1583":{"id":"0:1583","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[603,0],"end":[608,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1586:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:4423:264":{"id":"b:1:2903-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5532-1:12812:2367":{"id":"0:5532-1:12812:2367","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[24,0],"end":[24,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::pattern","name":"pattern","id":"1:12812:2367","glob":false}}},"0:5767":{"id":"0:5767","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2137,0],"end":[2152,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_string\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5768:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5746:780":{"id":"0:5746:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2065,4],"end":[2067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:1527:4528":{"id":"b:1:2892-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:295:2399":{"id":"b:1:2898-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1362:3158":{"id":"0:1362:3158","crate_id":0,"name":"value","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[107,4],"end":[107,16]},"visibility":"public","docs":"The value which was not inserted, because the entry was already occupied.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"V"}}},"0:7384":{"id":"0:7384","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1595,9],"end":[1595,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7387:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5561-1:43529:8936":{"id":"0:5561-1:43529:8936","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[47,20],"end":[47,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::MatchIndices","name":"MatchIndices","id":"1:43529:8936","glob":false}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1468,0],"end":[1486,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"core::pin::Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:428:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7346":{"id":"0:7346","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3420,0],"end":[3444,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[cfg(not(test))]","#[stable(feature = \"box_from_vec\", since = \"1.20.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7349:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:609:2400":{"id":"0:609:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/boxed.rs","begin":[2098,4],"end":[2100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7380:4065":{"id":"0:7380:4065","crate_id":0,"name":"IntoIterSorted","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1596,0],"end":[1601,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1014","a:1:3146:11953-0:7380:4065","a:1:32053:3459-0:7380:4065","a:1:3111:246-0:7380:4065","a:1:31996:236-0:7380:4065","a:1:41612:4469-0:7380:4065","a:1:41611:4468-0:7380:4065","b:0:727-0:7380:4065","b:1:8171-0:7380:4065","b:1:2888-0:7380:4065","b:1:2618-0:7380:4065","b:1:2615-0:7380:4065","b:1:3727-0:7380:4065","b:1:2892-0:7380:4065","b:1:2903-0:7380:4065","b:1:2898-0:7380:4065","0:1027","0:1024","0:1018","0:1030","0:7384","0:7388"]}}},"0:3934:4175":{"id":"0:3934:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2049,4],"end":[2049,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:1:2615-0:2103:4931":{"id":"b:1:2615-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13198:28442":{"id":"1:13198:28442","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:880":{"id":"0:880","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[424,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:882:1153","0:883:2679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5277:60":{"id":"0:5277:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/rc.rs","begin":[3318,4],"end":[3320,5]},"visibility":"default","docs":"Constructs a new `Weak<T>`, without allocating any memory.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::rc::Weak;\n\nlet empty: Weak<i64> = Default::default();\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","Weak::upgrade":"0:5258:8595"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:3648:4057":{"id":"b:0:727-0:3648:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6287:1252":{"id":"0:6287:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/sync.rs","begin":[3159,4],"end":[3161,5]},"visibility":"default","docs":"Partial comparison for two `Arc`s.\n\nThe two are compared by calling `partial_cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\nuse std::cmp::Ordering;\n\nlet five = Arc::new(5);\n\nassert_eq!(Some(Ordering::Less), five.partial_cmp(&Arc::new(6)));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1318:1923":{"id":"0:1318:1923","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[28,57],"end":[28,81]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:613:3455":{"id":"0:613:3455","crate_id":0,"name":"borrow_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[2105,4],"end":[2107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4531:6196":{"id":"0:4531:6196","crate_id":0,"name":"back_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1589,4],"end":[1591,5]},"visibility":"public","docs":"Provides a mutable reference to the back element, or `None` if the\ndeque is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.back_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.back(), Some(&9));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:3437":{"id":"0:545:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/boxed.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:697":{"id":"0:697","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2467,0],"end":[2485,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"box_error\", since = \"1.8.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:699:3494","0:700:430","0:701:3301","0:702:3516"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7341:810":{"id":"0:7341:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3393,4],"end":[3395,5]},"visibility":"default","docs":"Convert a clone-on-write slice into a vector.\n\nIf `s` already owns a `Vec<T>`, it will be returned directly.\nIf `s` is borrowing a slice, a new `Vec<T>` will be allocated and\nfilled by cloning `s`'s items into it.\n\n# Examples\n\n```\n# use std::borrow::Cow;\nlet o: Cow<'_, [i32]> = Cow::Owned(vec![1, 2, 3]);\nlet b: Cow<'_, [i32]> = Cow::Borrowed(&[1, 2, 3]);\nassert_eq!(Vec::from(o), Vec::from(b));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3532":{"id":"0:3532","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1616,0],"end":[1627,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3534:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4605:918":{"id":"0:4605:918","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2779,4],"end":[2781,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6581":{"id":"0:6581","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[149,0],"end":[149,69]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7948:678":{"id":"0:7948:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[29,0],"end":[29,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:1465:4057":{"id":"b:1:3727-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6195:248":{"id":"0:6195:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/sync.rs","begin":[2102,4],"end":[2102,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:949:780":{"id":"0:949:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1433,4],"end":[1435,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1651:4175":{"id":"0:1651:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1487,4],"end":[1487,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:2186":{"id":"0:2186","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3408,0],"end":[3408,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3548":{"id":"0:3548","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1694,0],"end":[1694,76]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7553:7100":{"id":"a:1:31996:236-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6616:3440":{"id":"0:6616:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[581,0],"end":[585,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1576:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5799":{"id":"0:5799","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2246,0],"end":[2255,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_string\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5800:3569","0:5803:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6717:172":{"id":"0:6717:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[199,4],"end":[199,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7320":{"id":"0:7320","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3325,0],"end":[3336,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_from_array_ref\", since = \"1.74.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"T"},"len":"N"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7324:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1764":{"id":"0:1764","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1746,0],"end":[1746,71]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:1527:4528":{"id":"a:1:41611:4468-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:7392:4150":{"id":"b:1:2892-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5891:810":{"id":"0:5891:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2772,4],"end":[2774,5]},"visibility":"default","docs":"Converts the given [`String`] to a boxed `str` slice that is owned.\n\n# Examples\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = Box::from(s1);\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```","links":{"`String`":"0:7632:242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:12963-0:295:2399":{"id":"b:1:12963-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"primitive":"char"}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_contained_in","strip_prefix_of","strip_suffix_of","is_prefix_of","is_suffix_of"],"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:43919:8912","1:43920:9605","1:43921:9744","1:43922:9745","1:43923:9746","1:43924:9747","1:43925:9748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:5903:810":{"id":"0:5903:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2862,4],"end":[2864,5]},"visibility":"default","docs":"Converts a [`String`] reference into a [`Borrowed`] variant.\nNo heap allocation is performed, and the string\nis not copied.\n\n# Example\n\n```\n# use std::borrow::Cow;\nlet s = \"eggplant\".to_string();\nassert_eq!(Cow::from(&s), Cow::Borrowed(\"eggplant\"));\n```\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed \"borrow::Cow::Borrowed\"","links":{"crate::borrow::Cow::Borrowed":"0:735:3354","`String`":"0:7632:242"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1027":{"id":"0:1027","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1631,0],"end":[1631,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2892-0:7527:2620":{"id":"b:1:2892-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4992":{"id":"0:4992","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[969,0],"end":[1034,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:4994:3113","0:4995:3118"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7357:136":{"id":"0:7357:136","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3463,4],"end":[3463,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:7223:918":{"id":"0:7223:918","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2867,4],"end":[2869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:39126:4364","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5194:810":{"id":"0:5194:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2654,4],"end":[2657,5]},"visibility":"default","docs":"Converts a reference-counted string slice into a byte slice.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet string: Rc<str> = Rc::from(\"eggplant\");\nlet bytes: Rc<[u8]> = Rc::from(string);\nassert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rc",{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6336":{"id":"0:6336","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3402,0],"end":[3417,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6339:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:714-1:2609:102":{"id":"0:714-1:2609:102","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[12,23],"end":[12,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::borrow::Borrow","name":"Borrow","id":"1:2609:102","glob":false}}},"0:5892":{"id":"0:5892","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2779,0],"end":[2799,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5894:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4329:6996":{"id":"0:4329:6996","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[59,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:1568:209":{"id":"b:1:3727-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:3648:4057":{"id":"b:1:2892-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:455:810":{"id":"0:455:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1648,4],"end":[1650,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `Box<[T]>`\n\nThis conversion moves the array to newly heap-allocated memory.\n\n# Examples\n\n```rust\nlet boxed: Box<[u8]> = Box::from([4, 2]);\nprintln!(\"{boxed:?}\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2136":{"id":"0:2136","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2940,0],"end":[3008,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2141:1167","0:2142:4981","0:2143:4987","0:2144:4991","0:2145:4997","0:2146:5000"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7493":{"id":"0:7493","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2731,0],"end":[2731,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7497:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3338:5886":{"id":"0:3338:5886","crate_id":0,"name":"is_subset","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[687,4],"end":[743,5]},"visibility":"public","docs":"Returns `true` if the set is a subset of another,\ni.e., `other` contains at least all the elements in `self`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet sup = BTreeSet::from([1, 2, 3]);\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:5217:8069":{"id":"a:1:3146:11953-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7265:4683":{"id":"0:7265:4683","crate_id":0,"name":"extract_if","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3160,4],"end":[3172,5]},"visibility":"public","docs":"Creates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the vector and will not be yielded\nby the iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse [`retain`] with a negated predicate if you do not need the returned iterator.\n\n[`retain`]: Vec::retain\n\nUsing this method is equivalent to the following code:\n\n```\n# let some_predicate = |x: &mut i32| { *x == 2 || *x == 3 || *x == 6 };\n# let mut vec = vec![1, 2, 3, 4, 5, 6];\nlet mut i = 0;\nwhile i < vec.len() {\n    if some_predicate(&mut vec[i]) {\n        let val = vec.remove(i);\n        // your code here\n    } else {\n        i += 1;\n    }\n}\n\n# assert_eq!(vec, vec![1, 4, 5]);\n```\n\nBut `extract_if` is easier to use. `extract_if` is also more efficient,\nbecause it can backshift the elements of the array in bulk.\n\nNote that `extract_if` also lets you mutate every element in the filter closure,\nregardless of whether you choose to keep or remove it.\n\n# Examples\n\nSplitting an array into evens and odds, reusing the original allocation:\n\n```\n#![feature(extract_if)]\nlet mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];\n\nlet evens = numbers.extract_if(|x| *x % 2 == 0).collect::<Vec<_>>();\nlet odds = numbers;\n\nassert_eq!(evens, vec![2, 4, 6, 8, 14]);\nassert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);\n```","links":{"Vec::retain":"0:7089:4049"},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filter",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7370":{"id":"0:7370","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[51,31],"end":[51,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7371:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:485:3411":{"id":"0:485:3411","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/boxed.rs","begin":[1833,4],"end":[1839,5]},"visibility":"public","docs":"Downcasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:477:3409"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:889:3958":{"id":"0:889:3958","crate_id":0,"name":"peek_mut","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[542,4],"end":[544,5]},"visibility":"public","docs":"Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.\n\nNote: If the `PeekMut` value is leaked, some heap elements might get\nleaked along with it, but the remaining elements will remain a valid\nheap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nassert!(heap.peek_mut().is_none());\n\nheap.push(1);\nheap.push(5);\nheap.push(2);\n{\n    let mut val = heap.peek_mut().unwrap();\n    *val = 0;\n}\nassert_eq!(heap.peek(), Some(&2));\n```\n\n# Time complexity\n\nIf the item is modified then the worst case time complexity is *O*(log(*n*)),\notherwise it's *O*(1).","links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4681:810":{"id":"0:4681:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[125,4],"end":[127,5]},"visibility":"default","docs":"Always evaluates to [`TryReserveErrorKind::CapacityOverflow`].","links":{"`TryReserveErrorKind::CapacityOverflow`":"0:7539:2715"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"LayoutError","id":"1:44394:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6487:311":{"id":"0:6487:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[49,4],"end":[51,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:4423:264":{"id":"b:1:2615-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:7645:9281":{"id":"b:1:2898-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1083":{"id":"0:1083","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1754,0],"end":[1754,73]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387:1016":{"id":"0:387:1016","crate_id":0,"name":"lt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1361,4],"end":[1363,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1796":{"id":"0:1796","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1804,0],"end":[1815,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1799:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:4074:4150":{"id":"b:1:2888-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4340":{"id":"0:4340","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[114,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4343:3437","0:4344:7003","0:4345:7004","0:4348:7005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7492:678":{"id":"0:7492:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2730,0],"end":[2730,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:3271:5793":{"id":"a:1:31996:236-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5098":{"id":"0:5098","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2136,0],"end":[2180,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5101:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:7621:8665":{"id":"a:1:41611:4468-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:7621:8665":{"id":"b:1:2892-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5951":{"id":"0:5951","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[3035,0],"end":[3048,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_char_for_string\", since = \"1.46.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5952:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1077":{"id":"0:1077","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1738,0],"end":[1751,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1080:172","0:1081:1167","0:1082:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:7730:10536":{"id":"b:1:8171-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:6350":{"id":"0:6350","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3496,0],"end":[3507,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6355:136","0:6356:1755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7316:810":{"id":"0:7316:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3294,4],"end":[3296,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n\n# Examples\n\n```\nassert_eq!(Vec::from(&[1, 2, 3][..]), vec![1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4489:2694":{"id":"0:4489:2694","crate_id":0,"name":"with_capacity_in","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[614,4],"end":[616,5]},"visibility":"public","docs":"Creates an empty deque with space for at least `capacity` elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::with_capacity(10);\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7326":{"id":"0:7326","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3340,0],"end":[3351,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_from_array_ref\", since = \"1.74.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"generic":"T"},"len":"N"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7330:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:1830:4776":{"id":"a:1:32053:3459-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:121:2793":{"id":"0:121:2793","crate_id":0,"name":"grow","span":{"filename":"library/alloc/src/alloc.rs","begin":[261,4],"end":[269,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ptr",{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}],["old_layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:552":{"id":"0:552","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2011,0],"end":[2011,76]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:1577:4553":{"id":"b:1:2888-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2168:5027":{"id":"0:2168:5027","crate_id":0,"name":"insert_before","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3231,4],"end":[3246,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the\nnewly inserted element.\n\nIf the inserted key is not greater than the key before the cursor\n(if any), or if it not less than the key after the cursor (if any),\nthen an [`UnorderedKeyError`] is returned since this would\ninvalidate the [`Ord`] invariant between the keys of the map.","links":{"`Ord`":"1:2701:194","`UnorderedKeyError`":"0:7412:5026"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6390:3301":{"id":"0:6390:3301","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/sync.rs","begin":[3646,4],"end":[3648,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7689:1135":{"id":"0:7689:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2348,0],"end":[2348,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1555:780":{"id":"0:1555:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[540,4],"end":[542,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7660":{"id":"0:7660","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2345,0],"end":[2345,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7663:678","0:7664:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5939:335":{"id":"0:5939:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2991,4],"end":[2993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2155:4991":{"id":"0:2155:4991","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3078,4],"end":[3083,5]},"visibility":"public","docs":"Returns a reference to the key and value of the previous element\nwithout moving the cursor.\n\nIf the cursor is at the start of the map then `None` is returned.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7228":{"id":"0:7228","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2926,0],"end":[2962,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7231:172","0:7232:4175","0:7233:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5434:8802":{"id":"0:5434:8802","crate_id":0,"name":"sort_by_cached_key","span":{"filename":"library/alloc/src/slice.rs","begin":[352,4],"end":[396,5]},"visibility":"public","docs":"Sorts the slice with a key extraction function.\n\nDuring sorting, the key function is called at most once per element, by using\ntemporary storage to remember the results of key evaluation.\nThe order of calls to the key function is unspecified and may change in future versions\nof the standard library.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* + *n* \\* log(*n*))\nworst-case, where the key function is *O*(*m*).\n\nFor simple key functions (e.g., functions that are property accesses or\nbasic operations), [`sort_by_key`](slice::sort_by_key) is likely to be\nfaster.\n\n# Current implementation\n\nThe current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,\nwhich combines the fast average case of randomized quicksort with the fast worst case of\nheapsort, while achieving linear time on slices with certain patterns. It uses some\nrandomization to avoid degenerate cases, but with a fixed seed to always provide\ndeterministic behavior.\n\nIn the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the\nlength of the slice.\n\n# Examples\n\n```\nlet mut v = [-5i32, 4, 32, -3, 2];\n\nv.sort_by_cached_key(|k| k.to_string());\nassert!(v == [-3, -5, 2, 32, 4]);\n```\n\n[pdqsort]: https://github.com/orlp/pdqsort","links":{"slice::sort_by_key":"0:5430:8780"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"slice_sort_by_cached_key\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1496:4175":{"id":"a:1:32053:3459-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6243:2710":{"id":"0:6243:2710","crate_id":0,"name":"from_raw_in","span":{"filename":"library/alloc/src/sync.rs","begin":[2777,4],"end":[2794,5]},"visibility":"public","docs":"Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>` in the provided\nallocator.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`]\nlater) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`],\nas these don't own anything; the method still works on them).\n\n# Safety\n\nThe pointer must have originated from the [`into_raw`] and must still own its potential\nweak reference, and must point to a block of memory allocated by `alloc`.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to [`into_raw`].\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\n\nlet raw_1 = Arc::downgrade(&strong).into_raw();\nlet raw_2 = Arc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Arc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Arc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[`new`]: Weak::new\n[`into_raw`]: Weak::into_raw\n[`upgrade`]: Weak::upgrade","links":{"Weak::new":"0:6226:1153","Weak::into_raw":"0:6242:3225","Weak::upgrade":"0:6247:8595"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7063:2694":{"id":"0:7063:2694","crate_id":0,"name":"with_capacity_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[687,4],"end":[689,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T, A>` with at least the specified capacity\nwith the provided allocator.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the\nminimum *capacity* specified, the vector will have a zero *length*. For\nan explanation of the difference between length and capacity, see\n*[Capacity and reallocation]*.\n\nIf it is important to know the exact allocated capacity of a `Vec`,\nalways use the [`capacity`] method after construction.\n\nFor `Vec<T, A>` where `T` is a zero-sized type, there will be no allocation\nand the capacity will always be `usize::MAX`.\n\n[Capacity and reallocation]: #capacity-and-reallocation\n[`capacity`]: Vec::capacity\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet mut vec = Vec::with_capacity_in(10, System);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert!(vec.capacity() >= 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert!(vec.capacity() >= 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<(), System>::with_capacity_in(10, System);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```","links":{"Vec::capacity":"0:7068:2680"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:3044":{"id":"0:305:3044","crate_id":0,"name":"new_zeroed","span":{"filename":"library/alloc/src/boxed.rs","begin":[269,4],"end":[271,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet zero = Box::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7412:5026":{"id":"a:1:3111:246-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[50,0],"end":[90,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:228:1153","0:229:3058"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6410:810":{"id":"0:6410:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/task.rs","begin":[125,4],"end":[127,5]},"visibility":"default","docs":"Use a `Wake`-able type as a `RawWaker`.\n\nNo heap allocations or atomic operations are used for this conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["waker",{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"RawWaker","id":"1:44348:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1128:2350":{"id":"0:1128:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1855,4],"end":[1857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1684:172":{"id":"0:1684:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1561,4],"end":[1561,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"0:3301":{"id":"0:3301","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[293,0],"end":[297,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3304:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4960":{"id":"0:4960","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[379,0],"end":[661,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4962:1153","0:4963:8067","0:4965:2330","0:4967:3044","0:4969:3058","0:4970:3064","0:4972:3069","0:4974:1263"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6208":{"id":"0:6208","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2258,0],"end":[2393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6211:4637","0:6212:8273"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6317:850":{"id":"0:6317:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/sync.rs","begin":[3295,4],"end":[3297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7132:11137":{"id":"0:7132:11137","crate_id":0,"name":"push_within_capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2016,4],"end":[2026,5]},"visibility":"public","docs":"Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.\n\nUnlike [`push`] this method will not reallocate when there's insufficient capacity.\nThe caller should use [`reserve`] or [`try_reserve`] to ensure that there is enough capacity.\n\n[`push`]: Vec::push\n[`reserve`]: Vec::reserve\n[`try_reserve`]: Vec::try_reserve\n\n# Examples\n\nA manual, panic-free alternative to [`FromIterator`]:\n\n```\n#![feature(vec_push_within_capacity)]\n\nuse std::collections::TryReserveError;\nfn from_iter_fallible<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n    let mut vec = Vec::new();\n    for value in iter {\n        if let Err(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(1)?;\n            // this cannot fail, the previous line either returned or added at least 1 free slot\n            let _ = vec.push_within_capacity(value);\n        }\n    }\n    Ok(vec)\n}\nassert_eq!(from_iter_fallible(0..100), Ok(Vec::from_iter(0..100)));\n```\n\n# Time complexity\n\nTakes *O*(1) time.","links":{"Vec::reserve":"0:7069:2750","`FromIterator`":"1:8163:144","Vec::push":"0:7131:3980","Vec::try_reserve":"0:7071:2760"},"attrs":["#[inline]","#[unstable(feature = \"vec_push_within_capacity\", issue = \"100486\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7730:10536":{"id":"b:1:2618-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:3648:4057":{"id":"b:1:3727-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:3661:4509":{"id":"b:1:3727-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1089":{"id":"0:1089","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1760,0],"end":[1760,73]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4934":{"id":"0:4934","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[335,0],"end":[335,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}}},"0:3474:3429":{"id":"0:3474:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1473,4],"end":[1475,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6694":{"id":"0:6694","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[70,0],"end":[183,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6697:2428","0:6698:5451","0:6699:311"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13150:9016":{"id":"1:13150:9016","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:52078:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43355:8924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5787:2350":{"id":"0:5787:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2213,4],"end":[2215,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["c",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"char"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1947:3431":{"id":"0:1947:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2130,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:826:101":{"id":"b:1:2888-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:1577:4553":{"id":"a:1:41612:4469-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5570-1:43501:8722":{"id":"0:5570-1:43501:8722","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[53,20],"end":[53,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::RSplitN","name":"RSplitN","id":"1:43501:8722","glob":false}}},"b:1:2618-0:7402:4039":{"id":"b:1:2618-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1261,0],"end":[1267,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:366:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1895":{"id":"0:1895","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2037,0],"end":[2041,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1899:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3213":{"id":"0:3213","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3216:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3916":{"id":"0:3916","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2025,0],"end":[2034,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3919:172","0:3920:4175","0:3921:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3775:172":{"id":"0:3775:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1259,4],"end":[1259,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"0:7650":{"id":"0:7650","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[402,16],"end":[402,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5037:8356":{"id":"0:5037:8356","crate_id":0,"name":"unwrap_or_clone","span":{"filename":"library/alloc/src/rc.rs","begin":[1840,4],"end":[1842,5]},"visibility":"public","docs":"If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\nclone.\n\nAssuming `rc_t` is of type `Rc<T>`, this function is functionally equivalent to\n`(*rc_t).clone()`, but will avoid cloning the inner value where possible.\n\n# Examples\n\n```\n# use std::{ptr, rc::Rc};\nlet inner = String::from(\"test\");\nlet ptr = inner.as_ptr();\n\nlet rc = Rc::new(inner);\nlet inner = Rc::unwrap_or_clone(rc);\n// The inner value was not cloned\nassert!(ptr::eq(ptr, inner.as_ptr()));\n\nlet rc = Rc::new(inner);\nlet rc2 = rc.clone();\nlet inner = Rc::unwrap_or_clone(rc);\n// Because there were 2 references, we had to clone the inner value.\nassert!(!ptr::eq(ptr, inner.as_ptr()));\n// `rc2` is the last reference, so when we unwrap it we get back\n// the original `String`.\nlet inner = Rc::unwrap_or_clone(rc2);\nassert!(ptr::eq(ptr, inner.as_ptr()));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"arc_unwrap_or_clone\", since = \"1.76.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7655:9289":{"id":"a:1:3146:11953-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5611:9013":{"id":"0:5611:9013","crate_id":0,"name":"to_lowercase","span":{"filename":"library/alloc/src/str.rs","begin":[368,4],"end":[419,5]},"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"0:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5885:810":{"id":"0:5885:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2720,4],"end":[2722,5]},"visibility":"default","docs":"Converts a `&mut str` into a [`String`].\n\nThe result is allocated on the heap.","links":{"`String`":"0:7632:242"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5915:813":{"id":"0:5915:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2886,4],"end":[2888,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["it",{"generic":"I"}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3229":{"id":"0:3229","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[107,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3232:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7649:780":{"id":"0:7649:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[402,9],"end":[402,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5816:9745":{"id":"0:5816:9745","crate_id":0,"name":"is_prefix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2295,4],"end":[2297,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:4925:216":{"id":"b:1:2903-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6630":{"id":"0:6630","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[19,0],"end":[29,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_array_ref\", since = \"1.77.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"array":{"type":{"generic":"T"},"len":"N"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6635:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7152":{"id":"0:7152","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2504,0],"end":[2601,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7155:6933","0:7156:8897","0:7157:9514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:5854-0:7645:9281":{"id":"b:0:5854-0:7645:9281","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:1480:4509":{"id":"b:1:3727-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:722:2400":{"id":"0:722:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/borrow.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1517:60":{"id":"0:1517:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[464,4],"end":[466,5]},"visibility":"default","docs":"Creates an empty `btree_map::IntoIter`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::IntoIter<u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3455:198":{"id":"0:3455:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1404,4],"end":[1404,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"b:1:2903-0:6681:4175":{"id":"b:1:2903-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13134:3917":{"id":"1:13134:3917","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41519:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5826:780":{"id":"0:5826:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2374,4],"end":[2376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5736:9701":{"id":"0:5736:9701","crate_id":0,"name":"replace_range","span":{"filename":"library/alloc/src/string.rs","begin":[1913,4],"end":[1941,5]},"visibility":"public","docs":"Removes the specified range in the string,\nand replaces it with the given string.\nThe given string doesn't need to be the same length as the range.\n\n# Panics\n\nPanics if the starting point or end point do not lie on a [`char`]\nboundary, or if they're out of bounds.\n\n# Examples\n\n```\nlet mut s = String::from(\"α is alpha, β is beta\");\nlet beta_offset = s.find('β').unwrap_or(s.len());\n\n// Replace the range up until the β from the string\ns.replace_range(..beta_offset, \"Α is capital alpha; \");\nassert_eq!(s, \"Α is capital alpha; β is beta\");\n```","links":{"`char`":"1:52078:458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"splice\", since = \"1.27.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}],["replace_with",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7480:4175":{"id":"b:1:2888-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:5217:8069":{"id":"a:1:41611:4468-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:1465:4057":{"id":"b:1:2892-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4103:651":{"id":"0:4103:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[95,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7602":{"id":"0:7602","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,16],"end":[161,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:5854-0:7655:9289":{"id":"b:0:5854-0:7655:9289","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7658":{"id":"0:7658","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[424,9],"end":[424,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7659:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1319:4651":{"id":"0:1319:4651","crate_id":0,"name":"Occupied","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[32,4],"end":[32,86]},"visibility":"default","docs":"An occupied entry.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1321:1923"]},"discriminant":null}}},"b:1:2615-0:295:2399":{"id":"b:1:2615-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2178:5012":{"id":"0:2178:5012","crate_id":0,"name":"insert_after_unchecked","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3322,4],"end":[3324,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the\nnewly inserted element.\n\n# Safety\n\nYou must ensure that the `BTreeMap` invariants are maintained.\nSpecifically:\n\n* The key of the newly inserted element must be unique in the tree.\n* All keys in the tree must remain in sorted order.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:4449:60":{"id":"0:4449:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[151,4],"end":[153,5]},"visibility":"default","docs":"Creates an empty deque.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3520:1167":{"id":"0:3520:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1582,4],"end":[1584,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3718:6188":{"id":"0:3718:6188","crate_id":0,"name":"front_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[774,4],"end":[776,5]},"visibility":"public","docs":"Provides a mutable reference to the front element, or `None` if the list\nis empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n\nmatch dl.front_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.front(), Some(&5));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:29487":{"id":"1:13217:29487","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:3209:100":{"id":"b:1:2892-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6100:3070":{"id":"0:6100:3070","crate_id":0,"name":"try_new_zeroed_in","span":{"filename":"library/alloc/src/sync.rs","begin":[919,4],"end":[930,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, in the provided allocator, returning an error if allocation\nfails.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit, allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet zero = Arc::<u32, _>::try_new_zeroed_in(System)?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5791:3569":{"id":"0:5791:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2226,4],"end":[2228,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3558:1167":{"id":"0:3558:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1706,4],"end":[1713,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7048:263":{"id":"b:1:2615-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:7569:7099":{"id":"b:1:3727-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5313:8678":{"id":"0:5313:8678","crate_id":0,"name":"into_rc","span":{"filename":"library/alloc/src/rc.rs","begin":[3555,4],"end":[3563,5]},"visibility":"public","docs":"Converts the `UniqueRc` into a regular [`Rc`]\n\nThis consumes the `UniqueRc` and returns a regular [`Rc`] that contains the `value` that\nis passed to `into_rc`.\n\nAny weak references created before this method is called can now be upgraded to strong\nreferences.","links":{"`Rc`":"0:4925:216"},"attrs":["#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:826:101":{"id":"a:1:32053:3459-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1327:4374":{"id":"0:1327:4374","crate_id":0,"name":"VacantEntry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[48,0],"end":[64,1]},"visibility":"public","docs":"A view into a vacant entry in a `BTreeMap`.\nIt is part of the [`Entry`] enum.","links":{"`Entry`":"0:1311:4371"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1398","a:1:3146:11953-0:1327:4374","a:1:32053:3459-0:1327:4374","a:1:3111:246-0:1327:4374","a:1:31996:236-0:1327:4374","a:1:41612:4469-0:1327:4374","a:1:41611:4468-0:1327:4374","b:1:2888-0:1327:4374","b:1:2618-0:1327:4374","b:1:2615-0:1327:4374","b:1:3727-0:1327:4374","b:1:2892-0:1327:4374","b:1:2903-0:1327:4374","b:1:2898-0:1327:4374","0:1337"]}}},"b:0:5854-0:295:2399":{"id":"b:0:5854-0:295:2399","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4488:2669":{"id":"0:4488:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[600,4],"end":[602,5]},"visibility":"public","docs":"Creates an empty deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::new();\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7444:209":{"id":"a:1:3146:11953-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3021:1033":{"id":"0:3021:1033","crate_id":0,"name":"marker","span":{"filename":"library/alloc/src/collections/btree/node.rs","begin":[1744,0],"end":[1744,14]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:3724:6200":{"id":"0:3724:6200","crate_id":0,"name":"push_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[847,4],"end":[854,5]},"visibility":"public","docs":"Adds an element first in the list.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.front().unwrap(), &2);\n\ndl.push_front(1);\nassert_eq!(dl.front().unwrap(), &1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elt",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:3872:4776":{"id":"b:1:8171-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2892-0:1311:4371":{"id":"b:1:2892-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[201,0],"end":[359,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:303:1153","0:304:2330","0:305:3044","0:306:1263","0:307:3058","0:308:3064","0:309:3069"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:565:425":{"id":"0:565:425","crate_id":0,"name":"call_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[2024,4],"end":[2026,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["args",{"generic":"Args"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3358:141","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}}},"b:1:2898-0:1465:4057":{"id":"b:1:2898-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:7472:4175":{"id":"a:1:3111:246-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4835:780":{"id":"0:4835:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/fmt.rs","begin":[1,0],"end":[638,1]},"visibility":"public","docs":"Utilities for formatting and printing `String`s.\n\nThis module contains the runtime support for the [`format!`] syntax extension.\nThis macro is implemented in the compiler to emit calls to this module in\norder to format arguments at runtime into strings.\n\n# Usage\n\nThe [`format!`] macro is intended to be familiar to those coming from C's\n`printf`/`fprintf` functions or Python's `str.format` function.\n\nSome examples of the [`format!`] extension are:\n\n```\nformat!(\"Hello\");                 // => \"Hello\"\nformat!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"\nformat!(\"The number is {}\", 1);   // => \"The number is 1\"\nformat!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\nformat!(\"{value}\", value=4);      // => \"4\"\nlet people = \"Rustaceans\";\nformat!(\"Hello {people}!\");       // => \"Hello Rustaceans!\"\nformat!(\"{} {}\", 1, 2);           // => \"1 2\"\nformat!(\"{:04}\", 42);             // => \"0042\" with leading zeros\nformat!(\"{:#?}\", (100, 200));     // => \"(\n                                  //       100,\n                                  //       200,\n                                  //     )\"\n```\n\nFrom these, you can see that the first argument is a format string. It is\nrequired by the compiler for this to be a string literal; it cannot be a\nvariable passed in (in order to perform validity checking). The compiler\nwill then parse the format string and determine if the list of arguments\nprovided is suitable to pass to this format string.\n\nTo convert a single value to a string, use the [`to_string`] method. This\nwill use the [`Display`] formatting trait.\n\n## Positional parameters\n\nEach formatting argument is allowed to specify which value argument it's\nreferencing, and if omitted it is assumed to be \"the next argument\". For\nexample, the format string `{} {} {}` would take three parameters, and they\nwould be formatted in the same order as they're given. The format string\n`{2} {1} {0}`, however, would format arguments in reverse order.\n\nThings can get a little tricky once you start intermingling the two types of\npositional specifiers. The \"next argument\" specifier can be thought of as an\niterator over the argument. Each time a \"next argument\" specifier is seen,\nthe iterator advances. This leads to behavior like this:\n\n```\nformat!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"\n```\n\nThe internal iterator over the argument has not been advanced by the time\nthe first `{}` is seen, so it prints the first argument. Then upon reaching\nthe second `{}`, the iterator has advanced forward to the second argument.\nEssentially, parameters that explicitly name their argument do not affect\nparameters that do not name an argument in terms of positional specifiers.\n\nA format string is required to use all of its arguments, otherwise it is a\ncompile-time error. You may refer to the same argument more than once in the\nformat string.\n\n## Named parameters\n\nRust itself does not have a Python-like equivalent of named parameters to a\nfunction, but the [`format!`] macro is a syntax extension that allows it to\nleverage named parameters. Named parameters are listed at the end of the\nargument list and have the syntax:\n\n```text\nidentifier '=' expression\n```\n\nFor example, the following [`format!`] expressions all use named arguments:\n\n```\nformat!(\"{argument}\", argument = \"test\");   // => \"test\"\nformat!(\"{name} {}\", 1, name = 2);          // => \"2 1\"\nformat!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n```\n\nIf a named parameter does not appear in the argument list, `format!` will\nreference a variable with that name in the current scope.\n\n```\nlet argument = 2 + 2;\nformat!(\"{argument}\");   // => \"4\"\n\nfn make_string(a: u32, b: &str) -> String {\n    format!(\"{b} {a}\")\n}\nmake_string(927, \"label\"); // => \"label 927\"\n```\n\nIt is not valid to put positional parameters (those without names) after\narguments that have names. Like with positional parameters, it is not\nvalid to provide named parameters that are unused by the format string.\n\n# Formatting Parameters\n\nEach argument being formatted can be transformed by a number of formatting\nparameters (corresponding to `format_spec` in [the syntax](#syntax)). These\nparameters affect the string representation of what's being formatted.\n\n## Width\n\n```\n// All of these print \"Hello x    !\"\nprintln!(\"Hello {:5}!\", \"x\");\nprintln!(\"Hello {:1$}!\", \"x\", 5);\nprintln!(\"Hello {1:0$}!\", 5, \"x\");\nprintln!(\"Hello {:width$}!\", \"x\", width = 5);\nlet width = 5;\nprintln!(\"Hello {:width$}!\", \"x\");\n```\n\nThis is a parameter for the \"minimum width\" that the format should take up.\nIf the value's string does not fill up this many characters, then the\npadding specified by fill/alignment will be used to take up the required\nspace (see below).\n\nThe value for the width can also be provided as a [`usize`] in the list of\nparameters by adding a postfix `$`, indicating that the second argument is\na [`usize`] specifying the width.\n\nReferring to an argument with the dollar syntax does not affect the \"next\nargument\" counter, so it's usually a good idea to refer to arguments by\nposition, or use named arguments.\n\n## Fill/Alignment\n\n```\nassert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");\nassert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");\nassert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");\nassert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");\n```\n\nThe optional fill character and alignment is provided normally in conjunction with the\n[`width`](#width) parameter. It must be defined before `width`, right after the `:`.\nThis indicates that if the value being formatted is smaller than\n`width` some extra characters will be printed around it.\nFilling comes in the following variants for different alignments:\n\n* `[fill]<` - the argument is left-aligned in `width` columns\n* `[fill]^` - the argument is center-aligned in `width` columns\n* `[fill]>` - the argument is right-aligned in `width` columns\n\nThe default [fill/alignment](#fillalignment) for non-numerics is a space and\nleft-aligned. The\ndefault for numeric formatters is also a space character but with right-alignment. If\nthe `0` flag (see below) is specified for numerics, then the implicit fill character is\n`0`.\n\nNote that alignment might not be implemented by some types. In particular, it\nis not generally implemented for the `Debug` trait.  A good way to ensure\npadding is applied is to format your input, then pad this resulting string\nto obtain your output:\n\n```\nprintln!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"\n```\n\n## Sign/`#`/`0`\n\n```\nassert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");\nassert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");\nassert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");\nassert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");\nassert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");\n```\n\nThese are all flags altering the behavior of the formatter.\n\n* `+` - This is intended for numeric types and indicates that the sign\n        should always be printed. By default only the negative sign of signed values\n        is printed, and the sign of positive or unsigned values is omitted.\n        This flag indicates that the correct sign (`+` or `-`) should always be printed.\n* `-` - Currently not used\n* `#` - This flag indicates that the \"alternate\" form of printing should\n        be used. The alternate forms are:\n    * `#?` - pretty-print the [`Debug`] formatting (adds linebreaks and indentation)\n    * `#x` - precedes the argument with a `0x`\n    * `#X` - precedes the argument with a `0x`\n    * `#b` - precedes the argument with a `0b`\n    * `#o` - precedes the argument with a `0o`\n\n  See [Formatting traits](#formatting-traits) for a description of what the `?`, `x`, `X`,\n  `b`, and `o` flags do.\n\n* `0` - This is used to indicate for integer formats that the padding to `width` should\n        both be done with a `0` character as well as be sign-aware. A format\n        like `{:08}` would yield `00000001` for the integer `1`, while the\n        same format would yield `-0000001` for the integer `-1`. Notice that\n        the negative version has one fewer zero than the positive version.\n        Note that padding zeros are always placed after the sign (if any)\n        and before the digits. When used together with the `#` flag, a similar\n        rule applies: padding zeros are inserted after the prefix but before\n        the digits. The prefix is included in the total width.\n        This flag overrides the [fill character and alignment flag](#fillalignment).\n\n## Precision\n\nFor non-numeric types, this can be considered a \"maximum width\". If the resulting string is\nlonger than this width, then it is truncated down to this many characters and that truncated\nvalue is emitted with proper `fill`, `alignment` and `width` if those parameters are set.\n\nFor integral types, this is ignored.\n\nFor floating-point types, this indicates how many digits after the decimal point should be\nprinted.\n\nThere are three possible ways to specify the desired `precision`:\n\n1. An integer `.N`:\n\n   the integer `N` itself is the precision.\n\n2. An integer or name followed by dollar sign `.N$`:\n\n   use format *argument* `N` (which must be a `usize`) as the precision.\n\n3. An asterisk `.*`:\n\n   `.*` means that this `{...}` is associated with *two* format inputs rather than one:\n   - If a format string in the fashion of `{:<spec>.*}` is used, then the first input holds\n     the `usize` precision, and the second holds the value to print.\n   - If a format string in the fashion of `{<arg>:<spec>.*}` is used, then the `<arg>` part\n     refers to the value to print, and the `precision` is taken like it was specified with an\n     omitted positional parameter (`{}` instead of `{<arg>:}`).\n\nFor example, the following calls all print the same thing `Hello x is 0.01000`:\n\n```\n// Hello {arg 0 (\"x\")} is {arg 1 (0.01) with precision specified inline (5)}\nprintln!(\"Hello {0} is {1:.5}\", \"x\", 0.01);\n\n// Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision specified in arg 0 (5)}\nprintln!(\"Hello {1} is {2:.0$}\", 5, \"x\", 0.01);\n\n// Hello {arg 0 (\"x\")} is {arg 2 (0.01) with precision specified in arg 1 (5)}\nprintln!(\"Hello {0} is {2:.1$}\", \"x\", 5, 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {second of next two args -> arg 2 (0.01) with precision\n//                          specified in first of next two args -> arg 1 (5)}\nprintln!(\"Hello {} is {:.*}\",    \"x\", 5, 0.01);\n\n// Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision\n//                          specified in next arg -> arg 0 (5)}\nprintln!(\"Hello {1} is {2:.*}\",  5, \"x\", 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {arg 2 (0.01) with precision\n//                          specified in next arg -> arg 1 (5)}\nprintln!(\"Hello {} is {2:.*}\",   \"x\", 5, 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {arg \"number\" (0.01) with precision specified\n//                          in arg \"prec\" (5)}\nprintln!(\"Hello {} is {number:.prec$}\", \"x\", prec = 5, number = 0.01);\n```\n\nWhile these:\n\n```\nprintln!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);\nprintln!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");\nprintln!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n```\n\nprint three significantly different things:\n\n```text\nHello, `1234.560` has 3 fractional digits\nHello, `123` has 3 characters\nHello, `     123` has 3 right-aligned characters\n```\n\nWhen truncating these values, Rust uses [round half-to-even](https://en.wikipedia.org/wiki/Rounding#Rounding_half_to_even),\nwhich is the default rounding mode in IEEE 754.\nFor example,\n\n```\nprint!(\"{0:.1$e}\", 12345, 3);\nprint!(\"{0:.1$e}\", 12355, 3);\n```\n\nWould return:\n\n```text\n1.234e4\n1.236e4\n```\n\n## Localization\n\nIn some programming languages, the behavior of string formatting functions\ndepends on the operating system's locale setting. The format functions\nprovided by Rust's standard library do not have any concept of locale and\nwill produce the same results on all systems regardless of user\nconfiguration.\n\nFor example, the following code will always print `1.5` even if the system\nlocale uses a decimal separator other than a dot.\n\n```\nprintln!(\"The value is {}\", 1.5);\n```\n\n# Escaping\n\nThe literal characters `{` and `}` may be included in a string by preceding\nthem with the same character. For example, the `{` character is escaped with\n`{{` and the `}` character is escaped with `}}`.\n\n```\nassert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");\nassert_eq!(format!(\"{{ Hello\"), \"{ Hello\");\n```\n\n# Syntax\n\nTo summarize, here you can find the full grammar of format strings.\nThe syntax for the formatting language used is drawn from other languages,\nso it should not be too alien. Arguments are formatted with Python-like\nsyntax, meaning that arguments are surrounded by `{}` instead of the C-like\n`%`. The actual grammar for the formatting syntax is:\n\n```text\nformat_string := text [ maybe_format text ] *\nmaybe_format := '{' '{' | '}' '}' | format\nformat := '{' [ argument ] [ ':' format_spec ] [ ws ] * '}'\nargument := integer | identifier\n\nformat_spec := [[fill]align][sign]['#']['0'][width]['.' precision]type\nfill := character\nalign := '<' | '^' | '>'\nsign := '+' | '-'\nwidth := count\nprecision := count | '*'\ntype := '' | '?' | 'x?' | 'X?' | identifier\ncount := parameter | integer\nparameter := argument '$'\n```\nIn the above grammar,\n- `text` must not contain any `'{'` or `'}'` characters,\n- `ws` is any character for which [`char::is_whitespace`] returns `true`, has no semantic\n  meaning and is completely optional,\n- `integer` is a decimal integer that may contain leading zeroes and must fit into an `usize` and\n- `identifier` is an `IDENTIFIER_OR_KEYWORD` (not an `IDENTIFIER`) as defined by the [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html).\n\n# Formatting traits\n\nWhen requesting that an argument be formatted with a particular type, you\nare actually requesting that an argument ascribes to a particular trait.\nThis allows multiple actual types to be formatted via `{:x}` (like [`i8`] as\nwell as [`isize`]). The current mapping of types to traits is:\n\n* *nothing* ⇒ [`Display`]\n* `?` ⇒ [`Debug`]\n* `x?` ⇒ [`Debug`] with lower-case hexadecimal integers\n* `X?` ⇒ [`Debug`] with upper-case hexadecimal integers\n* `o` ⇒ [`Octal`]\n* `x` ⇒ [`LowerHex`]\n* `X` ⇒ [`UpperHex`]\n* `p` ⇒ [`Pointer`]\n* `b` ⇒ [`Binary`]\n* `e` ⇒ [`LowerExp`]\n* `E` ⇒ [`UpperExp`]\n\nWhat this means is that any type of argument which implements the\n[`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations\nare provided for these traits for a number of primitive types by the\nstandard library as well. If no format is specified (as in `{}` or `{:6}`),\nthen the format trait used is the [`Display`] trait.\n\nWhen implementing a format trait for your own type, you will have to\nimplement a method of the signature:\n\n```\n# #![allow(dead_code)]\n# use std::fmt;\n# struct Foo; // our custom type\n# impl fmt::Display for Foo {\nfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n# write!(f, \"testing, testing\")\n# } }\n```\n\nYour type will be passed as `self` by-reference, and then the function\nshould emit output into the Formatter `f` which implements `fmt::Write`. It is up to each\nformat trait implementation to correctly adhere to the requested formatting parameters.\nThe values of these parameters can be accessed with methods of the\n[`Formatter`] struct. In order to help with this, the [`Formatter`] struct also\nprovides some helper methods.\n\nAdditionally, the return value of this function is [`fmt::Result`] which is a\ntype alias of <code>[Result]<(), [std::fmt::Error]></code>. Formatting implementations\nshould ensure that they propagate errors from the [`Formatter`] (e.g., when\ncalling [`write!`]). However, they should never return errors spuriously. That\nis, a formatting implementation must and may only return an error if the\npassed-in [`Formatter`] returns an error. This is because, contrary to what\nthe function signature might suggest, string formatting is an infallible\noperation. This function only returns a result because writing to the\nunderlying stream might fail and it must provide a way to propagate the fact\nthat an error has occurred back up the stack.\n\nAn example of implementing the formatting traits would look\nlike:\n\n```\nuse std::fmt;\n\n#[derive(Debug)]\nstruct Vector2D {\n    x: isize,\n    y: isize,\n}\n\nimpl fmt::Display for Vector2D {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        // The `f` value implements the `Write` trait, which is what the\n        // write! macro is expecting. Note that this formatting ignores the\n        // various flags provided to format strings.\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n\n// Different traits allow different forms of output of a type. The meaning\n// of this format is to print the magnitude of a vector.\nimpl fmt::Binary for Vector2D {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let magnitude = (self.x * self.x + self.y * self.y) as f64;\n        let magnitude = magnitude.sqrt();\n\n        // Respect the formatting flags by using the helper method\n        // `pad_integral` on the Formatter object. See the method\n        // documentation for details, and the function `pad` can be used\n        // to pad strings.\n        let decimals = f.precision().unwrap_or(3);\n        let string = format!(\"{magnitude:.decimals$}\");\n        f.pad_integral(true, \"\", &string)\n    }\n}\n\nfn main() {\n    let myvector = Vector2D { x: 3, y: 4 };\n\n    println!(\"{myvector}\");       // => \"(3, 4)\"\n    println!(\"{myvector:?}\");     // => \"Vector2D {x: 3, y:4}\"\n    println!(\"{myvector:10.3b}\"); // => \"     5.000\"\n}\n```\n\n### `fmt::Display` vs `fmt::Debug`\n\nThese two formatting traits have distinct purposes:\n\n- [`fmt::Display`][`Display`] implementations assert that the type can be faithfully\n  represented as a UTF-8 string at all times. It is **not** expected that\n  all types implement the [`Display`] trait.\n- [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.\n  Output will typically represent the internal state as faithfully as possible.\n  The purpose of the [`Debug`] trait is to facilitate debugging Rust code. In\n  most cases, using `#[derive(Debug)]` is sufficient and recommended.\n\nSome examples of the output from both traits:\n\n```\nassert_eq!(format!(\"{} {:?}\", 3, 4), \"3 4\");\nassert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");\nassert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");\n```\n\n# Related macros\n\nThere are a number of related macros in the [`format!`] family. The ones that\nare currently implemented are:\n\n```ignore (only-for-syntax-highlight)\nformat!      // described above\nwrite!       // first argument is either a &mut io::Write or a &mut fmt::Write, the destination\nwriteln!     // same as write but appends a newline\nprint!       // the format string is printed to the standard output\nprintln!     // same as print but appends a newline\neprint!      // the format string is printed to the standard error\neprintln!    // same as eprint but appends a newline\nformat_args! // described below.\n```\n\n### `write!`\n\n[`write!`] and [`writeln!`] are two macros which are used to emit the format string\nto a specified stream. This is used to prevent intermediate allocations of\nformat strings and instead directly write the output. Under the hood, this\nfunction is actually invoking the [`write_fmt`] function defined on the\n[`std::io::Write`] and the [`std::fmt::Write`] trait. Example usage is:\n\n```\n# #![allow(unused_must_use)]\nuse std::io::Write;\nlet mut w = Vec::new();\nwrite!(&mut w, \"Hello {}!\", \"world\");\n```\n\n### `print!`\n\nThis and [`println!`] emit their output to stdout. Similarly to the [`write!`]\nmacro, the goal of these macros is to avoid intermediate allocations when\nprinting output. Example usage is:\n\n```\nprint!(\"Hello {}!\", \"world\");\nprintln!(\"I have a newline {}\", \"character at the end\");\n```\n### `eprint!`\n\nThe [`eprint!`] and [`eprintln!`] macros are identical to\n[`print!`] and [`println!`], respectively, except they emit their\noutput to stderr.\n\n### `format_args!`\n\n[`format_args!`] is a curious macro used to safely pass around\nan opaque object describing the format string. This object\ndoes not require any heap allocations to create, and it only\nreferences information on the stack. Under the hood, all of\nthe related macros are implemented in terms of this. First\noff, some example usage is:\n\n```\n# #![allow(unused_must_use)]\nuse std::fmt;\nuse std::io::{self, Write};\n\nlet mut some_writer = io::stdout();\nwrite!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n\nfn my_fmt_fn(args: fmt::Arguments<'_>) {\n    write!(&mut io::stdout(), \"{args}\");\n}\nmy_fmt_fn(format_args!(\", or a {} too\", \"function\"));\n```\n\nThe result of the [`format_args!`] macro is a value of type [`fmt::Arguments`].\nThis structure can then be passed to the [`write`] and [`format`] functions\ninside this module in order to process the format string.\nThe goal of this macro is to even further prevent intermediate allocations\nwhen dealing with formatting strings.\n\nFor example, a logging library could use the standard formatting syntax, but\nit would internally pass around this structure until it has been determined\nwhere output should go to.\n\n[`fmt::Result`]: Result \"fmt::Result\"\n[Result]: core::result::Result \"std::result::Result\"\n[std::fmt::Error]: Error \"fmt::Error\"\n[`write`]: write() \"fmt::write\"\n[`to_string`]: crate::string::ToString::to_string \"ToString::to_string\"\n[`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt\n[`std::io::Write`]: ../../std/io/trait.Write.html\n[`std::fmt::Write`]: ../../std/fmt/trait.Write.html\n[`print!`]: ../../std/macro.print.html \"print!\"\n[`println!`]: ../../std/macro.println.html \"println!\"\n[`eprint!`]: ../../std/macro.eprint.html \"eprint!\"\n[`eprintln!`]: ../../std/macro.eprintln.html \"eprintln!\"\n[`format_args!`]: ../../std/macro.format_args.html \"format_args!\"\n[`fmt::Arguments`]: Arguments \"fmt::Arguments\"\n[`format`]: format() \"fmt::format\"","links":{"`UpperHex`":"1:10260:7845","crate::string::ToString::to_string":"0:5853:1730","`Display`":"1:10252:128","`usize`":"1:52101:1861","core::result::Result":"1:41630:225","`Binary`":"1:10256:7835","`Debug`":"1:10247:119","`Octal`":"1:10254:7836","`LowerExp`":"1:10264:7842","`Formatter`":"1:10221:142","`isize`":"1:52100:943","Error":"1:42530:136","`writeln!`":"1:16:11825","`Pointer`":"1:10262:205","Arguments":"1:42551:7834","`format!`":"0:6:793","`char::is_whitespace`":"1:4915:13720","`LowerHex`":"1:10258:7844","`UpperExp`":"1:10266:7843","format()":"0:4866:793","`write!`":"1:15:2895","Result":"1:10202:225","`i8`":"1:52090:887","write()":"1:10268:2895"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:4836-1:42513:7830","0:4837-1:42530:136","0:4838-1:10050:7833","0:4840-1:10268:2895","0:4841-1:42551:7834","0:4843-1:10256:7835","0:4844-1:10254:7836","0:4846-1:10247:119","0:4846-1:10250:119","0:4847-1:10252:128","0:4849-1:9999:7837","0:4850-1:10018:7838","0:4851-1:9980:7839","0:4852-1:9924:120","0:4853-1:9946:7840","0:4855-1:10221:142","0:4856-1:10202:225","0:4857-1:10203:7841","0:4859-1:10264:7842","0:4860-1:10266:7843","0:4862-1:10258:7844","0:4863-1:10262:205","0:4864-1:10260:7845","0:4866:793"],"is_stripped":false}}},"0:5382-1:11252:8720":{"id":"0:5382-1:11252:8720","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[67,22],"end":[67,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RSplit","name":"RSplit","id":"1:11252:8720","glob":false}}},"b:1:2615-0:7597:7097":{"id":"b:1:2615-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5555-1:12772:8933":{"id":"0:5555-1:12772:8933","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[42,20],"end":[42,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::FromStr","name":"FromStr","id":"1:12772:8933","glob":false}}},"0:5343-1:43251:8686":{"id":"0:5343-1:43251:8686","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[37,0],"end":[37,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"array_chunks\", issue = \"74985\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ArrayChunks","name":"ArrayChunks","id":"1:43251:8686","glob":false}}},"a:1:3146:11953-0:7392:4150":{"id":"a:1:3146:11953-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4663:3694":{"id":"0:4663:3694","crate_id":0,"name":"btree_map","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[16,0],"end":[16,17]},"visibility":"public","docs":"An ordered map based on a B-Tree.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:4664-0:1255:1031"],"is_stripped":false}}},"0:3722:6196":{"id":"0:3722:6196","crate_id":0,"name":"back_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[825,4],"end":[827,5]},"visibility":"public","docs":"Provides a mutable reference to the back element, or `None` if the list\nis empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n\nmatch dl.back_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.back(), Some(&5));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4563:6908":{"id":"0:4563:6908","crate_id":0,"name":"binary_search_by_key","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2578,4],"end":[2584,5]},"visibility":"public","docs":"Binary searches this `VecDeque` with a key extraction function.\n\nAssumes that the deque is sorted by the key, for instance with\n[`make_contiguous().sort_by_key()`] using the same key extraction function.\nIf the deque is not sorted by the key, the returned result is\nunspecified and meaningless.\n\nIf the value is found then [`Result::Ok`] is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n[`Result::Err`] is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.\n\nSee also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n\n[`make_contiguous().sort_by_key()`]: VecDeque::make_contiguous\n[`binary_search`]: VecDeque::binary_search\n[`binary_search_by`]: VecDeque::binary_search_by\n[`partition_point`]: VecDeque::partition_point\n\n# Examples\n\nLooks up a series of four elements in a slice of pairs sorted by\ntheir second elements. The first is found, with a uniquely\ndetermined position; the second and third are not found; the\nfourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [(0, 0), (2, 1), (4, 1), (5, 1),\n         (3, 1), (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n         (1, 21), (2, 34), (4, 55)].into();\n\nassert_eq!(deque.binary_search_by_key(&13, |&(a, b)| b),  Ok(9));\nassert_eq!(deque.binary_search_by_key(&4, |&(a, b)| b),   Err(7));\nassert_eq!(deque.binary_search_by_key(&100, |&(a, b)| b), Err(13));\nlet r = deque.binary_search_by_key(&1, |&(a, b)| b);\nassert!(matches!(r, Ok(1..=4)));\n```","links":{"VecDeque::binary_search":"0:4555:6875","`Result::Err`":"1:41636:135","VecDeque::partition_point":"0:4568:6925","`Result::Ok`":"1:41633:192","VecDeque::make_contiguous":"0:4550:6815","VecDeque::binary_search_by":"0:4557:6876"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"B"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:29494":{"id":"1:13239:29494","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:943:4057":{"id":"b:0:727-0:943:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:7538:2621":{"id":"a:1:41611:4468-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:7363:2619":{"id":"b:1:2898-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:295:2399":{"id":"b:1:2903-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7559:1252":{"id":"0:7559:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,20],"end":[111,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1577:4553":{"id":"b:1:2615-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:4149:4509":{"id":"b:1:2615-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5430:8780":{"id":"0:5430:8780","crate_id":0,"name":"sort_by_key","span":{"filename":"library/alloc/src/slice.rs","begin":[305,4],"end":[311,5]},"visibility":"public","docs":"Sorts the slice with a key extraction function.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* \\* log(*n*))\nworst-case, where the key function is *O*(*m*).\n\nFor expensive key functions (e.g. functions that are not simple property accesses or\nbasic operations), [`sort_by_cached_key`](slice::sort_by_cached_key) is likely to be\nsignificantly faster, as it does not recompute element keys.\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn't allocate auxiliary memory.\nSee [`sort_unstable_by_key`](slice::sort_unstable_by_key).\n\n# Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by\n[timsort](https://en.wikipedia.org/wiki/Timsort).\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a\nnon-allocating insertion sort is used instead.\n\n# Examples\n\n```\nlet mut v = [-5i32, 4, 1, -3, 2];\n\nv.sort_by_key(|k| k.abs());\nassert!(v == [1, 2, -3, 4, -5]);\n```","links":{"slice::sort_by_cached_key":"0:5434:8802","slice::sort_unstable_by_key":"1:12221:13837"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4720:7197":{"id":"0:4720:7197","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[214,4],"end":[216,5]},"visibility":"public","docs":"Returns the bytes that were attempted to convert to a [`CString`].\n\nThis method is carefully constructed to avoid allocation. It will\nconsume the error, moving out the bytes, so that a copy of the bytes\ndoes not need to be made.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::ffi::CString;\n\n// Some invalid bytes in a vector\nlet bytes = b\"f\\0oo\".to_vec();\n\nlet value = CString::from_vec_with_nul(bytes.clone());\n\nassert_eq!(bytes, value.unwrap_err().into_bytes());\n```","links":{"`CString`":"0:7553:7100"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3661:4509":{"id":"b:1:2888-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:3245:5783":{"id":"a:1:41611:4468-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7143:4749":{"id":"0:7143:4749","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2274,4],"end":[2300,5]},"visibility":"public","docs":"Splits the collection into two at the given index.\n\nReturns a newly allocated vector containing the elements in the range\n`[at, len)`. After the call, the original vector will be left containing\nthe elements `[0, at)` with its previous capacity unchanged.\n\n- If you want to take ownership of the entire contents and capacity of\n  the vector, see [`mem::take`] or [`mem::replace`].\n- If you don't need the returned vector at all, see [`Vec::truncate`].\n- If you want to take ownership of an arbitrary subslice, or you don't\n  necessarily want to store the removed items in a vector, see [`Vec::drain`].\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet vec2 = vec.split_off(1);\nassert_eq!(vec, [1]);\nassert_eq!(vec2, [2, 3]);\n```","links":{"`mem::take`":"1:1935:3926","`Vec::drain`":"0:7138:4149","`Vec::truncate`":"0:7076:6589","`mem::replace`":"1:1937:4230"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[must_use = \"use `.truncate()` if you don't need the other half\"]","#[stable(feature = \"split_off\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5543-1:43365:8923":{"id":"0:5543-1:43365:8923","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,46],"end":[36,51]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Bytes","name":"Bytes","id":"1:43365:8923","glob":false}}},"0:7966":{"id":"0:7966","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[36,0],"end":[36,117]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"U"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7972:678","0:7974:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1993:3437":{"id":"0:1993:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2215,4],"end":[2217,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1518:4524":{"id":"0:1518:4524","crate_id":0,"name":"Keys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[477,0],"end":[479,1]},"visibility":"public","docs":"An iterator over the keys of a `BTreeMap`.\n\nThis `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`keys`]: BTreeMap::keys","links":{"`BTreeMap`":"0:1428:99","BTreeMap::keys":"0:2076:4872"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1518:4524","a:1:32053:3459-0:1518:4524","a:1:3111:246-0:1518:4524","a:1:31996:236-0:1518:4524","a:1:41612:4469-0:1518:4524","a:1:41611:4468-0:1518:4524","b:0:727-0:1518:4524","b:1:8171-0:1518:4524","b:1:2888-0:1518:4524","b:1:2618-0:1518:4524","b:1:2615-0:1518:4524","b:1:3727-0:1518:4524","b:1:2892-0:1518:4524","b:1:2903-0:1518:4524","b:1:2898-0:1518:4524","0:1523","0:1785","0:1768","0:1796","0:1789","0:1792","0:1779"]}}},"b:1:2615-0:1536:4534":{"id":"b:1:2615-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:6007:71":{"id":"a:1:41612:4469-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5499":{"id":"0:5499","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[819,0],"end":[834,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"slice":{"generic":"T"}},"items":["0:5501:3355","0:5502:3587","0:5503:3595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3314":{"id":"0:3314","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[325,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3316:1153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1913:1167":{"id":"0:1913:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2057,4],"end":[2059,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:1527:4528":{"id":"b:1:2618-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6421:10507":{"id":"0:6421:10507","crate_id":0,"name":"LocalWake","span":{"filename":"library/alloc/src/task.rs","begin":[268,0],"end":[284,1]},"visibility":"public","docs":"An analogous trait to `Wake` but used to construct a `LocalWaker`. This API\nworks in exactly the same way as `Wake`, except that it uses an `Rc` instead\nof an `Arc`, and the result is a `LocalWaker` instead of a `Waker`.\n\nThe benefits of using `LocalWaker` over `Waker` are that it allows the local waker\nto hold data that does not implement `Send` and `Sync`. Additionally, it saves calls\nto `Arc::clone`, which requires atomic synchronization.\n\n\n# Examples\n\nThis is a simplified example of a `spawn` and a `block_on` function. The `spawn` function\nis used to push new tasks onto the run queue, while the block on function will remove them\nand poll them. When a task is woken, it will put itself back on the run queue to be polled\nby the executor.\n\n**Note:** This example trades correctness for simplicity. A real world example would interleave\npoll calls with calls to an io reactor to wait for events instead of spinning on a loop.\n\n```rust\n#![feature(local_waker)]\n#![feature(noop_waker)]\nuse std::task::{LocalWake, ContextBuilder, LocalWaker, Waker};\nuse std::future::Future;\nuse std::pin::Pin;\nuse std::rc::Rc;\nuse std::cell::RefCell;\nuse std::collections::VecDeque;\n\n\nthread_local! {\n    // A queue containing all tasks ready to do progress\n    static RUN_QUEUE: RefCell<VecDeque<Rc<Task>>> = RefCell::default();\n}\n\ntype BoxedFuture = Pin<Box<dyn Future<Output = ()>>>;\n\nstruct Task(RefCell<BoxedFuture>);\n\nimpl LocalWake for Task {\n    fn wake(self: Rc<Self>) {\n        RUN_QUEUE.with_borrow_mut(|queue| {\n            queue.push_back(self)\n        })\n    }\n}\n\nfn spawn<F>(future: F)\nwhere\n    F: Future<Output=()> + 'static + Send + Sync\n{\n    let task = RefCell::new(Box::pin(future));\n    RUN_QUEUE.with_borrow_mut(|queue| {\n        queue.push_back(Rc::new(Task(task)));\n    });\n}\n\nfn block_on<F>(future: F)\nwhere\n    F: Future<Output=()> + 'static + Sync + Send\n{\n    spawn(future);\n    loop {\n        let Some(task) = RUN_QUEUE.with_borrow_mut(|queue| queue.pop_front()) else {\n            // we exit, since there are no more tasks remaining on the queue\n            return;\n        };\n\n        // cast the Rc<Task> into a `LocalWaker`\n        let local_waker: LocalWaker = task.clone().into();\n        // Build the context using `ContextBuilder`\n        let mut cx = ContextBuilder::from_waker(Waker::noop())\n            .local_waker(&local_waker)\n            .build();\n\n        // Poll the task\n        let _ = task.0\n            .borrow_mut()\n            .as_mut()\n            .poll(&mut cx);\n    }\n}\n\nblock_on(async {\n    println!(\"hello world\");\n});\n```\n","links":{},"attrs":["#[unstable(feature = \"local_waker\", issue = \"118959\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:6422:10441","0:6423:10447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:1808:3431":{"id":"0:1808:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1829,4],"end":[1831,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7283":{"id":"0:7283","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3218,0],"end":[3223,1]},"visibility":"default","docs":"Implements ordering of vectors, [lexicographically](Ord#lexicographical-comparison).","links":{"Ord#lexicographical-comparison":"1:2701:194"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7286:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3957":{"id":"0:3957","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2093,0],"end":[2101,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3960:678","0:3961:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4682":{"id":"0:4682","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[131,0],"end":[147,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4683:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5452:8869":{"id":"0:5452:8869","crate_id":0,"name":"to_ascii_lowercase","span":{"filename":"library/alloc/src/slice.rs","begin":[642,4],"end":[646,5]},"visibility":"public","docs":"Returns a vector containing a copy of this slice where each byte\nis mapped to its ASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\n[`make_ascii_lowercase`]: slice::make_ascii_lowercase","links":{"slice::make_ascii_lowercase":"1:10768:8870"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the lowercase bytes as a new Vec, \\\n                  without modifying the original\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:28316":{"id":"1:13244:28316","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7538:2621":{"id":"a:1:41612:4469-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4809:7407":{"id":"0:4809:7407","crate_id":0,"name":"into_cstring","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[986,4],"end":[988,5]},"visibility":"public","docs":"Consumes this error, returning original [`CString`] which generated the\nerror.","links":{"`CString`":"0:7553:7100"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5817:9746":{"id":"0:5817:9746","crate_id":0,"name":"strip_prefix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2300,4],"end":[2302,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:1830:4776":{"id":"a:1:41611:4468-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:6007:71":{"id":"b:1:2898-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[240,0],"end":[324,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["grow_zeroed","shrink","by_ref","allocate_zeroed","grow"],"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:118:2718","0:119:2719","0:120:2789","0:121:2793","0:122:2856","0:123:2776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4758:610":{"id":"0:4758:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[715,4],"end":[717,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5849":{"id":"0:5849","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2503,0],"end":[2509,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:12772:8933","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5850:135","0:5851:9321"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:1546:4541":{"id":"b:1:2903-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3460:198":{"id":"0:3460:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1429,4],"end":[1429,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:3987":{"id":"0:3987","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2161,0],"end":[2174,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3991:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6389:430":{"id":"0:6389:430","crate_id":0,"name":"cause","span":{"filename":"library/alloc/src/sync.rs","begin":[3642,4],"end":[3644,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6022":{"id":"0:6022","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[266,0],"end":[266,94]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3599:3007","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:7402:4039":{"id":"b:1:8171-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:4437:651":{"id":"0:4437:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[124,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5773":{"id":"0:5773","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2166,0],"end":[2182,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"herd_cows\", since = \"1.19.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5775:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7619":{"id":"0:7619","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,31],"end":[227,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7620:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4982:3045":{"id":"0:4982:3045","crate_id":0,"name":"new_zeroed_in","span":{"filename":"library/alloc/src/rc.rs","begin":[763,4],"end":[774,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, in the provided allocator.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet zero = Rc::<u32, _>::new_zeroed_in(System);\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7072:2769":{"id":"0:7072:2769","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1054,4],"end":[1056,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional`\nelements to be inserted in the given `Vec<T>`. Unlike [`try_reserve`],\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling `try_reserve_exact`, capacity will be greater\nthan or equal to `self.len() + additional` if it returns `Ok(())`.\nDoes nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: Vec::try_reserve\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    let mut output = Vec::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{"Vec::try_reserve":"0:7071:2760"},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3279:5798":{"id":"0:3279:5798","crate_id":0,"name":"Intersection","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[254,0],"end":[260,1]},"visibility":"public","docs":"A lazy iterator producing elements in the intersection of `BTreeSet`s.\n\nThis `struct` is created by the [`intersection`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`intersection`]: BTreeSet::intersection","links":{"`BTreeSet`":"0:3209:100","BTreeSet::intersection":"0:3328:5848"},"attrs":["#[must_use =\n\"this returns the intersection as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3279:5798","a:1:32053:3459-0:3279:5798","a:1:3111:246-0:3279:5798","a:1:31996:236-0:3279:5798","a:1:41612:4469-0:3279:5798","a:1:41611:4468-0:3279:5798","b:0:727-0:3279:5798","b:1:8171-0:3279:5798","b:1:2888-0:3279:5798","b:1:2618-0:3279:5798","b:1:2615-0:3279:5798","b:1:3727-0:3279:5798","b:1:2892-0:3279:5798","b:1:2903-0:3279:5798","b:1:2898-0:3279:5798","0:3575","0:3563","0:3301","0:3567"]}}},"0:4129:3437":{"id":"0:4129:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[261,4],"end":[268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3710:6155":{"id":"0:3710:6155","crate_id":0,"name":"cursor_back_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[610,4],"end":[612,5]},"visibility":"public","docs":"Provides a cursor with editing operations at the back element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2087:4953":{"id":"0:2087:4953","crate_id":0,"name":"upper_bound_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2746,4],"end":[2774,5]},"visibility":"public","docs":"Returns a [`CursorMut`] pointing at the gap after the greatest key\nsmaller than the given bound.\n\nPassing `Bound::Included(x)` will return a cursor pointing to the\ngap after the greatest key smaller than or equal to `x`.\n\nPassing `Bound::Excluded(x)` will return a cursor pointing to the\ngap after the greatest key smaller than `x`.\n\nPassing `Bound::Unbounded` will return a cursor pointing to the\ngap after the greatest key in the map.\n\n# Examples\n\n```\n#![feature(btree_cursors)]\n\nuse std::collections::BTreeMap;\nuse std::ops::Bound;\n\nlet mut map = BTreeMap::from([\n    (1, \"a\"),\n    (2, \"b\"),\n    (3, \"c\"),\n    (4, \"d\"),\n]);\n\nlet mut cursor = map.upper_bound_mut(Bound::Included(&3));\nassert_eq!(cursor.peek_prev(), Some((&3, &mut \"c\")));\nassert_eq!(cursor.peek_next(), Some((&4, &mut \"d\")));\n\nlet mut cursor = map.upper_bound_mut(Bound::Excluded(&3));\nassert_eq!(cursor.peek_prev(), Some((&2, &mut \"b\")));\nassert_eq!(cursor.peek_next(), Some((&3, &mut \"c\")));\n\nlet mut cursor = map.upper_bound_mut(Bound::Unbounded);\nassert_eq!(cursor.peek_prev(), Some((&4, &mut \"d\")));\nassert_eq!(cursor.peek_next(), None);\n```","links":{"`CursorMut`":"0:2103:4931"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bound",{"resolved_path":{"name":"Bound","id":"1:39258:4363","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2897:810":{"id":"1:2897:810","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5275":{"id":"0:5275","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3304,0],"end":[3321,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5277:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5778:3569":{"id":"0:5778:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2187,4],"end":[2192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7069:2750":{"id":"0:7069:2750","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[944,4],"end":[946,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling `reserve`,\ncapacity will be greater than or equal to `self.len() + additional`.\nDoes nothing if capacity is already sufficient.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n# Examples\n\n```\nlet mut vec = vec![1];\nvec.reserve(10);\nassert!(vec.capacity() >= 11);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5696:2680":{"id":"0:5696:2680","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/string.rs","begin":[1118,4],"end":[1120,5]},"visibility":"public","docs":"Returns this `String`'s capacity, in bytes.\n\n# Examples\n\n```\nlet s = String::with_capacity(10);\n\nassert!(s.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3238:4057":{"id":"b:1:2888-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3571:172":{"id":"0:3571:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1749,4],"end":[1749,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:414:3315":{"id":"0:414:3315","crate_id":0,"name":"write_i8","span":{"filename":"library/alloc/src/boxed.rs","begin":[1420,4],"end":[1422,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3657:780":{"id":"0:3657:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[83,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7527:2620":{"id":"b:1:2903-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7267":{"id":"0:7267","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3183,0],"end":[3197,1]},"visibility":"default","docs":"Extend implementation that copies elements out of references before pushing them onto the Vec.\n\nThis implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to\nappend the entire slice at once.\n\n[`copy_from_slice`]: slice::copy_from_slice","links":{"slice::copy_from_slice":"1:12247:8382"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7271:3569","0:7273:2350","0:7274:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:1356:4373":{"id":"a:1:31996:236-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2903-0:943:4057":{"id":"b:1:2903-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7675":{"id":"0:7675","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2346,0],"end":[2346,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"items":["0:7678:678","0:7679:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:420:3321":{"id":"0:420:3321","crate_id":0,"name":"write_length_prefix","span":{"filename":"library/alloc/src/boxed.rs","begin":[1438,4],"end":[1440,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524:1167":{"id":"0:524:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/boxed.rs","begin":[1951,4],"end":[1953,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1650:172":{"id":"0:1650:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1486,4],"end":[1486,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"0:5465:487":{"id":"0:5465:487","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/slice.rs","begin":[710,4],"end":[717,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5837:198":{"id":"0:5837:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2453,4],"end":[2453,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}},"b:1:2888-0:3872:4776":{"id":"b:1:2888-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6054":{"id":"0:6054","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[343,0],"end":[343,78]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3636:3012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1322":{"id":"0:1322","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[36,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"debug_btree_map\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1326:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3635:181":{"id":"0:3635:181","crate_id":0,"name":"LinkedList","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[51,0],"end":[60,1]},"visibility":"public","docs":"A doubly-linked list with owned nodes.\n\nThe `LinkedList` allows pushing and popping elements at either end\nin constant time.\n\nA `LinkedList` with a known list of items can be initialized from an array:\n```\nuse std::collections::LinkedList;\n\nlet list = LinkedList::from([1, 2, 3]);\n```\n\nNOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\narray-based containers are generally faster,\nmore memory efficient, and make better use of CPU cache.\n\n[`Vec`]: crate::vec::Vec\n[`VecDeque`]: super::vec_deque::VecDeque","links":{"super::vec_deque::VecDeque":"0:4423:264","crate::vec::Vec":"0:7048:263"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"LinkedList\"]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:3697","0:3701","a:1:3146:11953-0:3635:181","a:1:32053:3459-0:3635:181","a:1:41612:4469-0:3635:181","a:1:41611:4468-0:3635:181","b:0:727-0:3635:181","b:1:2888-0:3635:181","b:1:2618-0:3635:181","b:1:2615-0:3635:181","b:1:3727-0:3635:181","b:1:2892-0:3635:181","b:1:2903-0:3635:181","b:1:2898-0:3635:181","0:3978","0:3987","0:3969","0:3916","0:3737","0:3922","0:3957","0:3694","0:3936","0:3912","0:3982","0:3929","0:3950","0:3973","0:3965","0:4001","0:4004","0:3962"]}}},"a:1:3111:246-0:2089:4918":{"id":"a:1:3111:246-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7555":{"id":"0:7555","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,9],"end":[111,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6577:335":{"id":"0:6577:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[141,4],"end":[143,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7392:4150":{"id":"a:1:31996:236-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4557:6876":{"id":"0:4557:6876","crate_id":0,"name":"binary_search_by","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2520,4],"end":[2534,5]},"visibility":"public","docs":"Binary searches this `VecDeque` with a comparator function.\n\nThe comparator function should return an order code that indicates\nwhether its argument is `Less`, `Equal` or `Greater` the desired\ntarget.\nIf the `VecDeque` is not sorted or if the comparator function does not\nimplement an order consistent with the sort order of the underlying\n`VecDeque`, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`] is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n[`Result::Err`] is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.\n\nSee also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n\n[`binary_search`]: VecDeque::binary_search\n[`binary_search_by_key`]: VecDeque::binary_search_by_key\n[`partition_point`]: VecDeque::partition_point\n\n# Examples\n\nLooks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n\nassert_eq!(deque.binary_search_by(|x| x.cmp(&13)),  Ok(9));\nassert_eq!(deque.binary_search_by(|x| x.cmp(&4)),   Err(7));\nassert_eq!(deque.binary_search_by(|x| x.cmp(&100)), Err(13));\nlet r = deque.binary_search_by(|x| x.cmp(&1));\nassert!(matches!(r, Ok(1..=4)));\n```","links":{"VecDeque::binary_search":"0:4555:6875","`Result::Err`":"1:41636:135","VecDeque::partition_point":"0:4568:6925","`Result::Ok`":"1:41633:192","VecDeque::binary_search_by_key":"0:4563:6908"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:741":{"id":"0:741","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[194,0],"end":[211,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:743:462","0:744:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4664-0:1255:1031":{"id":"0:4664-0:1255:1031","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[19,4],"end":[19,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"super::btree::map","name":"map","id":"0:1255:1031","glob":true}}},"0:7078:5451":{"id":"0:7078:5451","crate_id":0,"name":"as_mut_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1244,4],"end":[1246,5]},"visibility":"public","docs":"Extracts a mutable slice of the entire vector.\n\nEquivalent to `&mut s[..]`.\n\n# Examples\n\n```\nuse std::io::{self, Read};\nlet mut buffer = vec![0; 3];\nio::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"vec_as_slice\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:947":{"id":"0:947","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1432,0],"end":[1436,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:949:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3969":{"id":"0:3969","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2114,0],"end":[2119,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3972:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7537:780":{"id":"0:7537:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,31],"end":[59,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1752:3429":{"id":"0:1752:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1725,4],"end":[1727,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7604:678":{"id":"0:7604:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,16],"end":[161,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7625":{"id":"0:7625","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3504,9],"end":[3504,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7627:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:7436:4175":{"id":"a:1:3146:11953-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7290:651":{"id":"0:7290:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3227,4],"end":[3235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:2103:4931":{"id":"b:1:2892-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4498:2760":{"id":"0:4498:2760","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[907,4],"end":[919,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given deque. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows `usize`, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\nuse std::collections::VecDeque;\n\nfn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n    let mut output = VecDeque::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7336:810":{"id":"0:7336:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3364,4],"end":[3366,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and move `s`'s items into it.\n\n# Examples\n\n```\nassert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13152:18923":{"id":"1:13152:18923","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13153:8917"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43653:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1830:4776":{"id":"0:1830:4776","crate_id":0,"name":"ExtractIf","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1875,0],"end":[1888,1]},"visibility":"public","docs":"An iterator produced by calling `extract_if` on BTreeMap.","links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]","#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:3146:11953-0:1830:4776","a:1:32053:3459-0:1830:4776","a:1:3111:246-0:1830:4776","a:1:31996:236-0:1830:4776","a:1:41612:4469-0:1830:4776","a:1:41611:4468-0:1830:4776","b:1:8171-0:1830:4776","b:1:2888-0:1830:4776","b:1:2618-0:1830:4776","b:1:2615-0:1830:4776","b:1:3727-0:1830:4776","b:1:2892-0:1830:4776","b:1:2903-0:1830:4776","b:1:2898-0:1830:4776","0:1869","0:1851","0:1846"]}}},"0:447:810":{"id":"0:447:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1602,4],"end":[1607,5]},"visibility":"default","docs":"Converts a `Cow<'_, str>` into a `Box<str>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this\nconversion allocates on the heap and copies the\nunderlying `str`. Otherwise, it will try to reuse the owned\n`String`'s allocation.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nlet unboxed = Cow::Borrowed(\"hello\");\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```\n\n```rust\n# use std::borrow::Cow;\nlet unboxed = Cow::Owned(\"hello\".to_string());\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cow",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:922:974":{"id":"0:922:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1269,4],"end":[1271,5]},"visibility":"public","docs":"Returns the length of the binary heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 3]);\n\nassert_eq!(heap.len(), 2);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7169":{"id":"0:7169","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2680,0],"end":[2700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7172:11324"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7436:4175":{"id":"a:1:31996:236-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:3792:4918":{"id":"b:1:2892-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7567":{"id":"0:7567","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,47],"end":[111,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7568:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4354:974":{"id":"0:4354:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[161,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:977":{"id":"0:977","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1515,0],"end":[1527,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:980:172","0:981:1167","0:982:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:1577:4553":{"id":"b:1:2903-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4004":{"id":"0:4004","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2194,0],"end":[2194,70]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6197":{"id":"0:6197","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2111,0],"end":[2111,63]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"deref_pure_trait\", issue = \"87121\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefPure","id":"1:3337:3011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7172:11324":{"id":"0:7172:11324","crate_id":0,"name":"dedup","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2697,4],"end":[2699,5]},"visibility":"public","docs":"Removes consecutive repeated elements in the vector according to the\n[`PartialEq`] trait implementation.\n\nIf the vector is sorted, this removes all duplicates.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 2, 3, 2];\n\nvec.dedup();\n\nassert_eq!(vec, [1, 2, 3, 2]);\n```","links":{"`PartialEq`":"1:2665:200"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5426:5983":{"id":"0:5426:5983","crate_id":0,"name":"sort","span":{"filename":"library/alloc/src/slice.rs","begin":[207,4],"end":[212,5]},"visibility":"public","docs":"Sorts the slice.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn't allocate auxiliary memory.\nSee [`sort_unstable`](slice::sort_unstable).\n\n# Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by\n[timsort](https://en.wikipedia.org/wiki/Timsort).\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a\nnon-allocating insertion sort is used instead.\n\n# Examples\n\n```\nlet mut v = [-5, 4, 1, -3, 2];\n\nv.sort();\nassert!(v == [-5, -3, 1, 2, 4]);\n```","links":{"slice::sort_unstable":"1:12217:8804"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:4149:4509":{"id":"b:1:2898-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4167:3429":{"id":"0:4167:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[62,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:1518:4524":{"id":"a:1:3111:246-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3111:246-0:1546:4541":{"id":"a:1:3111:246-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4668-0:1428:99":{"id":"0:4668-0:1428:99","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[38,0],"end":[38,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"btree_map::BTreeMap","name":"BTreeMap","id":"0:1428:99","glob":false}}},"0:7965:1135":{"id":"0:7965:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[35,0],"end":[35,109]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4621:4175":{"id":"0:4621:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2806,4],"end":[2806,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:3941:2350":{"id":"0:3941:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2063,4],"end":[2065,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elem",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:7645:9281":{"id":"b:1:3727-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:2114:4932":{"id":"a:1:31996:236-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5745":{"id":"0:5745","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2064,0],"end":[2068,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5746:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5747":{"id":"0:5747","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2071,0],"end":[2075,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5748:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7330:810":{"id":"0:7330:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3348,4],"end":[3350,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n\n# Examples\n\n```\nassert_eq!(Vec::from(&mut [1, 2, 3]), vec![1, 2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"generic":"T"},"len":"N"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1568:209":{"id":"a:1:3146:11953-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:788:198":{"id":"0:788:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/borrow.rs","begin":[441,4],"end":[441,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"0:790":{"id":"0:790","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[452,0],"end":[460,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"1:3157:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:792:198","0:793:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1544:780":{"id":"0:1544:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[521,4],"end":[523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1586:780":{"id":"0:1586:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[604,4],"end":[607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3668":{"id":"0:3668","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[119,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3670:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4792:810":{"id":"0:4792:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[872,4],"end":[875,5]},"visibility":"default","docs":"Converts a [`CString`] into an <code>[Arc]<[CStr]></code> by moving the [`CString`]\ndata into a new [`Arc`] buffer.","links":{"`Arc`":"0:6007:71","Arc":"0:6007:71","CStr":"1:40050:106","`CString`":"0:7553:7100"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4859-1:10264:7842":{"id":"0:4859-1:10264:7842","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[592,20],"end":[592,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::LowerExp","name":"LowerExp","id":"1:10264:7842","glob":false}}},"0:4767":{"id":"0:4767","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[756,0],"end":[763,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_cow_cstr\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4769:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:972:311":{"id":"0:972:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1502,4],"end":[1504,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3838:917":{"id":"0:3838:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1507,4],"end":[1510,5]},"visibility":"public","docs":"Returns the cursor position index within the `LinkedList`.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4765":{"id":"0:4765","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[748,0],"end":[753,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4766:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:1830:4776":{"id":"a:1:41612:4469-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7349:810":{"id":"0:7349:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3441,4],"end":[3443,5]},"visibility":"default","docs":"Convert a vector into a boxed slice.\n\nBefore doing the conversion, this method discards excess capacity like [`Vec::shrink_to_fit`].\n\n[owned slice]: Box\n[`Vec::shrink_to_fit`]: Vec::shrink_to_fit\n\n# Examples\n\n```\nassert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n```\n\nAny excess capacity is removed:\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n```","links":{"Vec::shrink_to_fit":"0:7073:2775"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5092:610":{"id":"0:5092:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/rc.rs","begin":[2124,4],"end":[2126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6344":{"id":"0:6344","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3450,0],"end":[3474,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"B"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"","id":"0:723:249","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:6347:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3956:2350":{"id":"0:3956:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2087,4],"end":[2089,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elem",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1136:2350":{"id":"0:1136:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1872,4],"end":[1874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3787":{"id":"0:3787","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1309,0],"end":[1309,43]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3785":{"id":"0:3785","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1306,0],"end":[1306,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:4149:4509":{"id":"a:1:41612:4469-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5477:8844":{"id":"0:5477:8844","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[748,4],"end":[764,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sep",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597":{"id":"0:597","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2073,0],"end":[2077,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"boxed_slice_from_iter\", since = \"1.32.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"I"}}}],"bindings":[]}}}},"items":["0:599:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:648:3429":{"id":"0:648:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/boxed.rs","begin":[2189,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4264:7003":{"id":"0:4264:7003","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[186,4],"end":[196,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7247:933":{"id":"0:7247:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2979,4],"end":[2981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8167:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964":{"id":"0:964","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1475,0],"end":[1479,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:966:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3244:780":{"id":"0:3244:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6284":{"id":"0:6284","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3144,0],"end":[3230,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6287:1252","0:6288:1016","0:6289:973","0:6290:847","0:6291:829"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:1428:99":{"id":"a:1:32053:3459-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5312:8240":{"id":"0:5312:8240","crate_id":0,"name":"downgrade","span":{"filename":"library/alloc/src/rc.rs","begin":[3538,4],"end":[3545,5]},"visibility":"public","docs":"Creates a new weak reference to the `UniqueRc`\n\nAttempting to upgrade this weak reference will fail before the `UniqueRc` has been converted\nto a [`Rc`] using [`UniqueRc::into_rc`].","links":{"`Rc`":"0:4925:216","`UniqueRc::into_rc`":"0:5313:8678"},"attrs":["#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1943,0],"end":[1943,63]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"deref_pure_trait\", issue = \"87121\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefPure","id":"1:3337:3011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7724":{"id":"0:7724","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7729:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7150:11264":{"id":"0:7150:11264","crate_id":0,"name":"split_at_spare_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2470,4],"end":[2475,5]},"visibility":"public","docs":"Returns vector content as a slice of `T`, along with the remaining spare\ncapacity of the vector as a slice of `MaybeUninit<T>`.\n\nThe returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe [`set_len`] method.\n\n[`set_len`]: Vec::set_len\n\nNote that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a `Vec`\nyou can use [`push`], [`extend`], [`extend_from_slice`],\n[`extend_from_within`], [`insert`], [`append`], [`resize`] or\n[`resize_with`], depending on your exact needs.\n\n[`push`]: Vec::push\n[`extend`]: Vec::extend\n[`extend_from_slice`]: Vec::extend_from_slice\n[`extend_from_within`]: Vec::extend_from_within\n[`insert`]: Vec::insert\n[`append`]: Vec::append\n[`resize`]: Vec::resize\n[`resize_with`]: Vec::resize_with\n\n# Examples\n\n```\n#![feature(vec_split_at_spare)]\n\nlet mut v = vec![1, 1, 2];\n\n// Reserve additional space big enough for 10 elements.\nv.reserve(10);\n\nlet (init, uninit) = v.split_at_spare_mut();\nlet sum = init.iter().copied().sum::<u32>();\n\n// Fill in the next 4 elements.\nuninit[0].write(sum);\nuninit[1].write(sum * 2);\nuninit[2].write(sum * 3);\nuninit[3].write(sum * 4);\n\n// Mark the 4 elements of the vector as being initialized.\nunsafe {\n    let len = v.len();\n    v.set_len(len + 4);\n}\n\nassert_eq!(&v, &[1, 1, 2, 4, 8, 12, 16]);\n```","links":{"Vec::set_len":"0:7082:3916","Vec::extend_from_slice":"0:7156:8897","Vec::resize":"0:7155:6933","Vec::extend":"0:7251:3569","Vec::extend_from_within":"0:7157:9514","Vec::resize_with":"0:7145:6786","Vec::push":"0:7131:3980","Vec::insert":"0:7085:4498","Vec::append":"0:7136:3978"},"attrs":["#[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:729:3355":{"id":"0:729:3355","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[87,4],"end":[87,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7345:810":{"id":"0:7345:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3411,4],"end":[3413,5]},"visibility":"default","docs":"Convert a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.\n\n# Examples\n\n```\nlet b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\nassert_eq!(Vec::from(b), vec![1, 2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7280":{"id":"0:7280","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3214,0],"end":[3214,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:2114:4932":{"id":"b:1:2615-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6098:3065":{"id":"0:6098:3065","crate_id":0,"name":"try_new_uninit_in","span":{"filename":"library/alloc/src/sync.rs","begin":[880,4],"end":[891,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, in the provided allocator, returning an\nerror if allocation fails.\n\n# Examples\n\n```\n#![feature(new_uninit, allocator_api)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet mut five = Arc::<u32, _>::try_new_uninit_in(System)?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:783":{"id":"0:783","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[432,0],"end":[436,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:785:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123:2776":{"id":"0:123:2776","crate_id":0,"name":"shrink","span":{"filename":"library/alloc/src/alloc.rs","begin":[283,4],"end":[323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ptr",{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}],["old_layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:883:2679":{"id":"0:883:2679","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[460,4],"end":[462,5]},"visibility":"public","docs":"Creates an empty `BinaryHeap` with at least the specified capacity.\n\nThe binary heap will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the binary heap will not allocate.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::with_capacity(10);\nheap.push(4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5470:198":{"id":"0:5470:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[723,4],"end":[723,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:6007:71":{"id":"0:6007:71","crate_id":0,"name":"Arc","span":{"filename":"library/alloc/src/sync.rs","begin":[248,0],"end":[255,1]},"visibility":"public","docs":"A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\nReference Counted'.\n\nThe type `Arc<T>` provides shared ownership of a value of type `T`,\nallocated in the heap. Invoking [`clone`][clone] on `Arc` produces\na new `Arc` instance, which points to the same allocation on the heap as the\nsource `Arc`, while increasing a reference count. When the last `Arc`\npointer to a given allocation is destroyed, the value stored in that allocation (often\nreferred to as \"inner value\") is also dropped.\n\nShared references in Rust disallow mutation by default, and `Arc` is no\nexception: you cannot generally obtain a mutable reference to something\ninside an `Arc`. If you need to mutate through an `Arc`, use\n[`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]\ntypes.\n\n**Note**: This type is only available on platforms that support atomic\nloads and stores of pointers, which includes all platforms that support\nthe `std` crate but not all those which only support [`alloc`](crate).\nThis may be detected at compile time using `#[cfg(target_has_atomic = \"ptr\")]`.\n\n## Thread Safety\n\nUnlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference\ncounting. This means that it is thread-safe. The disadvantage is that\natomic operations are more expensive than ordinary memory accesses. If you\nare not sharing reference-counted allocations between threads, consider using\n[`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the\ncompiler will catch any attempt to send an [`Rc<T>`] between threads.\nHowever, a library might choose `Arc<T>` in order to give library consumers\nmore flexibility.\n\n`Arc<T>` will implement [`Send`] and [`Sync`] as long as the `T` implements\n[`Send`] and [`Sync`]. Why can't you put a non-thread-safe type `T` in an\n`Arc<T>` to make it thread-safe? This may be a bit counter-intuitive at\nfirst: after all, isn't the point of `Arc<T>` thread safety? The key is\nthis: `Arc<T>` makes it thread safe to have multiple ownership of the same\ndata, but it  doesn't add thread safety to its data. Consider\n<code>Arc<[RefCell\\<T>]></code>. [`RefCell<T>`] isn't [`Sync`], and if `Arc<T>` was always\n[`Send`], <code>Arc<[RefCell\\<T>]></code> would be as well. But then we'd have a problem:\n[`RefCell<T>`] is not thread safe; it keeps track of the borrowing count using\nnon-atomic operations.\n\nIn the end, this means that you may need to pair `Arc<T>` with some sort of\n[`std::sync`] type, usually [`Mutex<T>`][mutex].\n\n## Breaking cycles with `Weak`\n\nThe [`downgrade`][downgrade] method can be used to create a non-owning\n[`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d\nto an `Arc`, but this will return [`None`] if the value stored in the allocation has\nalready been dropped. In other words, `Weak` pointers do not keep the value\ninside the allocation alive; however, they *do* keep the allocation\n(the backing store for the value) alive.\n\nA cycle between `Arc` pointers will never be deallocated. For this reason,\n[`Weak`] is used to break cycles. For example, a tree could have\nstrong `Arc` pointers from parent nodes to children, and [`Weak`]\npointers from children back to their parents.\n\n# Cloning references\n\nCreating a new reference from an existing reference-counted pointer is done using the\n`Clone` trait implemented for [`Arc<T>`][Arc] and [`Weak<T>`][Weak].\n\n```\nuse std::sync::Arc;\nlet foo = Arc::new(vec![1.0, 2.0, 3.0]);\n// The two syntaxes below are equivalent.\nlet a = foo.clone();\nlet b = Arc::clone(&foo);\n// a, b, and foo are all Arcs that point to the same memory location\n```\n\n## `Deref` behavior\n\n`Arc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\nso you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\nclashes with `T`'s methods, the methods of `Arc<T>` itself are associated\nfunctions, called using [fully qualified syntax]:\n\n```\nuse std::sync::Arc;\n\nlet my_arc = Arc::new(());\nlet my_weak = Arc::downgrade(&my_arc);\n```\n\n`Arc<T>`'s implementations of traits like `Clone` may also be called using\nfully qualified syntax. Some people prefer to use fully qualified syntax,\nwhile others prefer using method-call syntax.\n\n```\nuse std::sync::Arc;\n\nlet arc = Arc::new(());\n// Method-call syntax\nlet arc2 = arc.clone();\n// Fully qualified syntax\nlet arc3 = Arc::clone(&arc);\n```\n\n[`Weak<T>`][Weak] does not auto-dereference to `T`, because the inner value may have\nalready been dropped.\n\n[`Rc<T>`]: crate::rc::Rc\n[clone]: Clone::clone\n[mutex]: ../../std/sync/struct.Mutex.html\n[rwlock]: ../../std/sync/struct.RwLock.html\n[atomic]: core::sync::atomic\n[downgrade]: Arc::downgrade\n[upgrade]: Weak::upgrade\n[RefCell\\<T>]: core::cell::RefCell\n[`RefCell<T>`]: core::cell::RefCell\n[`std::sync`]: ../../std/sync/index.html\n[`Arc::clone(&from)`]: Arc::clone\n[fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\n\n# Examples\n\nSharing some immutable data between threads:\n\n```no_run\nuse std::sync::Arc;\nuse std::thread;\n\nlet five = Arc::new(5);\n\nfor _ in 0..10 {\n    let five = Arc::clone(&five);\n\n    thread::spawn(move || {\n        println!(\"{five:?}\");\n    });\n}\n```\n\nSharing a mutable [`AtomicUsize`]:\n\n[`AtomicUsize`]: core::sync::atomic::AtomicUsize \"sync::atomic::AtomicUsize\"\n\n```no_run\nuse std::sync::Arc;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\n\nlet val = Arc::new(AtomicUsize::new(5));\n\nfor _ in 0..10 {\n    let val = Arc::clone(&val);\n\n    thread::spawn(move || {\n        let v = val.fetch_add(1, Ordering::Relaxed);\n        println!(\"{v:?}\");\n    });\n}\n```\n\nSee the [`rc` documentation][rc_examples] for more examples of reference\ncounting in general.\n\n[rc_examples]: crate::rc#examples","links":{"Clone::clone":"1:2632:462","Weak::upgrade":"0:6247:8595","Arc":"0:6007:71","`Deref`":"1:3319:124","core::sync::atomic::AtomicUsize":"1:42072:97","`Sync`":"1:3111:246","`None`":"1:41519:190","`Send`":"1:31996:236","core::cell::RefCell":"1:4613:220","core::sync::atomic":"1:9711:375","crate::rc::Rc":"0:4925:216","`Weak`":"0:6039:8069","Arc::downgrade":"0:6136:8240","Weak":"0:6039:8069","crate::rc#examples":"0:4869:2402","crate":"0:0:307"},"attrs":["#[rustc_diagnostic_item = \"Arc\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:6070","0:6086","0:6104","0:6110","0:6117","0:6121","0:6125","0:6130","0:6202","0:6208","0:6218","a:1:3146:11953-0:6007:71","a:1:41612:4469-0:6007:71","b:0:5854-0:6007:71","b:0:727-0:6007:71","b:1:2888-0:6007:71","b:1:2618-0:6007:71","b:1:2615-0:6007:71","b:1:3727-0:6007:71","b:1:2892-0:6007:71","b:1:2895-0:6007:71","b:1:2903-0:6007:71","b:1:2898-0:6007:71","0:6214","0:4791","0:6016","0:6292","0:6279","0:6319","0:4793","0:6197","0:6311","0:6340","0:6372","0:6386","0:6026","0:6284","0:6344","0:6192","0:6322","0:6348","0:6013","0:6307","0:6299","0:6336","0:6296","0:6376","0:6332","0:6314","0:6334","0:6022","0:6357","0:6019","0:6303","0:6188","0:6350","0:6329","0:6405","0:6380","0:6408"]}}},"0:6704":{"id":"0:6704","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[186,0],"end":[190,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_intoiter_as_ref\", since = \"1.46.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6707:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:419:3320":{"id":"0:419:3320","crate_id":0,"name":"write_isize","span":{"filename":"library/alloc/src/boxed.rs","begin":[1435,4],"end":[1437,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"isize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3351:4222":{"id":"0:3351:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[952,4],"end":[958,5]},"visibility":"public","docs":"If the set contains an element equal to the value, removes it from the\nset and drops it. Returns whether such an element was present.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:218:3019":{"id":"a:1:41612:4469-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5374-1:11048:4057":{"id":"0:5374-1:11048:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[63,22],"end":[63,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::Iter","name":"Iter","id":"1:11048:4057","glob":false}}},"0:2183:5036":{"id":"0:2183:5036","crate_id":0,"name":"remove_prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3388,4],"end":[3390,5]},"visibility":"public","docs":"Removes the precending element from the `BTreeMap`.\n\nThe element that was removed is returned. The cursor position is\nunchanged (after the removed element).","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4840-1:10268:2895":{"id":"0:4840-1:10268:2895","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[582,20],"end":[582,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::write","name":"write","id":"1:10268:2895","glob":false}}},"a:1:3111:246-0:7714:4776":{"id":"a:1:3111:246-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3587:4798":{"id":"0:3587:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1812,4],"end":[1814,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3871:6196":{"id":"0:3871:6196","crate_id":0,"name":"back_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1910,4],"end":[1912,5]},"visibility":"public","docs":"Provides a mutable reference to back element of the cursor's parent\nlist, or `None` if the list is empty.\n\n# Examples\nBuilding and mutating a list with a cursor, then getting the back element:\n```\n#![feature(linked_list_cursors)]\nuse std::collections::LinkedList;\nlet mut dl = LinkedList::new();\ndl.push_front(3);\ndl.push_front(2);\ndl.push_front(1);\nlet mut cursor = dl.cursor_front_mut();\n*cursor.current().unwrap() = 99;\n*cursor.back_mut().unwrap() = 0;\nlet mut contents = dl.into_iter();\nassert_eq!(contents.next(), Some(99));\nassert_eq!(contents.next(), Some(2));\nassert_eq!(contents.next(), Some(0));\nassert_eq!(contents.next(), None);\n```","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[611,0],"end":[732,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:325:3113","0:326:3118","0:327:3123","0:328:3128"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5181":{"id":"0:5181","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2567,0],"end":[2582,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5184:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:830:3912":{"id":"b:1:2888-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1445":{"id":"0:1445","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[207,0],"end":[290,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1449:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5171:810":{"id":"0:5171:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2503,4],"end":[2505,5]},"visibility":"default","docs":"Converts a [`[T; N]`](prim@array) into an `Rc<[T]>`.\n\nThe conversion moves the array into a newly allocated `Rc`.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: [i32; 3] = [1, 2, 3];\nlet shared: Rc<[i32]> = Rc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{"prim@array":"1:52082:333"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5884":{"id":"0:5884","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2715,0],"end":[2723,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_mut_str_for_string\", since = \"1.44.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5885:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5882":{"id":"0:5882","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2703,0],"end":[2711,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5883:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6423:10447":{"id":"0:6423:10447","crate_id":0,"name":"wake_by_ref","span":{"filename":"library/alloc/src/task.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":"Wake this task without consuming the local waker.\n\nIf an executor supports a cheaper way to wake without consuming the\nwaker, it should override this method. By default, it clones the\n[`Rc`] and calls [`wake`] on the clone.\n\n[`wake`]: LocalWaker::wake","links":{"`Rc`":"0:4925:216","LocalWaker::wake":"1:13668:10441"},"attrs":["#[unstable(feature = \"local_waker\", issue = \"118959\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6375:2400":{"id":"0:6375:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/sync.rs","begin":[3597,4],"end":[3599,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7907":{"id":"0:7907","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[23,0],"end":[23,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A1","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A1"}}],"bindings":[]}}}},"items":["0:7912:678","0:7913:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118:2718":{"id":"0:118:2718","crate_id":0,"name":"allocate","span":{"filename":"library/alloc/src/alloc.rs","begin":[242,4],"end":[244,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3335:3917":{"id":"0:3335:3917","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[634,4],"end":[640,5]},"visibility":"public","docs":"Returns a reference to the element in the set, if any, that is equal to\nthe value.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```","links":{},"attrs":["#[stable(feature = \"set_recovery\", since = \"1.9.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1615:4637":{"id":"0:1615:4637","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[946,4],"end":[956,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:2103:4931":{"id":"a:1:31996:236-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4653":{"id":"0:4653","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2882,0],"end":[2928,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::vec::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4656:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7233:933":{"id":"0:7233:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2947,4],"end":[2961,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.\n\n# Examples\n\n```\nlet v = vec![\"a\".to_string(), \"b\".to_string()];\nlet mut v_iter = v.into_iter();\n\nlet first_element: Option<String> = v_iter.next();\n\nassert_eq!(first_element, Some(\"a\".to_string()));\nassert_eq!(v_iter.next(), Some(\"b\".to_string()));\nassert_eq!(v_iter.next(), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8167:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7089:4049":{"id":"0:7089:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1652,4],"end":[1657,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3, 4];\nvec.retain(|&x| x % 2 == 0);\nassert_eq!(vec, [2, 4]);\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\nlet mut vec = vec![1, 2, 3, 4, 5];\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\nvec.retain(|_| *iter.next().unwrap());\nassert_eq!(vec, [2, 3, 5]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3337:5878":{"id":"0:3337:5878","crate_id":0,"name":"is_disjoint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[661,4],"end":[666,5]},"visibility":"public","docs":"Returns `true` if `self` has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet mut b = BTreeSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3981:780":{"id":"0:3981:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2145,4],"end":[2147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1637,0],"end":[1651,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_array\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:455:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4161":{"id":"0:4161","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[32,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4164:172","0:4165:1167","0:4166:6996","0:4167:3429","0:4168:3434","0:4171:6999","0:4175:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4532:6209":{"id":"0:4532:6209","crate_id":0,"name":"pop_front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1610,4],"end":[1619,5]},"visibility":"public","docs":"Removes the first element and returns it, or `None` if the deque is\nempty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_back(1);\nd.push_back(2);\n\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7614":{"id":"0:7614","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,16],"end":[227,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4534:6200":{"id":"0:4534:6200","crate_id":0,"name":"push_front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1658,4],"end":[1669,5]},"visibility":"public","docs":"Prepends an element to the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_front(1);\nd.push_front(2);\nassert_eq!(d.front(), Some(&2));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1750:1167":{"id":"0:1750:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1720,4],"end":[1723,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7730:10536":{"id":"a:1:3146:11953-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5703:3980":{"id":"0:5703:3980","crate_id":0,"name":"push","span":{"filename":"library/alloc/src/string.rs","begin":[1358,4],"end":[1363,5]},"visibility":"public","docs":"Appends the given [`char`] to the end of this `String`.\n\n# Examples\n\n```\nlet mut s = String::from(\"abc\");\n\ns.push('1');\ns.push('2');\ns.push('3');\n\nassert_eq!(\"abc123\", s);\n```","links":{"`char`":"1:52078:458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ch",{"primitive":"char"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:3113":{"id":"0:325:3113","crate_id":0,"name":"new_uninit_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[635,4],"end":[637,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut values = Box::<[u32]>::new_uninit_slice(3);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13246:28319":{"id":"1:13246:28319","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5672:9382":{"id":"0:5672:9382","crate_id":0,"name":"from_utf16","span":{"filename":"library/alloc/src/string.rs","begin":[684,4],"end":[696,5]},"visibility":"public","docs":"Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]\nif `v` contains any invalid data.\n\n# Examples\n\n```\n// 𝄞music\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0x0073, 0x0069, 0x0063];\nassert_eq!(String::from(\"𝄞music\"),\n           String::from_utf16(v).unwrap());\n\n// 𝄞mu<invalid>ic\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0xD800, 0x0069, 0x0063];\nassert!(String::from_utf16(v).is_err());\n```","links":{"`Err`":"1:41636:135"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5678:9415":{"id":"0:5678:9415","crate_id":0,"name":"from_utf16le_lossy","span":{"filename":"library/alloc/src/string.rs","begin":[791,4],"end":[803,5]},"visibility":"public","docs":"Decode a UTF-16LE–encoded slice `v` into a `String`, replacing\ninvalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n\nUnlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n`from_utf16le_lossy` returns a `String` since the UTF-16 to UTF-8\nconversion requires a memory allocation.\n\n[`from_utf8_lossy`]: String::from_utf8_lossy\n[`Cow<'a, str>`]: crate::borrow::Cow \"borrow::Cow\"\n[U+FFFD]: core::char::REPLACEMENT_CHARACTER\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(str_from_utf16_endian)]\n// 𝄞mus<invalid>ic<invalid>\nlet v = &[0x34, 0xD8, 0x1E, 0xDD, 0x6d, 0x00, 0x75, 0x00,\n          0x73, 0x00, 0x1E, 0xDD, 0x69, 0x00, 0x63, 0x00,\n          0x34, 0xD8];\n\nassert_eq!(String::from(\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"),\n           String::from_utf16le_lossy(v));\n```","links":{"core::char::REPLACEMENT_CHARACTER":"1:4973:9397","String::from_utf8_lossy":"0:5670:7436","crate::borrow::Cow":"0:732:118"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"str_from_utf16_endian\", issue = \"116258\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:902:4038":{"id":"0:902:4038","crate_id":0,"name":"drain_sorted","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[896,4],"end":[898,5]},"visibility":"public","docs":"Clears the binary heap, returning an iterator over the removed elements\nin heap order. If the iterator is dropped before being fully consumed,\nit drops the remaining elements in heap order.\n\nThe returned iterator keeps a mutable borrow on the heap to optimize\nits implementation.\n\nNote:\n* `.drain_sorted()` is *O*(*n* \\* log(*n*)); much slower than `.drain()`.\n  You should use the latter for most cases.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_drain_sorted)]\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from([1, 2, 3, 4, 5]);\nassert_eq!(heap.len(), 5);\n\ndrop(heap.drain_sorted()); // removes all elements in heap order\nassert_eq!(heap.len(), 0);\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6130":{"id":"0:6130","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1467,0],"end":[1836,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6133:3225","0:6134:334","0:6135:2710","0:6136:8240","0:6137:8248","0:6138:8123","0:6139:8206","0:6140:8214","0:6143:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13255:29497":{"id":"1:13255:29497","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4904:29497"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43696:8932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5856:1730":{"id":"0:5856:1730","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2552,4],"end":[2559,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7670":{"id":"0:7670","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2346,0],"end":[2346,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7673:678","0:7674:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:915:2769":{"id":"0:915:2769","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1120,4],"end":[1122,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional` elements\nmore than the current length. Unlike [`try_reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `try_reserve_exact`, capacity will be greater than or\nequal to `self.len() + additional` if it returns `Ok(())`.\nDoes nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: BinaryHeap::try_reserve\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\nuse std::collections::TryReserveError;\n\nfn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n    let mut heap = BinaryHeap::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    heap.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    heap.extend(data.iter());\n\n    Ok(heap.pop())\n}\n# find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{"BinaryHeap::try_reserve":"0:916:2760"},"attrs":["#[stable(feature = \"try_reserve_2\", since = \"1.63.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3972:469":{"id":"0:3972:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2116,4],"end":[2118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5147":{"id":"0:5147","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2439,0],"end":[2443,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5150:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6137:8248":{"id":"0:6137:8248","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1673,4],"end":[1678,5]},"visibility":"public","docs":"Gets the number of [`Weak`] pointers to this allocation.\n\n# Safety\n\nThis method by itself is safe, but using it correctly requires extra care.\nAnother thread can change the weak count at any time,\nincluding potentially between calling this method and acting on the result.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\nlet _weak_five = Arc::downgrade(&five);\n\n// This assertion is deterministic because we haven't shared\n// the `Arc` or `Weak` between threads.\nassert_eq!(1, Arc::weak_count(&five));\n```","links":{"`Weak`":"0:6039:8069"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"arc_counts\", since = \"1.15.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:3648:4057":{"id":"b:1:2618-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1036:311":{"id":"0:1036:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1655,4],"end":[1657,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1102":{"id":"0:1102","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1791,0],"end":[1799,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::vec::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1105:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5184:810":{"id":"0:5184:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2579,4],"end":[2581,5]},"visibility":"default","docs":"Move a boxed object to a new, reference counted, allocation.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: Box<i32> = Box::new(1);\nlet shared: Rc<i32> = Rc::from(original);\nassert_eq!(1, *shared);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:848:610":{"id":"0:848:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[329,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:925:4152":{"id":"0:925:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1343,4],"end":[1345,5]},"visibility":"public","docs":"Drops all items from the binary heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::from([1, 3]);\n\nassert!(!heap.is_empty());\n\nheap.clear();\n\nassert!(heap.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6218":{"id":"0:6218","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2467,0],"end":[2539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6220:3409","0:6222:3411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5803:2350":{"id":"0:5803:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2252,4],"end":[2254,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["s",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:4074:4150":{"id":"a:1:41611:4468-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31996:236-0:1568:209":{"id":"a:1:31996:236-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1042:3429":{"id":"0:1042:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1670,4],"end":[1672,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1979:462":{"id":"0:1979:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2181,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3505:974":{"id":"0:3505:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1546,4],"end":[1548,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3814":{"id":"0:3814","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1375,0],"end":[1379,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3817:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:7444:209":{"id":"a:1:32053:3459-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13249:28321":{"id":"1:13249:28321","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:33075"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1397:5098":{"id":"0:1397:5098","crate_id":0,"name":"or_default","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[289,4],"end":[294,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default value if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();\nmap.entry(\"poneyland\").or_default();\n\nassert_eq!(map[\"poneyland\"], None);\n```","links":{},"attrs":["#[stable(feature = \"entry_or_default\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:3792:4918":{"id":"b:1:2618-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4694:419":{"id":"0:4694:419","crate_id":0,"name":"c_str","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1,0],"end":[1144,1]},"visibility":"public","docs":"[`CString`] and its related types.","links":{"`CString`":"0:7553:7100"},"attrs":["#[unstable(feature = \"c_str_module\", issue = \"112134\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:7553:7100","0:7569:7099","0:7597:7097","0:7609:7098"],"is_stripped":false}}},"0:570:424":{"id":"0:570:424","crate_id":0,"name":"call","span":{"filename":"library/alloc/src/boxed.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["args",{"generic":"Args"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3358:141","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}}},"0:7924:678":{"id":"0:7924:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[25,0],"end":[25,103]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5619:9042":{"id":"0:5619:9042","crate_id":0,"name":"to_uppercase","span":{"filename":"library/alloc/src/str.rs","begin":[459,4],"end":[484,5]},"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"0:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7472:4175":{"id":"b:1:2903-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4806":{"id":"0:4806","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[968,0],"end":[979,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4807:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2050":{"id":"0:2050","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2312,0],"end":[2316,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2054:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4963:8067":{"id":"0:4963:8067","crate_id":0,"name":"new_cyclic","span":{"filename":"library/alloc/src/rc.rs","begin":[457,4],"end":[497,5]},"visibility":"public","docs":"Constructs a new `Rc<T>` while giving you a `Weak<T>` to the allocation,\nto allow you to construct a `T` which holds a weak pointer to itself.\n\nGenerally, a structure circularly referencing itself, either directly or\nindirectly, should not hold a strong reference to itself to prevent a memory leak.\nUsing this function, you get access to the weak pointer during the\ninitialization of `T`, before the `Rc<T>` is created, such that you can\nclone and store it inside the `T`.\n\n`new_cyclic` first allocates the managed allocation for the `Rc<T>`,\nthen calls your closure, giving it a `Weak<T>` to this allocation,\nand only afterwards completes the construction of the `Rc<T>` by placing\nthe `T` returned from your closure into the allocation.\n\nSince the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\nreturns, calling [`upgrade`] on the weak reference inside your closure will\nfail and result in a `None` value.\n\n# Panics\n\nIf `data_fn` panics, the panic is propagated to the caller, and the\ntemporary [`Weak<T>`] is dropped normally.\n\n# Examples\n\n```\n# #![allow(dead_code)]\nuse std::rc::{Rc, Weak};\n\nstruct Gadget {\n    me: Weak<Gadget>,\n}\n\nimpl Gadget {\n    /// Construct a reference counted Gadget.\n    fn new() -> Rc<Self> {\n        // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n        // `Rc` we're constructing.\n        Rc::new_cyclic(|me| {\n            // Create the actual struct here.\n            Gadget { me: me.clone() }\n        })\n    }\n\n    /// Return a reference counted pointer to Self.\n    fn me(&self) -> Rc<Self> {\n        self.me.upgrade().unwrap()\n    }\n}\n```\n[`upgrade`]: Weak::upgrade","links":{"`Weak<T>`":"0:5217:8069","Weak::upgrade":"0:5258:8595"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_fn",{"generic":"F"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5920:1911":{"id":"0:5920:1911","crate_id":0,"name":"write_str","span":{"filename":"library/alloc/src/string.rs","begin":[2914,4],"end":[2917,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3271:5793":{"id":"b:1:2898-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:374:462":{"id":"0:374:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/boxed.rs","begin":[1301,4],"end":[1308,5]},"visibility":"default","docs":"Returns a new box with a `clone()` of this box's contents.\n\n# Examples\n\n```\nlet x = Box::new(5);\nlet y = x.clone();\n\n// The value is the same\nassert_eq!(x, y);\n\n// But they are unique objects\nassert_ne!(&*x as *const i32, &*y as *const i32);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2026":{"id":"0:2026","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2278,0],"end":[2283,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:2029:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:830:3912":{"id":"b:1:2898-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:2719":{"id":"0:119:2719","crate_id":0,"name":"allocate_zeroed","span":{"filename":"library/alloc/src/alloc.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1980":{"id":"0:1980","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2187,0],"end":[2211,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1984:172","0:1985:1167","0:1986:3431","0:1987:4798","0:1988:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120:2789":{"id":"0:120:2789","crate_id":0,"name":"deallocate","span":{"filename":"library/alloc/src/alloc.rs","begin":[252,4],"end":[258,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ptr",{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7417:678":{"id":"0:7417:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,16],"end":[3396,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7562":{"id":"0:7562","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,36],"end":[111,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7563:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3111:246-0:830:3912":{"id":"a:1:3111:246-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:7655:9289":{"id":"a:1:41612:4469-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13233:29492":{"id":"1:13233:29492","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3561":{"id":"0:3561","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1729,0],"end":[1729,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7558":{"id":"0:7558","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,20],"end":[111,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7559:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1805:1167":{"id":"0:1805:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1821,4],"end":[1823,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7597:7097":{"id":"a:1:3146:11953-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:5217:8069":{"id":"b:1:2888-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:1465:4057":{"id":"b:1:2903-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2173":{"id":"0:2173","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3307,0],"end":[3391,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2178:5012","0:2179:5020","0:2180:5025","0:2181:5027","0:2182:5031","0:2183:5036"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6762:651":{"id":"0:6762:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[427,4],"end":[447,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1536:4534":{"id":"b:1:2888-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5599":{"id":"0:5599","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[207,0],"end":[219,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:5600:3355","0:5601:3587","0:5602:3595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1495:60":{"id":"0:1495:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":"Creates an empty `btree_map::IterMut`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::IterMut<'_, u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2109":{"id":"0:2109","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2830,0],"end":[2834,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2113:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5597":{"id":"0:5597","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"string_borrow_mut\", since = \"1.36.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::string::String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5598:3455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6483":{"id":"0:6483","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[42,0],"end":[52,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6487:311"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6578":{"id":"0:6578","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[147,0],"end":[147,69]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4571":{"id":"0:4571","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2644,0],"end":[2675,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4574:6933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1910,0],"end":[1914,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:500:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:952:462":{"id":"0:952:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1441,4],"end":[1443,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:1356:4373":{"id":"b:1:2903-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:4309:4057":{"id":"b:1:3727-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:5922:4150":{"id":"b:1:2618-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7532":{"id":"0:7532","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,16],"end":[59,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7533:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:4149:4509":{"id":"b:1:3727-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3551":{"id":"0:3551","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1697,0],"end":[1701,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3553:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1385,0],"end":[1385,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5453:8837":{"id":"0:5453:8837","crate_id":0,"name":"Concat","span":{"filename":"library/alloc/src/slice.rs","begin":[683,0],"end":[691,1]},"visibility":"public","docs":"Helper trait for [`[T]::concat`](slice::concat).\n\nNote: the `Item` type parameter is not used in this trait,\nbut it allows impls to be more generic.\nWithout it, we get this error:\n\n```error\nerror[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predica\n   --> library/alloc/src/slice.rs:608:6\n    |\n608 | impl<T: Clone, V: Borrow<[T]>> Concat for [V] {\n    |      ^ unconstrained type parameter\n```\n\nThis is because there could exist `V` types with multiple `Borrow<[_]>` impls,\nsuch that multiple `T` types would apply:\n\n```\n# #[allow(dead_code)]\npub struct Foo(Vec<u32>, Vec<String>);\n\nimpl std::borrow::Borrow<[u32]> for Foo {\n    fn borrow(&self) -> &[u32] { &self.0 }\n}\n\nimpl std::borrow::Borrow<[String]> for Foo {\n    fn borrow(&self) -> &[String] { &self.1 }\n}\n```","links":{"slice::concat":"0:5444:487"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:5455:198","0:5456:487"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:5578","0:5461"]}}},"0:3567":{"id":"0:3567","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1748,0],"end":[1786,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3571:172","0:3572:1167","0:3573:3429","0:3574:4798"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4586:1252":{"id":"0:4586:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2739,4],"end":[2741,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5605:4230":{"id":"0:5605:4230","crate_id":0,"name":"replace","span":{"filename":"library/alloc/src/str.rs","begin":[271,4],"end":[281,5]},"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"0:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:1527:4528":{"id":"b:0:727-0:1527:4528","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1126:3569":{"id":"0:1126:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1849,4],"end":[1852,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1512:780":{"id":"0:1512:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[447,4],"end":[449,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4837-1:42530:136":{"id":"0:4837-1:42530:136","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[578,0],"end":[578,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Error","name":"Error","id":"1:42530:136","glob":false}}},"0:5443:8830":{"id":"0:5443:8830","crate_id":0,"name":"repeat","span":{"filename":"library/alloc/src/slice.rs","begin":[489,4],"end":[545,5]},"visibility":"public","docs":"Creates a vector by copying a slice `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nb\"0123456789abcdef\".repeat(usize::MAX);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:3792:4918":{"id":"b:1:2903-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7627:780":{"id":"0:7627:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[3504,9],"end":[3504,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7380:4065":{"id":"b:0:727-0:7380:4065","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3310":{"id":"0:3310","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[311,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3312:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3926:172":{"id":"0:3926:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2038,4],"end":[2038,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:1:3727-0:1428:99":{"id":"b:1:3727-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:2617":{"id":"0:127:2617","crate_id":0,"name":"handle_alloc_error","span":{"filename":"library/alloc/src/alloc.rs","begin":[377,0],"end":[396,1]},"visibility":"public","docs":"Signal a memory allocation error.\n\nCallers of memory allocation APIs wishing to cease execution\nin response to an allocation error are encouraged to call this function,\nrather than directly invoking [`panic!`] or similar.\n\nThis function is guaranteed to diverge (not return normally with a value), but depending on\nglobal configuration, it may either panic (resulting in unwinding or aborting as per\nconfiguration for all panics), or abort the process (with no unwinding).\n\nThe default behavior is:\n\n * If the binary links against `std` (typically the case), then\n  print a message to standard error and abort the process.\n  This behavior can be replaced with [`set_alloc_error_hook`] and [`take_alloc_error_hook`].\n  Future versions of Rust may panic by default instead.\n\n* If the binary does not link against `std` (all of its crates are marked\n  [`#![no_std]`][no_std]), then call [`panic!`] with a message.\n  [The panic handler] applies as to any panic.\n\n[`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n[`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html\n[The panic handler]: https://doc.rust-lang.org/reference/runtime.html#the-panic_handler-attribute\n[no_std]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute","links":{"`panic!`":"1:4:1231"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[rustc_const_unstable(feature = \"const_alloc_error\", issue = \"92523\")]","#[cfg(all(not(no_global_oom_handling), not(test)))]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"primitive":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7444:209":{"id":"a:1:3111:246-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4987:3070":{"id":"0:4987:3070","crate_id":0,"name":"try_new_zeroed_in","span":{"filename":"library/alloc/src/rc.rs","begin":[869,4],"end":[880,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, in the provided allocator, returning an error if the allocation\nfails\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet zero = Rc::<u32, _>::try_new_zeroed_in(System)?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:5217:8069":{"id":"b:1:2615-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:630:227":{"id":"0:630:227","crate_id":0,"name":"Return","span":{"filename":"library/alloc/src/boxed.rs","begin":[2152,4],"end":[2152,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"G"},"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}}},"b:1:2615-0:7655:9289":{"id":"b:1:2615-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:5217:8069":{"id":"b:1:2903-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7232:4175":{"id":"0:7232:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2928,4],"end":[2928,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"1:13215:29486":{"id":"1:13215:29486","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4628:4175":{"id":"0:4628:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2816,4],"end":[2816,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:1:3727-0:2114:4932":{"id":"b:1:3727-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1696:2785":{"id":"0:1696:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1597,4],"end":[1602,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:43922:9745":{"id":"1:43922:9745","crate_id":1,"name":"is_prefix_of","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:474:1755":{"id":"0:474:1755","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1714,4],"end":[1721,5]},"visibility":"default","docs":"Attempts to convert a `Vec<T>` into a `Box<[T; N]>`.\n\nLike [`Vec::into_boxed_slice`], this is in-place if `vec.capacity() == N`,\nbut will require a reallocation otherwise.\n\n# Errors\n\nReturns the original `Vec<T>` in the `Err` variant if\n`boxed_slice.len()` does not equal `N`.\n\n# Examples\n\nThis can be used with [`vec!`] to create an array on the heap:\n\n```\nlet state: Box<[f32; 100]> = vec![1.0; 100].try_into().unwrap();\nassert_eq!(state.len(), 100);\n```","links":{"`Vec::into_boxed_slice`":"0:7075:3096","`vec!`":"0:5:1877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2872:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6429:810":{"id":"0:6429:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/task.rs","begin":[303,4],"end":[305,5]},"visibility":"default","docs":"Use a `Wake`-able type as a `RawWaker`.\n\nNo heap allocations or atomic operations are used for this conversion.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["waker",{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"RawWaker","id":"1:44348:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1638:4683":{"id":"0:1638:4683","crate_id":0,"name":"extract_if","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1391,4],"end":[1398,5]},"visibility":"public","docs":"Creates an iterator that visits all elements (key-value pairs) in\nascending key order and uses a closure to determine if an element should\nbe removed. If the closure returns `true`, the element is removed from\nthe map and yielded. If the closure returns `false`, or panics, the\nelement remains in the map and will not be yielded.\n\nThe iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse [`retain`] with a negated predicate if you do not need the returned iterator.\n\n[`retain`]: BTreeMap::retain\n\n# Examples\n\nSplitting a map into even and odd keys, reusing the original map:\n\n```\n#![feature(btree_extract_if)]\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\nlet evens: BTreeMap<_, _> = map.extract_if(|k, _v| k % 2 == 0).collect();\nlet odds = map;\nassert_eq!(evens.keys().copied().collect::<Vec<_>>(), [0, 2, 4, 6]);\nassert_eq!(odds.keys().copied().collect::<Vec<_>>(), [1, 3, 5, 7]);\n```","links":{"BTreeMap::retain":"0:1624:4049"},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pred",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1546:4541":{"id":"0:1546:4541","crate_id":0,"name":"IntoKeys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[534,0],"end":[536,1]},"visibility":"public","docs":"An owning iterator over the keys of a `BTreeMap`.\n\nThis `struct` is created by the [`into_keys`] method on [`BTreeMap`].\nSee its documentation for more.\n\n[`into_keys`]: BTreeMap::into_keys","links":{"BTreeMap::into_keys":"0:1641:4787","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1546:4541","a:1:32053:3459-0:1546:4541","a:1:3111:246-0:1546:4541","a:1:31996:236-0:1546:4541","a:1:41612:4469-0:1546:4541","a:1:41611:4468-0:1546:4541","b:1:8171-0:1546:4541","b:1:2888-0:1546:4541","b:1:2618-0:1546:4541","b:1:2615-0:1546:4541","b:1:3727-0:1546:4541","b:1:2892-0:1546:4541","b:1:2903-0:1546:4541","b:1:2898-0:1546:4541","0:1908","0:1551","0:1930","0:1919","0:1934","0:1925"]}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1517,0],"end":[1535,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:440:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7943:1135":{"id":"0:7943:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[28,0],"end":[28,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5444:487":{"id":"0:5444:487","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/slice.rs","begin":[557,4],"end":[562,5]},"visibility":"public","docs":"Flattens a slice of `T` into a single value `Self::Output`.\n\n# Examples\n\n```\nassert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");\nassert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"Concat","id":"0:5453:8837","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Concat","id":"0:5453:8837","args":{"angle_bracketed":{"args":[{"type":{"generic":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1536:4534":{"id":"a:1:31996:236-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4124:1167":{"id":"0:4124:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[241,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4764:60":{"id":"0:4764:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[741,4],"end":[744,5]},"visibility":"default","docs":"Creates an empty `CString`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6227":{"id":"0:6227","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2569,0],"end":[2597,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6230:2669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:7412:5026":{"id":"a:1:41612:4469-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:2114:4932":{"id":"a:1:32053:3459-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7058:3544":{"id":"0:7058:3544","crate_id":0,"name":"from_raw_parts","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[603,4],"end":[605,5]},"visibility":"public","docs":"Creates a `Vec<T>` directly from a pointer, a length, and a capacity.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `ptr` must have been allocated using the global allocator, such as via\n  the [`alloc::alloc`] function.\n* `T` needs to have the same alignment as what `ptr` was allocated with.\n  (`T` having a less strict alignment is not sufficient, the alignment really\n  needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n  allocated and deallocated with the same layout.)\n* The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n  to be the same size as the pointer was allocated with. (Because similar to\n  alignment, [`dealloc`] must be called with the same layout `size`.)\n* `length` needs to be less than or equal to `capacity`.\n* The first `length` values must be properly initialized values of type `T`.\n* `capacity` needs to be the capacity that the pointer was allocated with.\n* The allocated size in bytes must be no larger than `isize::MAX`.\n  See the safety documentation of [`pointer::offset`].\n\nThese requirements are always upheld by any `ptr` that has been allocated\nvia `Vec<T>`. Other allocation sources are allowed if the invariants are\nupheld.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures. For example it is normally **not** safe\nto build a `Vec<u8>` from a pointer to a C `char` array with length\n`size_t`, doing so is only safe if the array was initially allocated by\na `Vec` or `String`.\nIt's also not safe to build one from a `Vec<u16>` and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for `u16`), but after\nturning it into a `Vec<u8>` it'll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n[`slice::from_raw_parts`] instead.\n\nThe ownership of `ptr` is effectively transferred to the\n`Vec<T>` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n[`String`]: crate::string::String\n[`alloc::alloc`]: crate::alloc::alloc\n[`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n\n# Examples\n\n```\nuse std::ptr;\nuse std::mem;\n\nlet v = vec![1, 2, 3];\n\n// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\nlet mut v = mem::ManuallyDrop::new(v);\n\n// Pull out the various important pieces of information about `v`\nlet p = v.as_mut_ptr();\nlet len = v.len();\nlet cap = v.capacity();\n\nunsafe {\n    // Overwrite memory with 4, 5, 6\n    for i in 0..len {\n        ptr::write(p.add(i), 4 + i);\n    }\n\n    // Put everything back together into a Vec\n    let rebuilt = Vec::from_raw_parts(p, len, cap);\n    assert_eq!(rebuilt, [4, 5, 6]);\n}\n```\n\nUsing memory that was allocated elsewhere:\n\n```rust\nuse std::alloc::{alloc, Layout};\n\nfn main() {\n    let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n\n    let vec = unsafe {\n        let mem = alloc(layout).cast::<u32>();\n        if mem.is_null() {\n            return;\n        }\n\n        mem.write(1_000_000);\n\n        Vec::from_raw_parts(mem, 1, 16)\n    };\n\n    assert_eq!(vec, &[1_000_000]);\n    assert_eq!(vec.capacity(), 16);\n}\n```","links":{"`slice::from_raw_parts`":"1:11932:3544","`pointer::offset`":"1:2326:1205","crate::alloc::alloc":"0:110:307","crate::alloc::GlobalAlloc::dealloc":"1:13703:585"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3939:3569":{"id":"0:3939:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2058,4],"end":[2060,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:3238:4057":{"id":"b:0:727-0:3238:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2049:469":{"id":"0:2049:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2306,4],"end":[2308,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:3271:5793":{"id":"b:0:727-0:3271:5793","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1635:4370":{"id":"0:1635:4370","crate_id":0,"name":"entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1277,4],"end":[1306,5]},"visibility":"public","docs":"Gets the given key's corresponding entry in the map for in-place manipulation.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut count: BTreeMap<&str, usize> = BTreeMap::new();\n\n// count the number of occurrences of letters in the vec\nfor x in [\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n    count.entry(x).and_modify(|curr| *curr += 1).or_insert(1);\n}\n\nassert_eq!(count[\"a\"], 3);\nassert_eq!(count[\"b\"], 2);\nassert_eq!(count[\"c\"], 1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}]],"output":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:3661:4509":{"id":"a:1:41611:4468-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:7412:5026":{"id":"a:1:32053:3459-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7436:4175":{"id":"0:7436:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[151,0],"end":[156,1]},"visibility":"public","docs":"An owning iterator over the items of a `BTreeSet` in ascending order.\n\nThis `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: BTreeSet#method.into_iter","links":{"`BTreeSet`":"0:3209:100","BTreeSet#method.into_iter":"0:3209:100","`IntoIterator`":"1:8167:164"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:7436:4175","a:1:32053:3459-0:7436:4175","a:1:3111:246-0:7436:4175","a:1:31996:236-0:7436:4175","a:1:41612:4469-0:7436:4175","a:1:41611:4468-0:7436:4175","b:1:8171-0:7436:4175","b:1:2888-0:7436:4175","b:1:2618-0:7436:4175","b:1:2615-0:7436:4175","b:1:3727-0:7436:4175","b:1:2892-0:7436:4175","b:1:2903-0:7436:4175","b:1:2898-0:7436:4175","0:7440","0:3497","0:3506","0:3509","0:3487","0:3502"]}}},"b:1:2618-0:3279:5798":{"id":"b:1:2618-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2037,0],"end":[2044,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"async_fn_traits\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:32083:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsyncFnOnce","id":"1:3192:3006","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncFnOnce","id":"1:3192:3006","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:575:198","0:576:107","0:577:363"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:6007:71":{"id":"b:1:2903-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5785:3569":{"id":"0:5785:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2208,4],"end":[2210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"char"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7136:3978":{"id":"0:7136:3978","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2104,4],"end":[2109,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet mut vec2 = vec![4, 5, 6];\nvec.append(&mut vec2);\nassert_eq!(vec, [1, 2, 3, 4, 5, 6]);\nassert_eq!(vec2, []);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"append\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7632:242":{"id":"b:1:2888-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:3648:4057":{"id":"a:1:41612:4469-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6730:7003":{"id":"0:6730:7003","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[334,4],"end":[349,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:6554:4150":{"id":"b:1:2898-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:830:3912":{"id":"a:1:32053:3459-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:7609:7098":{"id":"b:1:2898-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4533:6219":{"id":"0:4533:6219","crate_id":0,"name":"pop_back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1636,4],"end":[1643,5]},"visibility":"public","docs":"Removes the last element from the deque and returns it, or `None` if\nit is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.pop_back(), None);\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(buf.pop_back(), Some(3));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7632:242":{"id":"a:1:41612:4469-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:7472:4175":{"id":"b:1:2615-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:1356:4373":{"id":"b:1:2892-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3332:4152":{"id":"0:3332:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[586,4],"end":[591,5]},"visibility":"public","docs":"Clears the set, removing all elements.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1327:4374":{"id":"b:1:2888-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:7392:4150":{"id":"a:1:32053:3459-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13147:28432":{"id":"1:13147:28432","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13146:18922"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1619:4222":{"id":"0:1619:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1047,4],"end":[1053,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"delete\", \"take\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5819:9748":{"id":"0:5819:9748","crate_id":0,"name":"strip_suffix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2310,4],"end":[2312,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5385-1:11345:8722":{"id":"0:5385-1:11345:8722","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[69,22],"end":[69,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RSplitN","name":"RSplitN","id":"1:11345:8722","glob":false}}},"b:1:2618-0:3872:4776":{"id":"b:1:2618-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:6039:8069":{"id":"b:1:2618-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5547-1:12362:8926":{"id":"0:5547-1:12362:8926","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[38,20],"end":[38,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::from_utf8_unchecked","name":"from_utf8_unchecked","id":"1:12362:8926","glob":false}}},"b:1:2618-0:7714:4776":{"id":"b:1:2618-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7919:1135":{"id":"0:7919:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[24,0],"end":[24,99]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3868:4780":{"id":"0:3868:4780","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1866,4],"end":[1868,5]},"visibility":"public","docs":"Provides a reference to the front element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]","#[rustc_confusables(\"first\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4538:6722":{"id":"0:4538:6722","crate_id":0,"name":"swap_remove_back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1760,4],"end":[1768,5]},"visibility":"public","docs":"Removes an element from anywhere in the deque and returns it,\nreplacing it with the last element.\n\nThis does not preserve ordering, but is *O*(1).\n\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_back(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_back(0), Some(1));\nassert_eq!(buf, [3, 2]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:3238:4057":{"id":"b:1:2615-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1043":{"id":"0:1043","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1676,0],"end":[1681,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1046:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1471":{"id":"0:1471","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[360,0],"end":[364,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1474:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1617:4498":{"id":"0:1617:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[984,4],"end":[995,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, `None` is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n[module-level documentation]: index.html#insert-and-complex-keys\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push\", \"put\", \"set\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:14061":{"id":"1:13254:14061","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4907:14061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43687:8931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3516":{"id":"0:3516","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1579,0],"end":[1603,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3519:172","0:3520:1167","0:3522:3431","0:3523:4798","0:3524:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2156:4997":{"id":"0:2156:4997","crate_id":0,"name":"as_cursor","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3092,4],"end":[3098,5]},"visibility":"public","docs":"Returns a read-only cursor pointing to the same location as the\n`CursorMutKey`.\n\nThe lifetime of the returned `Cursor` is bound to that of the\n`CursorMutKey`, which means it cannot outlive the `CursorMutKey` and that the\n`CursorMutKey` is frozen for the lifetime of the `Cursor`.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3635:181":{"id":"b:1:2888-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4751:7331":{"id":"0:4751:7331","crate_id":0,"name":"from_vec_with_nul_unchecked","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[634,4],"end":[637,5]},"visibility":"public","docs":"Converts a <code>[Vec]<[u8]></code> to a [`CString`] without checking the\ninvariants on the given [`Vec`].\n\n# Safety\n\nThe given [`Vec`] **must** have one nul byte as its last element.\nThis means it cannot be empty nor have any other nul byte anywhere else.\n\n# Example\n\n```\nuse std::ffi::CString;\nassert_eq!(\n    unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n    unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n);\n```","links":{"u8":"1:52095:1800","`Vec`":"0:7048:263","Vec":"0:7048:263","`CString`":"0:7553:7100"},"attrs":["#[must_use]","#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13153:8917":{"id":"1:13153:8917","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13152:18923"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43662:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:3058":{"id":"0:307:3058","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/boxed.rs","begin":[303,4],"end":[305,5]},"visibility":"public","docs":"Allocates memory on the heap then places `x` into it,\nreturning an error if the allocation fails\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nlet five = Box::try_new(5)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7918:678":{"id":"0:7918:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[24,0],"end":[24,99]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4568:6925":{"id":"0:4568:6925","crate_id":0,"name":"partition_point","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2630,4],"end":[2641,5]},"visibility":"public","docs":"Returns the index of the partition point according to the given predicate\n(the index of the first element of the second partition).\n\nThe deque is assumed to be partitioned according to the given predicate.\nThis means that all elements for which the predicate returns true are at the start of the deque\nand all elements for which the predicate returns false are at the end.\nFor example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n(all odd numbers are at the start, all even at the end).\n\nIf the deque is not partitioned, the returned result is unspecified and meaningless,\nas this method performs a kind of binary search.\n\nSee also [`binary_search`], [`binary_search_by`], and [`binary_search_by_key`].\n\n[`binary_search`]: VecDeque::binary_search\n[`binary_search_by`]: VecDeque::binary_search_by\n[`binary_search_by_key`]: VecDeque::binary_search_by_key\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [1, 2, 3, 3, 5, 6, 7].into();\nlet i = deque.partition_point(|&x| x < 5);\n\nassert_eq!(i, 4);\nassert!(deque.iter().take(i).all(|&x| x < 5));\nassert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n```\n\nIf you want to insert an item to a sorted deque, while maintaining\nsort order:\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\nlet num = 42;\nlet idx = deque.partition_point(|&x| x < num);\ndeque.insert(idx, num);\nassert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```","links":{"VecDeque::binary_search":"0:4555:6875","VecDeque::binary_search_by_key":"0:4563:6908","VecDeque::binary_search_by":"0:4557:6876"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pred",{"generic":"P"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7412:5026":{"id":"b:1:2888-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7157:9514":{"id":"0:7157:9514","crate_id":0,"name":"extend_from_within","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2588,4],"end":[2600,5]},"visibility":"public","docs":"Copies elements from `src` range to the end of the vector.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.\n\n# Examples\n\n```\nlet mut vec = vec![0, 1, 2, 3, 4];\n\nvec.extend_from_within(2..);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4]);\n\nvec.extend_from_within(..2);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1]);\n\nvec.extend_from_within(4..8);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_extend_from_within\", since = \"1.53.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["src",{"generic":"R"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7048:263":{"id":"a:1:41611:4468-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6247:8595":{"id":"0:6247:8595","crate_id":0,"name":"upgrade","span":{"filename":"library/alloc/src/sync.rs","begin":[2824,4],"end":[2853,5]},"visibility":"public","docs":"Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\ndropping of the inner value if successful.\n\nReturns [`None`] if the inner value has since been dropped.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet weak_five = Arc::downgrade(&five);\n\nlet strong_five: Option<Arc<_>> = weak_five.upgrade();\nassert!(strong_five.is_some());\n\n// Destroy all strong pointers.\ndrop(strong_five);\ndrop(five);\n\nassert!(weak_five.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","`Arc`":"0:6007:71"},"attrs":["#[must_use =\n\"this returns a new `Arc`, \\\n                  without modifying the original weak pointer\"]","#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7302":{"id":"0:7302","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3263,0],"end":[3267,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_as_mut\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2859:76","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7305:3458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4691-0:7609:7098":{"id":"0:4691-0:7609:7098","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[85,43],"end":[85,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::c_str::IntoStringError","name":"IntoStringError","id":"0:7609:7098","glob":false}}},"0:3826:4919":{"id":"0:3826:4919","crate_id":0,"name":"current","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1443,4],"end":[1445,5]},"visibility":"public","docs":"Returns a reference to the element that the cursor is currently\npointing to.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7338":{"id":"0:7338","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3375,0],"end":[3396,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"slice":{"generic":"T"}},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7341:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5768:813":{"id":"0:5768:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2138,4],"end":[2151,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4309:4057":{"id":"0:4309:4057","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"An iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`iter`] method on [`super::VecDeque`]. See its\ndocumentation for more.\n\n[`iter`]: super::VecDeque::iter","links":{"`super::VecDeque`":"0:4423:264","super::VecDeque::iter":"0:4512:954"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:4309:4057","a:1:32053:3459-0:4309:4057","a:1:3111:246-0:4309:4057","a:1:31996:236-0:4309:4057","a:1:41612:4469-0:4309:4057","a:1:41611:4468-0:4309:4057","b:0:727-0:4309:4057","b:1:8171-0:4309:4057","b:1:2888-0:4309:4057","b:1:2618-0:4309:4057","b:1:2615-0:4309:4057","b:1:3727-0:4309:4057","b:1:2892-0:4309:4057","b:1:2903-0:4309:4057","b:1:2898-0:4309:4057","0:4324","0:4358","0:4318","0:4356","0:4352","0:4321","0:4340"]}}},"a:1:31996:236-0:7655:9289":{"id":"a:1:31996:236-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7309:335":{"id":"0:7309:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3271,4],"end":[3273,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7363:2619":{"id":"a:1:41611:4468-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3420:3429":{"id":"0:3420:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1309,4],"end":[1311,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:8983":{"id":"1:13207:8983","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12812:2367","`DoubleEndedIterator`":"1:8205:129","prim@char":"1:52078:458","str::rmatch_indices":"1:13210:29484"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43529:8936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7553:7100":{"id":"b:1:2903-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4857-1:10203:7841":{"id":"0:4857-1:10203:7841","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[590,39],"end":[590,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Write","name":"Write","id":"1:10203:7841","glob":false}}},"0:4846-1:10250:119":{"id":"0:4846-1:10250:119","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[586,20],"end":[586,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Debug","name":"Debug","id":"1:10250:119","glob":false}}},"a:1:32053:3459-0:7436:4175":{"id":"a:1:32053:3459-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:7645:9281":{"id":"a:1:32053:3459-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:360:651":{"id":"0:360:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/boxed.rs","begin":[1235,4],"end":[1246,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7609:7098":{"id":"b:1:2903-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1255:1031":{"id":"0:1255:1031","crate_id":0,"name":"map","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1,0],"end":[3411,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1422-0:1311:4371","0:1423-0:1342:4372","0:1424-0:1356:4373","0:1425-0:1327:4374","0:1428:99","0:1465:4057","0:1480:4509","0:1496:4175","0:1518:4524","0:1527:4528","0:1536:4534","0:1546:4541","0:1557:4545","0:1568:209","0:1577:4553","0:1830:4776","0:2089:4918","0:2103:4931","0:2114:4932","0:7412:5026"],"is_stripped":false}}},"0:5824:780":{"id":"0:5824:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2366,4],"end":[2368,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1327:4374":{"id":"a:1:32053:3459-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5390-1:11140:8727":{"id":"0:5390-1:11140:8727","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[71,22],"end":[71,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::SplitInclusive","name":"SplitInclusive","id":"1:11140:8727","glob":false}}},"0:5728:9637":{"id":"0:5728:9637","crate_id":0,"name":"insert_str","span":{"filename":"library/alloc/src/string.rs","begin":[1703,4],"end":[1709,5]},"visibility":"public","docs":"Inserts a string slice into this `String` at a byte position.\n\nThis is an *O*(*n*) operation as it requires copying every element in the\nbuffer.\n\n# Panics\n\nPanics if `idx` is larger than the `String`'s length, or if it does not\nlie on a [`char`] boundary.\n\n# Examples\n\n```\nlet mut s = String::from(\"bar\");\n\ns.insert_str(0, \"foo\");\n\nassert_eq!(\"foobar\", s);\n```","links":{"`char`":"1:52078:458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"insert_str\", since = \"1.16.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["idx",{"primitive":"usize"}],["string",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:3279:5798":{"id":"a:1:3146:11953-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:680":{"id":"0:680","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2357,0],"end":[2375,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_box_error\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:682:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:754:610":{"id":"0:754:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/borrow.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3452":{"id":"0:3452","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1403,0],"end":[1425,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"1:33452:5740","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3455:198","0:3456:396"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7620:780":{"id":"0:7620:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,31],"end":[227,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5691:336":{"id":"0:5691:336","crate_id":0,"name":"as_str","span":{"filename":"library/alloc/src/string.rs","begin":[1028,4],"end":[1030,5]},"visibility":"public","docs":"Extracts a string slice containing the entire `String`.\n\n# Examples\n\n```\nlet s = String::from(\"foo\");\n\nassert_eq!(\"foo\", s.as_str());\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"string_as_str\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:3429":{"id":"0:1023:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1621,4],"end":[1624,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1662:2785":{"id":"0:1662:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1522,4],"end":[1527,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7636:678":{"id":"0:7636:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[362,9],"end":[362,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1342:4372":{"id":"a:1:41612:4469-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4344:7003":{"id":"0:4344:7003","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[131,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7609:7098":{"id":"b:0:727-0:7609:7098","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477:3409":{"id":"0:477:3409","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/boxed.rs","begin":[1744,4],"end":[1746,5]},"visibility":"public","docs":"Attempt to downcast the box to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:843:651":{"id":"0:843:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[311,4],"end":[323,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1958:974":{"id":"0:1958:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2144,4],"end":[2146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4223":{"id":"0:4223","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[35,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4226:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3578":{"id":"0:3578","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1792,0],"end":[1796,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3580:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4164:172":{"id":"0:4164:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[33,4],"end":[33,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2069,0],"end":[2069,84]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3636:3012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3935:933":{"id":"0:3935:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3906":{"id":"0:3906","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1999,0],"end":[1999,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4832":{"id":"0:4832","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1135,0],"end":[1144,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4833:3494","0:4834:3301"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:683":{"id":"0:683","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2379,0],"end":[2399,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:685:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5911:813":{"id":"0:5911:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2878,4],"end":[2880,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["it",{"generic":"I"}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1904:974":{"id":"0:1904:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2045,4],"end":[2047,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3462":{"id":"0:3462","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1453,0],"end":[1457,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3465:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4263:3437":{"id":"0:4263:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4542:3978":{"id":"0:4542:3978","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1963,4],"end":[1984,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Panics\n\nPanics if the new number of elements in self overflows a `usize`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = [1, 2].into();\nlet mut buf2: VecDeque<_> = [3, 4].into();\nbuf.append(&mut buf2);\nassert_eq!(buf, [1, 2, 3, 4]);\nassert_eq!(buf2, []);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"append\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6290:847":{"id":"0:6290:847","crate_id":0,"name":"gt","span":{"filename":"library/alloc/src/sync.rs","begin":[3210,4],"end":[3212,5]},"visibility":"default","docs":"Greater-than comparison for two `Arc`s.\n\nThe two are compared by calling `>` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five > Arc::new(4));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5260:8248":{"id":"0:5260:8248","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/rc.rs","begin":[3158,4],"end":[3168,5]},"visibility":"public","docs":"Gets the number of `Weak` pointers pointing to this allocation.\n\nIf no strong pointers remain, this will return zero.","links":{},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1546:4541":{"id":"a:1:32053:3459-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4149:4509":{"id":"0:4149:4509","crate_id":0,"name":"IterMut","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"A mutable iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`iter_mut`] method on [`super::VecDeque`]. See its\ndocumentation for more.\n\n[`iter_mut`]: super::VecDeque::iter_mut","links":{"super::VecDeque::iter_mut":"0:4513:955","`super::VecDeque`":"0:4423:264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:4149:4509","a:1:32053:3459-0:4149:4509","a:1:3111:246-0:4149:4509","a:1:31996:236-0:4149:4509","a:1:41612:4469-0:4149:4509","a:1:41611:4468-0:4149:4509","b:1:8171-0:4149:4509","b:1:2888-0:4149:4509","b:1:2618-0:4149:4509","b:1:2615-0:4149:4509","b:1:3727-0:4149:4509","b:1:2892-0:4149:4509","b:1:2903-0:4149:4509","b:1:2898-0:4149:4509","0:4158","0:4161","0:4189","0:4177","0:4193","0:4195"]}}},"b:1:2903-0:1428:99":{"id":"b:1:2903-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3756:1167":{"id":"0:3756:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1194,4],"end":[1206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5024:8240":{"id":"0:5024:8240","crate_id":0,"name":"downgrade","span":{"filename":"library/alloc/src/rc.rs","begin":[1474,4],"end":[1482,5]},"visibility":"public","docs":"Creates a new [`Weak`] pointer to this allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet weak_five = Rc::downgrade(&five);\n```","links":{"`Weak`":"0:5217:8069"},"attrs":["#[must_use =\n\"this returns a new `Weak` pointer, \\\n                  without modifying the original `Rc`\"]","#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7048:263":{"id":"a:1:3146:11953-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[734,0],"end":[792,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:332:3131","0:333:3135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6386":{"id":"0:6386","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3635,0],"end":[3653,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"arc_error\", since = \"1.52.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6388:3494","0:6389:430","0:6390:3301","0:6391:3516"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3832:4780":{"id":"0:3832:4780","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1486,4],"end":[1488,5]},"visibility":"public","docs":"Provides a reference to the front element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]","#[rustc_confusables(\"first\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4747:7310":{"id":"0:4747:7310","crate_id":0,"name":"as_bytes_with_nul","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Equivalent to [`CString::as_bytes()`] except that the\nreturned slice includes the trailing nul terminator.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.as_bytes_with_nul();\nassert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n```","links":{"`CString::as_bytes()`":"0:4746:3305"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:295:2399":{"id":"a:1:3146:11953-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5541-1:12360:7286":{"id":"0:5541-1:12360:7286","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,20],"end":[36,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::from_utf8","name":"from_utf8","id":"1:12360:7286","glob":false}}},"0:3236:462":{"id":"0:3236:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[115,4],"end":[117,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3585:1167":{"id":"0:3585:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1801,4],"end":[1804,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[43,0],"end":[43,52]},"visibility":"default","docs":"`ThinBox<T>` is `Send` if `T` is `Send` because the data is owned.","links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2892-0:1536:4534":{"id":"b:1:2892-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5889:810":{"id":"0:5889:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2753,4],"end":[2755,5]},"visibility":"default","docs":"Converts the given boxed `str` slice to a [`String`].\nIt is notable that the `str` slice is owned.\n\n# Examples\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = s1.into_boxed_str();\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```","links":{"`String`":"0:7632:242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1927,0],"end":[1933,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:508:248","0:509:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3978":{"id":"0:3978","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2144,0],"end":[2148,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3981:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7634":{"id":"0:7634","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[362,9],"end":[362,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:724:3355":{"id":"0:724:3355","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[41,4],"end":[41,29]},"visibility":"default","docs":"The resulting type after obtaining ownership.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"0:7959:678":{"id":"0:7959:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[33,0],"end":[33,105]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1080:172":{"id":"0:1080:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1739,4],"end":[1739,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:3389:933":{"id":"0:3389:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1252,4],"end":[1254,5]},"visibility":"default","docs":"Gets an iterator for moving out the `BTreeSet`'s contents in ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3, 4]);\n\nlet v: Vec<_> = set.into_iter().collect();\nassert_eq!(v, [1, 2, 3, 4]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:3279:5798":{"id":"b:1:2903-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3409:780":{"id":"0:3409:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1291,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5388-1:11359:8725":{"id":"0:5388-1:11359:8725","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[69,51],"end":[69,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::SplitNMut","name":"SplitNMut","id":"1:11359:8725","glob":false}}},"0:6283:1135":{"id":"0:6283:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/sync.rs","begin":[3138,4],"end":[3140,5]},"visibility":"default","docs":"Inequality for two `Arc`s.\n\nTwo `Arc`s are not equal if their inner values are not equal.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Arc`s that point to the same value are always equal.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five != Arc::new(6));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631:1403":{"id":"0:631:1403","crate_id":0,"name":"resume","span":{"filename":"library/alloc/src/boxed.rs","begin":[2154,4],"end":[2156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["arg",{"generic":"R"}]],"output":{"resolved_path":{"name":"CoroutineState","id":"1:39082:3009","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3301:3008","args":null}}}},{"type":{"qualified_path":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3301:3008","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5917":{"id":"0:5917","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2892,0],"end":[2908,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"from_string_for_vec_u8\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::vec::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:5918:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:643:1271":{"id":"0:643:1271","crate_id":0,"name":"poll","span":{"filename":"library/alloc/src/boxed.rs","begin":[2176,4],"end":[2178,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"1:13626:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"1:44315:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:44290:149","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369:60":{"id":"0:369:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/boxed.rs","begin":[1273,4],"end":[1280,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:1830:4776":{"id":"b:1:2903-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3428:3569":{"id":"0:3428:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1320,4],"end":[1324,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"Iter"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"Iter","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4985:3065":{"id":"0:4985:3065","crate_id":0,"name":"try_new_uninit_in","span":{"filename":"library/alloc/src/rc.rs","begin":[830,4],"end":[841,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, in the provided allocator, returning an\nerror if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet mut five = Rc::<u32, _>::try_new_uninit_in(System)?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7655:9289":{"id":"a:1:3111:246-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5:1877":{"id":"0:5:1877","crate_id":0,"name":"vec","span":{"filename":"library/alloc/src/macros.rs","begin":[42,0],"end":[57,1]},"visibility":"public","docs":"Creates a [`Vec`] containing the arguments.\n\n`vec!` allows `Vec`s to be defined with the same syntax as array expressions.\nThere are two forms of this macro:\n\n- Create a [`Vec`] containing a given list of elements:\n\n```\nlet v = vec![1, 2, 3];\nassert_eq!(v[0], 1);\nassert_eq!(v[1], 2);\nassert_eq!(v[2], 3);\n```\n\n- Create a [`Vec`] from a given element and size:\n\n```\nlet v = vec![1; 3];\nassert_eq!(v, [1, 1, 1]);\n```\n\nNote that unlike array expressions this syntax supports all elements\nwhich implement [`Clone`] and the number of elements doesn't have to be\na constant.\n\nThis will use `clone` to duplicate an expression, so one should be careful\nusing this with types having a nonstandard `Clone` implementation. For\nexample, `vec![Rc::new(1); 5]` will create a vector of five references\nto the same boxed integer value, not five references pointing to independently\nboxed integers.\n\nAlso, note that `vec![expr; 0]` is allowed, and produces an empty vector.\nThis will still evaluate `expr`, however, and immediately drop the resulting value, so\nbe mindful of side effects.\n\n[`Vec`]: crate::vec::Vec","links":{"`Clone`":"1:2631:112","crate::vec::Vec":"0:7048:263"},"attrs":["#[cfg(all(not(no_global_oom_handling), not(test)))]","#[macro_export]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"vec_macro\"]","#[allow_internal_unstable(rustc_attrs, liballoc_internals)]"],"deprecation":null,"inner":{"macro":"macro_rules! vec {\n    () => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),+ $(,)?) => { ... };\n}"}},"b:1:2892-0:3872:4776":{"id":"b:1:2892-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:780":{"id":"0:240:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[127,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:701:3301":{"id":"0:701:3301","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/boxed.rs","begin":[2478,4],"end":[2480,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4782":{"id":"0:4782","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[840,0],"end":[846,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4784:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3461:398":{"id":"0:3461:398","crate_id":0,"name":"bitor","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1444,4],"end":[1449,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([3, 4, 5]);\n\nlet result = &a | &b;\nassert_eq!(result, BTreeSet::from([1, 2, 3, 4, 5]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4679:810":{"id":"0:4679:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["kind",{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7621:8665":{"id":"b:1:2903-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6110":{"id":"0:6110","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1175,0],"end":[1249,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6113:3131","0:6114:3135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6333:810":{"id":"0:6333:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3375,4],"end":[3378,5]},"visibility":"default","docs":"Allocate a reference-counted `str` and copy `v` into it.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet shared: Arc<str> = Arc::from(\"eggplant\");\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:6039:8069":{"id":"b:1:2615-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4645":{"id":"0:4645","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2858,0],"end":[2862,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4648:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4802:7398":{"id":"0:4802:7398","crate_id":0,"name":"nul_position","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[938,4],"end":[940,5]},"visibility":"public","docs":"Returns the position of the nul byte in the slice that caused\n[`CString::new`] to fail.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet nul_error = CString::new(\"foo\\0bar\").unwrap_err();\nassert_eq!(nul_error.nul_position(), 3);\n\nlet nul_error = CString::new(\"foo bar\\0\").unwrap_err();\nassert_eq!(nul_error.nul_position(), 7);\n```","links":{"`CString::new`":"0:4722:1153"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5127":{"id":"0:5127","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2272,0],"end":[2317,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5130:678","0:5131:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7298":{"id":"0:7298","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3256,0],"end":[3260,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7301:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:1428:99":{"id":"b:1:2888-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1674:974":{"id":"0:1674:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1547,4],"end":[1549,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3822:917":{"id":"0:3822:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1388,4],"end":[1391,5]},"visibility":"public","docs":"Returns the cursor position index within the `LinkedList`.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:3279:5798":{"id":"a:1:3111:246-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5012:359":{"id":"0:5012:359","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/rc.rs","begin":[1189,4],"end":[1195,5]},"visibility":"public","docs":"Converts to `Rc<[T]>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut values = Rc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Rc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{"mem::MaybeUninit::assume_init":"1:1821:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:6260":{"id":"0:6260","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3014,0],"end":[3057,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6263:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5945:1167":{"id":"0:5945:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/string.rs","begin":[3008,4],"end":[3010,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7553:7100":{"id":"b:1:2618-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[361,0],"end":[609,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:313:2669","0:314:3059","0:315:3035","0:316:3065","0:317:3045","0:318:3070","0:319:3090","0:320:3096","0:322:3104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1021:172":{"id":"0:1021:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1613,4],"end":[1613,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:6238":{"id":"0:6238","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2655,0],"end":[2795,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6241:334","0:6242:3225","0:6243:2710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6495":{"id":"0:6495","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[91,0],"end":[113,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6499:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:7538:2621":{"id":"b:1:2888-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4356":{"id":"0:4356","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[171,0],"end":[171,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5146:469":{"id":"0:5146:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/rc.rs","begin":[2433,4],"end":[2435,5]},"visibility":"default","docs":"Comparison for two `Rc`s.\n\nThe two are compared by calling `cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\nuse std::cmp::Ordering;\n\nlet five = Rc::new(5);\n\nassert_eq!(Ordering::Less, five.cmp(&Rc::new(6)));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:3872:4776":{"id":"a:1:3111:246-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:5929:780":{"id":"0:5929:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2946,4],"end":[2948,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5573-1:43447:8940":{"id":"0:5573-1:43447:8940","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[55,20],"end":[55,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::RSplitTerminator","name":"RSplitTerminator","id":"1:43447:8940","glob":false}}},"0:313:2669":{"id":"0:313:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[379,4],"end":[388,5]},"visibility":"public","docs":"Allocates memory in the given allocator then places `x` into it.\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet five = Box::new_in(5, System);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:3411":{"id":"0:479:3411","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/boxed.rs","begin":[1774,4],"end":[1780,5]},"visibility":"public","docs":"Downcasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:477:3409"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:4774":{"id":"0:4774","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[790,0],"end":[797,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4775:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:363:60":{"id":"0:363:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/boxed.rs","begin":[1254,4],"end":[1256,5]},"visibility":"default","docs":"Creates a `Box<T>`, with the `Default` value for T.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3728:4749":{"id":"0:3728:4749","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[952,4],"end":[984,5]},"visibility":"public","docs":"Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.\n\nThis operation should compute in *O*(*n*) time.\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nlet mut split = d.split_off(2);\n\nassert_eq!(split.pop_front(), Some(1));\nassert_eq!(split.pop_front(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1830:4776":{"id":"b:1:2615-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4232:3429":{"id":"0:4232:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[51,4],"end":[54,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3305:5807":{"id":"0:3305:5807","crate_id":0,"name":"Union","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[308,0],"end":[308,57]},"visibility":"public","docs":"A lazy iterator producing elements in the union of `BTreeSet`s.\n\nThis `struct` is created by the [`union`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`union`]: BTreeSet::union","links":{"BTreeSet::union":"0:3330:65","`BTreeSet`":"0:3209:100"},"attrs":["#[must_use =\n\"this returns the union as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3305:5807","a:1:32053:3459-0:3305:5807","a:1:3111:246-0:3305:5807","a:1:31996:236-0:3305:5807","a:1:41612:4469-0:3305:5807","a:1:41611:4468-0:3305:5807","b:0:727-0:3305:5807","b:1:8171-0:3305:5807","b:1:2888-0:3305:5807","b:1:2618-0:3305:5807","b:1:2615-0:3305:5807","b:1:3727-0:3305:5807","b:1:2892-0:3305:5807","b:1:2903-0:3305:5807","b:1:2898-0:3305:5807","0:3581","0:3578","0:3310","0:3588"]}}},"0:646:172":{"id":"0:646:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/boxed.rs","begin":[2183,4],"end":[2183,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"AsyncIterator","id":"1:4383:2999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:723:249":{"id":"0:723:249","crate_id":0,"name":"ToOwned","span":{"filename":"library/alloc/src/borrow.rs","begin":[38,0],"end":[80,1]},"visibility":"public","docs":"A generalization of `Clone` to borrowed data.\n\nSome types make it possible to go from borrowed to owned, usually by\nimplementing the `Clone` trait. But `Clone` works only for going from `&T`\nto `T`. The `ToOwned` trait generalizes `Clone` to construct owned data\nfrom any borrow of a given type.","links":{},"attrs":["#[rustc_diagnostic_item = \"ToOwned\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:724:3355","0:725:3587","0:726:3595"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:4815","0:727","0:5599","0:5499"]}}},"0:7680":{"id":"0:7680","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2348,0],"end":[2348,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:7683:678","0:7684:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1652:933":{"id":"0:1652:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1489,4],"end":[1491,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7517:678":{"id":"0:7517:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2734,0],"end":[2734,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7609:7098":{"id":"a:1:31996:236-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3481:3437":{"id":"0:3481:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1497,4],"end":[1499,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5179":{"id":"0:5179","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2548,0],"end":[2563,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5180:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5359-1:10988:8699":{"id":"0:5359-1:10988:8699","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[53,29],"end":[53,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_range\", issue = \"76393\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::try_range","name":"try_range","id":"1:10988:8699","glob":false}}},"0:5879:3458":{"id":"0:5879:3458","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2688,4],"end":[2690,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:361":{"id":"0:589:361","crate_id":0,"name":"async_call","span":{"filename":"library/alloc/src/boxed.rs","begin":[2057,4],"end":[2059,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["args",{"generic":"Args"}]],"output":{"qualified_path":{"name":"CallRefFuture","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3187:3005","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}}},"b:1:2892-0:1830:4776":{"id":"b:1:2892-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6620":{"id":"0:6620","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[253,0],"end":[253,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1562":{"id":"0:1562","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[562,0],"end":[566,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1566:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2016:3569":{"id":"0:2016:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2257,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1642:4794":{"id":"0:1642:4794","crate_id":0,"name":"into_values","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1467,4],"end":[1469,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values, in order by key.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"hello\");\na.insert(2, \"goodbye\");\n\nlet values: Vec<&str> = a.into_values().collect();\nassert_eq!(values, [\"hello\", \"goodbye\"]);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1233,0],"end":[1247,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:360:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:3305:5807":{"id":"b:1:2618-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3824:6241":{"id":"0:3824:6241","crate_id":0,"name":"move_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1421,4],"end":[1434,5]},"visibility":"public","docs":"Moves the cursor to the previous element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2085:4945":{"id":"0:2085:4945","crate_id":0,"name":"upper_bound","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2693,4],"end":[2704,5]},"visibility":"public","docs":"Returns a [`Cursor`] pointing at the gap after the greatest key\nsmaller than the given bound.\n\nPassing `Bound::Included(x)` will return a cursor pointing to the\ngap after the greatest key smaller than or equal to `x`.\n\nPassing `Bound::Excluded(x)` will return a cursor pointing to the\ngap after the greatest key smaller than `x`.\n\nPassing `Bound::Unbounded` will return a cursor pointing to the\ngap after the greatest key in the map.\n\n# Examples\n\n```\n#![feature(btree_cursors)]\n\nuse std::collections::BTreeMap;\nuse std::ops::Bound;\n\nlet map = BTreeMap::from([\n    (1, \"a\"),\n    (2, \"b\"),\n    (3, \"c\"),\n    (4, \"d\"),\n]);\n\nlet cursor = map.upper_bound(Bound::Included(&3));\nassert_eq!(cursor.peek_prev(), Some((&3, &\"c\")));\nassert_eq!(cursor.peek_next(), Some((&4, &\"d\")));\n\nlet cursor = map.upper_bound(Bound::Excluded(&3));\nassert_eq!(cursor.peek_prev(), Some((&2, &\"b\")));\nassert_eq!(cursor.peek_next(), Some((&3, &\"c\")));\n\nlet cursor = map.upper_bound(Bound::Unbounded);\nassert_eq!(cursor.peek_prev(), Some((&4, &\"d\")));\nassert_eq!(cursor.peek_next(), None);\n```","links":{"`Cursor`":"0:2089:4918"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bound",{"resolved_path":{"name":"Bound","id":"1:39258:4363","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6097:3059":{"id":"0:6097:3059","crate_id":0,"name":"try_new_in","span":{"filename":"library/alloc/src/sync.rs","begin":[838,4],"end":[851,5]},"visibility":"public","docs":"Constructs a new `Arc<T, A>` in the provided allocator, returning an error if allocation fails.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet five = Arc::try_new_in(5, System)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:981:1167":{"id":"0:981:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1519,4],"end":[1521,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1954":{"id":"0:1954","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2143,0],"end":[2147,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1958:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5248":{"id":"0:5248","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2872,0],"end":[2920,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5250:3190"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5467":{"id":"0:5467","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[722,0],"end":[741,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"slice":{"generic":"V"}},"items":["0:5470:198","0:5471:8844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7673:678":{"id":"0:7673:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2346,0],"end":[2346,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6311":{"id":"0:6311","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3277,0],"end":[3291,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6313:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7538:2621":{"id":"b:1:3727-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1356:4373":{"id":"a:1:3111:246-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4600:198":{"id":"0:4600:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2768,4],"end":[2768,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:865:60":{"id":"0:865:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":"Creates an empty `BinaryHeap<T>`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4432:462":{"id":"0:4432:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[110,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:943:4057":{"id":"a:1:32053:3459-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7305:3458":{"id":"0:7305:3458","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3264,4],"end":[3266,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1675":{"id":"0:1675","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1553,0],"end":[1557,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1678:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1890:172":{"id":"0:1890:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2021,4],"end":[2021,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}}},"0:7440":{"id":"0:7440","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[150,9],"end":[150,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7443:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4816:3355":{"id":"0:4816:3355","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1014,4],"end":[1014,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:7076:6589":{"id":"0:7076:6589","crate_id":0,"name":"truncate","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1192,4],"end":[1212,5]},"visibility":"public","docs":"Shortens the vector, keeping the first `len` elements and dropping\nthe rest.\n\nIf `len` is greater or equal to the vector's current length, this has\nno effect.\n\nThe [`drain`] method can emulate `truncate`, but causes the excess\nelements to be returned instead of dropped.\n\nNote that this method has no effect on the allocated capacity\nof the vector.\n\n# Examples\n\nTruncating a five element vector to two elements:\n\n```\nlet mut vec = vec![1, 2, 3, 4, 5];\nvec.truncate(2);\nassert_eq!(vec, [1, 2]);\n```\n\nNo truncation occurs when `len` is greater than the vector's current\nlength:\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.truncate(8);\nassert_eq!(vec, [1, 2, 3]);\n```\n\nTruncating when `len == 0` is equivalent to calling the [`clear`]\nmethod.\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.truncate(0);\nassert_eq!(vec, []);\n```\n\n[`clear`]: Vec::clear\n[`drain`]: Vec::drain","links":{"Vec::drain":"0:7138:4149","Vec::clear":"0:7140:4152"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7704:1135":{"id":"0:7704:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2352,0],"end":[2352,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:3397:4776":{"id":"a:1:32053:3459-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:727-0:7480:4175":{"id":"b:0:727-0:7480:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4818:3595":{"id":"0:4818:3595","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1020,4],"end":[1024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2036":{"id":"0:2036","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2293,0],"end":[2293,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:7569:7099":{"id":"b:1:2888-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:1536:4534":{"id":"b:1:2898-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:744:464":{"id":"0:744:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/borrow.rs","begin":[205,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:866":{"id":"0:866","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[403,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"binaryheap_debug\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:869:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:4149:4509":{"id":"b:1:8171-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2903-0:1327:4374":{"id":"b:1:2903-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4013":{"id":"0:4013","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2206,0],"end":[2206,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1440:651":{"id":"0:1440:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[188,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7581:780":{"id":"0:7581:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,31],"end":[136,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4718":{"id":"0:4718","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[169,0],"end":[217,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4719:3305","0:4720:7197"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3760":{"id":"0:3760","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1220,0],"end":[1235,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3763:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4348:7005":{"id":"0:4348:7005","crate_id":0,"name":"try_rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[149,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3554:253","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1355:780":{"id":"0:1355:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3802:462":{"id":"0:3802:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1340,4],"end":[1343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6319":{"id":"0:6319","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3302,0],"end":[3320,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6321:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7203":{"id":"0:7203","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2805,0],"end":[2825,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7206:462","0:7207:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:7621:8665":{"id":"b:1:2615-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:743:462":{"id":"0:743:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/borrow.rs","begin":[195,4],"end":[203,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194-0:218:3019":{"id":"0:194-0:218:3019","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[184,0],"end":[184,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"import":{"source":"thin::ThinBox","name":"ThinBox","id":"0:218:3019","glob":false}}},"0:1687":{"id":"0:1687","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1570,0],"end":[1603,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1691:172","0:1692:1167","0:1693:3429","0:1694:3431","0:1695:4798","0:1696:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:1577:4553":{"id":"a:1:31996:236-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7448":{"id":"0:7448","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[165,9],"end":[165,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7451:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3543:172":{"id":"0:3543:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1648,4],"end":[1648,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:4583":{"id":"0:4583","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2738,0],"end":[2742,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4586:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7552:780":{"id":"0:7552:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,31],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:2103:4931":{"id":"a:1:3146:11953-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3727:6219":{"id":"0:3727:6219","crate_id":0,"name":"pop_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[922,4],"end":[924,5]},"visibility":"public","docs":"Removes the last element from a list and returns it, or `None` if\nit is empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_back(), None);\nd.push_back(1);\nd.push_back(3);\nassert_eq!(d.pop_back(), Some(3));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7480:4175":{"id":"b:1:2892-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:7392:4150":{"id":"b:1:2615-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:421:1911":{"id":"0:421:1911","crate_id":0,"name":"write_str","span":{"filename":"library/alloc/src/boxed.rs","begin":[1441,4],"end":[1443,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7632:242":{"id":"a:1:31996:236-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:772:780":{"id":"0:772:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/borrow.rs","begin":[388,4],"end":[393,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1096":{"id":"0:1096","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1775,0],"end":[1788,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1100:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4666-0:3173:3698":{"id":"0:4666-0:3173:3698","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[27,4],"end":[27,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"super::btree::set","name":"set","id":"0:3173:3698","glob":true}}},"b:1:2903-0:218:3019":{"id":"b:1:2903-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1361:4370":{"id":"0:1361:4370","crate_id":0,"name":"entry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[105,4],"end":[105,41]},"visibility":"public","docs":"The entry in the map that was already occupied.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[939,0],"end":[1346,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:909:954","0:910:4064","0:911:4068","0:912:2680","0:913:2768","0:914:2750","0:915:2769","0:916:2760","0:917:2775","0:918:4123","0:919:2428","0:920:2574","0:921:311","0:922:974","0:923:3440","0:924:4149","0:925:4152"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7479:462":{"id":"0:7479:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[140,9],"end":[140,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:847:248":{"id":"0:847:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[328,4],"end":[328,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3727-0:7621:8665":{"id":"b:1:3727-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5843:248":{"id":"0:5843:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/string.rs","begin":[2474,4],"end":[2474,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"str"}}}},"0:7275":{"id":"0:7275","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3201,0],"end":[3211,1]},"visibility":"default","docs":"Implements comparison of vectors, [lexicographically](Ord#lexicographical-comparison).","links":{"Ord#lexicographical-comparison":"1:2701:194"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A1"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A2"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A1"}}],"bindings":[]}}}},"items":["0:7279:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:910:4064":{"id":"0:910:4064","crate_id":0,"name":"into_iter_sorted","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[976,4],"end":[978,5]},"visibility":"public","docs":"Returns an iterator which retrieves elements in heap order.\nThis method consumes the original heap.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_into_iter_sorted)]\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4, 5]);\n\nassert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), [5, 4]);\n```","links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1882":{"id":"0:1882","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2006,0],"end":[2017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1885:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4511:311":{"id":"0:4511:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1106,4],"end":[1108,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4831":{"id":"0:4831","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1132,0],"end":[1132,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7641":{"id":"0:7641","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[362,36],"end":[362,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7642:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7643":{"id":"0:7643","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[401,47],"end":[401,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7644:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:386:1252":{"id":"0:386:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/boxed.rs","begin":[1357,4],"end":[1359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1568:209":{"id":"b:1:2898-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6253":{"id":"0:6253","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2961,0],"end":[2990,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6256:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5681:9424":{"id":"0:5681:9424","crate_id":0,"name":"from_utf16be","span":{"filename":"library/alloc/src/string.rs","begin":[827,4],"end":[837,5]},"visibility":"public","docs":"Decode a UTF-16BE–encoded vector `v` into a `String`, returning [`Err`]\nif `v` contains any invalid data.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(str_from_utf16_endian)]\n// 𝄞music\nlet v = &[0xD8, 0x34, 0xDD, 0x1E, 0x00, 0x6d, 0x00, 0x75,\n          0x00, 0x73, 0x00, 0x69, 0x00, 0x63];\nassert_eq!(String::from(\"𝄞music\"),\n           String::from_utf16be(v).unwrap());\n\n// 𝄞mu<invalid>ic\nlet v = &[0xD8, 0x34, 0xDD, 0x1E, 0x00, 0x6d, 0x00, 0x75,\n          0xD8, 0x00, 0x00, 0x69, 0x00, 0x63];\nassert!(String::from_utf16be(v).is_err());\n```","links":{"`Err`":"1:41636:135"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"str_from_utf16_endian\", issue = \"116258\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7379:462":{"id":"0:7379:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1491,9],"end":[1491,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4513:955":{"id":"0:4513:955","crate_id":0,"name":"iter_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1149,4],"end":[1152,5]},"visibility":"public","docs":"Returns a front-to-back iterator that returns mutable references.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nfor num in buf.iter_mut() {\n    *num = *num - 2;\n}\nlet b: &[_] = &[&mut 3, &mut 1, &mut 2];\nassert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4943":{"id":"0:4943","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[343,0],"end":[343,92]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3599:3007","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:7480:4175":{"id":"b:1:8171-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3727-0:3238:4057":{"id":"b:1:3727-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5823":{"id":"0:5823","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2364,0],"end":[2369,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5824:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4746:3305":{"id":"0:4746:3305","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":"Returns the contents of this `CString` as a slice of bytes.\n\nThe returned slice does **not** contain the trailing nul\nterminator, and it is guaranteed to not have any interior nul\nbytes. If you need the nul terminator, use\n[`CString::as_bytes_with_nul`] instead.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.as_bytes();\nassert_eq!(bytes, &[b'f', b'o', b'o']);\n```","links":{"`CString::as_bytes_with_nul`":"0:4747:7310"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7444:209":{"id":"b:1:2903-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5600:3355":{"id":"0:5600:3355","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/str.rs","begin":[208,4],"end":[208,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:3727-0:732:118":{"id":"b:1:3727-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7955:1135":{"id":"0:7955:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[31,0],"end":[31,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:3635:181":{"id":"a:1:32053:3459-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2103:4931":{"id":"0:2103:4931","crate_id":0,"name":"CursorMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2820,0],"end":[2827,1]},"visibility":"public","docs":"A cursor over a `BTreeMap` with editing operations.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the map during iteration. This is because the lifetime of its yielded\nreferences is tied to its own lifetime, instead of just the underlying map. This means\ncursors cannot yield multiple elements at once.\n\nCursors always point to a gap between two elements in the map, and can\noperate on the two immediately adjacent elements.\n\nA `CursorMut` is created with the [`BTreeMap::lower_bound_mut`] and [`BTreeMap::upper_bound_mut`]\nmethods.","links":{"`BTreeMap::upper_bound_mut`":"0:2087:4953","`BTreeMap::lower_bound_mut`":"0:2083:4930"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:2136","0:2173","a:1:3146:11953-0:2103:4931","a:1:32053:3459-0:2103:4931","a:1:3111:246-0:2103:4931","a:1:31996:236-0:2103:4931","a:1:41612:4469-0:2103:4931","a:1:41611:4468-0:2103:4931","b:1:2888-0:2103:4931","b:1:2618-0:2103:4931","b:1:2615-0:2103:4931","b:1:3727-0:2103:4931","b:1:2892-0:2103:4931","b:1:2903-0:2103:4931","b:1:2898-0:2103:4931","0:2109"]}}},"a:1:32053:3459-0:3648:4057":{"id":"a:1:32053:3459-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3976:462":{"id":"0:3976:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2123,4],"end":[2127,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2134:4987":{"id":"0:2134:4987","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2926,4],"end":[2928,5]},"visibility":"public","docs":"Returns a reference to the key and value of the next element without\nmoving the cursor.\n\nIf the cursor is at the end of the map then `None` is returned","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4755:651":{"id":"0:4755:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[703,4],"end":[707,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6120:359":{"id":"0:6120:359","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/sync.rs","begin":[1284,4],"end":[1287,5]},"visibility":"public","docs":"Converts to `Arc<T>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut five = Arc::<u32>::new_uninit();\n\n// Deferred initialization:\nArc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{"mem::MaybeUninit::assume_init":"1:1821:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:1546:4541":{"id":"a:1:41611:4468-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:6681:4175":{"id":"a:1:41612:4469-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5669:7286":{"id":"0:5669:7286","crate_id":0,"name":"from_utf8","span":{"filename":"library/alloc/src/string.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"Converts a vector of bytes to a `String`.\n\nA string ([`String`]) is made of bytes ([`u8`]), and a vector of bytes\n([`Vec<u8>`]) is made of bytes, so this function converts between the\ntwo. Not all byte slices are valid `String`s, however: `String`\nrequires that it is valid UTF-8. `from_utf8()` checks to ensure that\nthe bytes are valid UTF-8, and then does the conversion.\n\nIf you are sure that the byte slice is valid UTF-8, and you don't want\nto incur the overhead of the validity check, there is an unsafe version\nof this function, [`from_utf8_unchecked`], which has the same behavior\nbut skips the check.\n\nThis method will take care to not copy the vector, for efficiency's\nsake.\n\nIf you need a [`&str`] instead of a `String`, consider\n[`str::from_utf8`].\n\nThe inverse of this method is [`into_bytes`].\n\n# Errors\n\nReturns [`Err`] if the slice is not UTF-8 with a description as to why the\nprovided bytes are not UTF-8. The vector you moved in is also included.\n\n# Examples\n\nBasic usage:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\nIncorrect bytes:\n\n```\n// some invalid bytes, in a vector\nlet sparkle_heart = vec![0, 159, 146, 150];\n\nassert!(String::from_utf8(sparkle_heart).is_err());\n```\n\nSee the docs for [`FromUtf8Error`] for more details on what you can do\nwith this error.\n\n[`from_utf8_unchecked`]: String::from_utf8_unchecked\n[`Vec<u8>`]: crate::vec::Vec \"Vec\"\n[`&str`]: prim@str \"&str\"\n[`into_bytes`]: String::into_bytes","links":{"String::into_bytes":"0:5690:7197","crate::vec::Vec":"0:7048:263","String::from_utf8_unchecked":"0:5689:8926","prim@str":"1:52084:1672","`Err`":"1:41636:135","`String`":"0:7632:242","`u8`":"1:52095:1800","`str::from_utf8`":"1:12360:7286","`FromUtf8Error`":"0:7645:9281"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7048:263":{"id":"a:1:3111:246-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1414:3917":{"id":"0:1414:3917","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[448,4],"end":[450,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.get(), &12);\n}\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4130":{"id":"0:4130","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[272,0],"end":[272,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5742:3305":{"id":"0:5742:3305","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[2009,4],"end":[2011,5]},"visibility":"public","docs":"Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.\n\n# Examples\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n```","links":{"`u8`":"1:52095:1800"},"attrs":["#[must_use]","#[stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3469":{"id":"0:3469","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1466,0],"end":[1494,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3472:172","0:3473:1167","0:3474:3429","0:3475:3431","0:3476:4798","0:3477:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6613":{"id":"0:6613","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[243,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6616:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2079:974":{"id":"0:2079:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2503,4],"end":[2505,5]},"visibility":"public","docs":"Returns the number of elements in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3330:65":{"id":"0:3330:65","crate_id":0,"name":"union","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[566,4],"end":[571,5]},"visibility":"public","docs":"Visits the elements representing the union,\ni.e., all the elements in `self` or `other`, without duplicates,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\n\nlet union: Vec<_> = a.union(&b).cloned().collect();\nassert_eq!(union, [1, 2]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3899":{"id":"0:3899","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1988,0],"end":[1993,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3902:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5225":{"id":"0:5225","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2798,0],"end":[2798,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}}},"0:5928":{"id":"0:5928","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2945,0],"end":[2949,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5929:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:3792:4918":{"id":"a:1:32053:3459-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:670:810":{"id":"0:670:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2328,4],"end":[2352,5]},"visibility":"default","docs":"Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_string_error = \"a string error\".to_string();\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`String`":"0:7632:242","`Sync`":"1:3111:246","`Send`":"1:31996:236","`Error`":"1:2951:136"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7621:8665":{"id":"a:1:31996:236-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:748:3662":{"id":"0:748:3662","crate_id":0,"name":"is_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[253,4],"end":[255,5]},"visibility":"public","docs":"Returns true if the data is owned, i.e. if `to_mut` would be a no-op.\n\n# Examples\n\n```\n#![feature(cow_is_borrowed)]\nuse std::borrow::Cow;\n\nlet cow: Cow<'_, str> = Cow::Owned(\"moo\".to_string());\nassert!(cow.is_owned());\n\nlet bull = Cow::Borrowed(\"...moo?\");\nassert!(!bull.is_owned());\n```","links":{},"attrs":["#[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]","#[rustc_const_unstable(feature = \"const_cow_is_borrowed\", issue = \"65143\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1342:4372":{"id":"b:1:2898-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:903:4049":{"id":"0:903:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[919,4],"end":[936,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns\n`false`. The elements are visited in unsorted (and unspecified) order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from([-10, -5, 1, 2, 4, 13]);\n\nheap.retain(|x| x % 2 == 0); // only keep even numbers\n\nassert_eq!(heap.into_sorted_vec(), [-10, 2, 4])\n```","links":{},"attrs":["#[stable(feature = \"binary_heap_retain\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2061:917":{"id":"0:2061:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2332,4],"end":[2334,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `BTreeMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1826":{"id":"0:1826","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1859,0],"end":[1870,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1829:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:1536:4534":{"id":"a:1:41612:4469-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3111:246-0:3238:4057":{"id":"a:1:3111:246-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5796:3569":{"id":"0:5796:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:1480:4509":{"id":"b:1:2618-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4676":{"id":"0:4676","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[65,0],"end":[77,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4677:961"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5831:198":{"id":"0:5831:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2427,4],"end":[2427,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:775:780":{"id":"0:775:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/borrow.rs","begin":[401,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1943:172":{"id":"0:1943:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2120,4],"end":[2120,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"0:248":{"id":"0:248","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[155,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:250:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:417:3318":{"id":"0:417:3318","crate_id":0,"name":"write_i64","span":{"filename":"library/alloc/src/boxed.rs","begin":[1429,4],"end":[1431,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:576:107":{"id":"0:576:107","crate_id":0,"name":"CallOnceFuture","span":{"filename":"library/alloc/src/boxed.rs","begin":[2039,4],"end":[2039,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"CallOnceFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"AsyncFnOnce","id":"1:3192:3006","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}}}}}}},"0:6635:810":{"id":"0:6635:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":"Creates a [`Borrowed`] variant of [`Cow`]\nfrom a reference to an array.\n\nThis conversion does not allocate or clone the data.\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed","links":{"crate::borrow::Cow::Borrowed":"0:735:3354","`Cow`":"0:732:118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"array":{"type":{"generic":"T"},"len":"N"}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1115:933":{"id":"0:1115:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1831,4],"end":[1833,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4]);\n\n// Print 1, 2, 3, 4 in arbitrary order\nfor x in heap.into_iter() {\n    // x has type i32, not &i32\n    println!(\"{x}\");\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1311:4371":{"id":"a:1:41612:4469-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:1568:209":{"id":"b:1:2618-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:7609:7098":{"id":"b:1:2892-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5043:3411":{"id":"0:5043:3411","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/rc.rs","begin":[1907,4],"end":[1914,5]},"visibility":"public","docs":"Downcasts the `Rc<dyn Any>` to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\nuse std::rc::Rc;\n\nlet x: Rc<dyn Any> = Rc::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:5041:3409"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5800:3569":{"id":"0:5800:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2247,4],"end":[2249,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5753":{"id":"0:5753","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2095,0],"end":[2103,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5754:462","0:5755:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:500:780":{"id":"0:500:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1911,4],"end":[1913,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621:3458":{"id":"0:621:3458","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[2119,4],"end":[2121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5270:462":{"id":"0:5270:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/rc.rs","begin":[3288,4],"end":[3293,5]},"visibility":"default","docs":"Makes a clone of the `Weak` pointer that points to the same allocation.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet weak_five = Rc::downgrade(&Rc::new(5));\n\nlet _ = Weak::clone(&weak_five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7553:7100":{"id":"a:1:3146:11953-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5782:4213":{"id":"0:5782:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/string.rs","begin":[2200,4],"end":[2202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6205:8336":{"id":"0:6205:8336","crate_id":0,"name":"make_mut","span":{"filename":"library/alloc/src/sync.rs","begin":[2170,4],"end":[2221,5]},"visibility":"public","docs":"Makes a mutable reference into the given `Arc`.\n\nIf there are other `Arc` pointers to the same allocation, then `make_mut` will\n[`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\nreferred to as clone-on-write.\n\nHowever, if there are no other `Arc` pointers to this allocation, but some [`Weak`]\npointers, then the [`Weak`] pointers will be dissociated and the inner value will not\nbe cloned.\n\nSee also [`get_mut`], which will fail rather than cloning the inner value\nor dissociating [`Weak`] pointers.\n\n[`clone`]: Clone::clone\n[`get_mut`]: Arc::get_mut\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet mut data = Arc::new(5);\n\n*Arc::make_mut(&mut data) += 1;         // Won't clone anything\nlet mut other_data = Arc::clone(&data); // Won't clone inner data\n*Arc::make_mut(&mut data) += 1;         // Clones inner data\n*Arc::make_mut(&mut data) += 1;         // Won't clone anything\n*Arc::make_mut(&mut other_data) *= 2;   // Won't clone anything\n\n// Now `data` and `other_data` point to different allocations.\nassert_eq!(*data, 8);\nassert_eq!(*other_data, 12);\n```\n\n[`Weak`] pointers will be dissociated:\n\n```\nuse std::sync::Arc;\n\nlet mut data = Arc::new(75);\nlet weak = Arc::downgrade(&data);\n\nassert!(75 == *data);\nassert!(75 == *weak.upgrade().unwrap());\n\n*Arc::make_mut(&mut data) += 1;\n\nassert!(76 == *data);\nassert!(weak.upgrade().is_none());\n```","links":{"`Weak`":"0:6039:8069","Arc::get_mut":"0:6211:4637","Clone::clone":"1:2632:462"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"arc_unique\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:700:430":{"id":"0:700:430","crate_id":0,"name":"cause","span":{"filename":"library/alloc/src/boxed.rs","begin":[2474,4],"end":[2476,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6121":{"id":"0:6121","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1290,0],"end":[1330,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6124:359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:366:60":{"id":"0:366:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/boxed.rs","begin":[1263,4],"end":[1266,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4233:6996":{"id":"0:4233:6996","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[57,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1685:4175":{"id":"0:1685:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1562,4],"end":[1562,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"b:1:2618-0:7412:5026":{"id":"b:1:2618-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:943:4057":{"id":"a:1:31996:236-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:317:3045":{"id":"0:317:3045","crate_id":0,"name":"new_zeroed_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[516,4],"end":[527,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes in the provided allocator.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet zero = Box::<u32, _>::new_zeroed_in(System);\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1535:780":{"id":"0:1535:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[502,4],"end":[504,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1939":{"id":"0:1939","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2119,0],"end":[2133,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1943:172","0:1944:1167","0:1946:3429","0:1947:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7613:462":{"id":"0:7613:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,9],"end":[227,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1527:4528":{"id":"b:1:2888-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5174":{"id":"0:5174","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2510,0],"end":[2525,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:5176:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5665":{"id":"0:5665","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[427,0],"end":[1992,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5666:1153","0:5667:2679","0:5668:2384","0:5669:7286","0:5670:7436","0:5672:9382","0:5673:9395","0:5675:9407","0:5678:9415","0:5681:9424","0:5684:9430","0:5687:7372","0:5688:3544","0:5689:8926","0:5690:7197","0:5691:336","0:5692:9496","0:5693:3688","0:5694:9514","0:5696:2680","0:5697:2750","0:5698:2768","0:5699:2760","0:5700:2769","0:5701:2775","0:5702:4123","0:5703:3980","0:5705:3305","0:5706:6589","0:5707:3924","0:5708:4222","0:5709:9601","0:5715:4049","0:5725:4498","0:5728:9637","0:5729:9648","0:5730:974","0:5731:3440","0:5732:4749","0:5733:4152","0:5734:4149","0:5736:9701","0:5738:9706","0:5739:1965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:7527:2620":{"id":"a:1:32053:3459-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5700:2769":{"id":"0:5700:2769","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/string.rs","begin":[1291,4],"end":[1293,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional` bytes\nmore than the current length. Unlike [`try_reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `try_reserve_exact`, capacity will be greater than or\nequal to `self.len() + additional` if it returns `Ok(())`.\nDoes nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: String::try_reserve\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &str) -> Result<String, TryReserveError> {\n    let mut output = String::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.push_str(data);\n\n    Ok(output)\n}\n# process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n```","links":{"String::try_reserve":"0:5699:2760"},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6117":{"id":"0:6117","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1251,0],"end":[1288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6120:359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:7714:4776":{"id":"a:1:3146:11953-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13155:29480":{"id":"1:13155:29480","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43643:8935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7067:6959":{"id":"0:7067:6959","crate_id":0,"name":"into_raw_parts_with_alloc","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[900,4],"end":[907,5]},"visibility":"public","docs":"Decomposes a `Vec<T>` into its raw components: `(pointer, length, capacity, allocator)`.\n\nReturns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to [`from_raw_parts_in`].\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Vec`. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a `Vec` with the [`from_raw_parts_in`] function, allowing\nthe destructor to perform the cleanup.\n\n[`from_raw_parts_in`]: Vec::from_raw_parts_in\n\n# Examples\n\n```\n#![feature(allocator_api, vec_into_raw_parts)]\n\nuse std::alloc::System;\n\nlet mut v: Vec<i32, System> = Vec::new_in(System);\nv.push(-1);\nv.push(0);\nv.push(1);\n\nlet (ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\nlet rebuilt = unsafe {\n    // We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    let ptr = ptr as *mut u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\nassert_eq!(rebuilt, [4294967295, 0, 1]);\n```","links":{"Vec::from_raw_parts_in":"0:7065:2729"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},{"primitive":"usize"},{"primitive":"usize"},{"generic":"A"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:43925:9748":{"id":"1:43925:9748","crate_id":1,"name":"strip_suffix_of","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"CharPredicateSearcher","id":"1:43903:12224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"F"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7444:209":{"id":"b:0:727-0:7444:209","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:7402:4039":{"id":"b:1:3727-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:4423:264":{"id":"a:1:41611:4468-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:751":{"id":"0:751","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[332,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"","id":"0:723:249","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:753:248","0:754:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3497":{"id":"0:3497","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1539,0],"end":[1543,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3500:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2003":{"id":"0:2003","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2239,0],"end":[2251,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2007:3569","0:2010:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:5854-0:7412:5026":{"id":"b:0:5854-0:7412:5026","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:3872:4776":{"id":"a:1:32053:3459-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:5854-0:7569:7099":{"id":"b:0:5854-0:7569:7099","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:1518:4524":{"id":"b:1:2898-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5706:6589":{"id":"0:5706:6589","crate_id":0,"name":"truncate","span":{"filename":"library/alloc/src/string.rs","begin":[1408,4],"end":[1413,5]},"visibility":"public","docs":"Shortens this `String` to the specified length.\n\nIf `new_len` is greater than the string's current length, this has no\neffect.\n\nNote that this method has no effect on the allocated capacity\nof the string\n\n# Panics\n\nPanics if `new_len` does not lie on a [`char`] boundary.\n\n# Examples\n\n```\nlet mut s = String::from(\"hello\");\n\ns.truncate(2);\n\nassert_eq!(\"he\", s);\n```","links":{"`char`":"1:52078:458"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5853:1730":{"id":"0:5853:1730","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2535,4],"end":[2535,34]},"visibility":"default","docs":"Converts the given value to a `String`.\n\n# Examples\n\n```\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```","links":{},"attrs":["#[rustc_conversion_suggestion]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"to_string_method\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:4794:810":{"id":"0:4794:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[884,4],"end":[887,5]},"visibility":"default","docs":"Converts a `&CStr` into a `Arc<CStr>`,\nby copying the contents into a newly allocated [`Arc`].","links":{"`Arc`":"0:6007:71"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6422:10441":{"id":"0:6422:10441","crate_id":0,"name":"wake","span":{"filename":"library/alloc/src/task.rs","begin":[271,4],"end":[271,28]},"visibility":"default","docs":"Wake this task.","links":{},"attrs":["#[unstable(feature = \"local_waker\", issue = \"118959\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:3146:11953-0:6554:4150":{"id":"a:1:3146:11953-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7134:11148":{"id":"0:7134:11148","crate_id":0,"name":"pop_if","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2078,4],"end":[2084,5]},"visibility":"public","docs":"Removes and returns the last element in a vector if the predicate\nreturns `true`, or [`None`] if the predicate returns false or the vector\nis empty.\n\n# Examples\n\n```\n#![feature(vec_pop_if)]\n\nlet mut vec = vec![1, 2, 3, 4];\nlet pred = |x: &mut i32| *x % 2 == 0;\n\nassert_eq!(vec.pop_if(pred), Some(4));\nassert_eq!(vec, [1, 2, 3]);\nassert_eq!(vec.pop_if(pred), None);\n```","links":{"`None`":"1:41519:190"},"attrs":["#[unstable(feature = \"vec_pop_if\", issue = \"122741\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7480:4175":{"id":"b:1:2618-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1335,0],"end":[1341,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:377:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:4074:4150":{"id":"b:1:2903-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:750:3683":{"id":"0:750:3683","crate_id":0,"name":"into_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[323,4],"end":[328,5]},"visibility":"public","docs":"Extracts the owned data.\n\nClones the data if it is not already owned.\n\n# Examples\n\nCalling `into_owned` on a `Cow::Borrowed` returns a clone of the borrowed data:\n\n```\nuse std::borrow::Cow;\n\nlet s = \"Hello world!\";\nlet cow = Cow::Borrowed(s);\n\nassert_eq!(\n  cow.into_owned(),\n  String::from(s)\n);\n```\n\nCalling `into_owned` on a `Cow::Owned` returns the owned data. The data is moved out of the\n`Cow` without being cloned.\n\n```\nuse std::borrow::Cow;\n\nlet s = \"Hello world!\";\nlet cow: Cow<'_, str> = Cow::Owned(String::from(s));\n\nassert_eq!(\n  cow.into_owned(),\n  String::from(s)\n);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1033":{"id":"0:1033","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1652,0],"end":[1658,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1036:311"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4629:933":{"id":"0:4629:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2818,4],"end":[2820,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5501:3355":{"id":"0:5501:3355","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/slice.rs","begin":[820,4],"end":[820,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:7949:1135":{"id":"0:7949:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[29,0],"end":[29,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7372:4175":{"id":"a:1:32053:3459-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:3245:5783":{"id":"b:1:3727-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:7621:8665":{"id":"a:1:3111:246-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:7480:4175":{"id":"a:1:41612:4469-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:6681:4175":{"id":"b:1:3727-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2034:678":{"id":"0:2034:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2287,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4526:4152":{"id":"0:4526:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1466,4],"end":[1470,5]},"visibility":"public","docs":"Clears the deque, removing all values.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\ndeque.push_back(1);\ndeque.clear();\nassert!(deque.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4613:172":{"id":"0:4613:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2793,4],"end":[2793,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7194:248":{"id":"0:7194:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2784,4],"end":[2784,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"generic":"T"}}}}},"0:7279:1252":{"id":"0:7279:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3208,4],"end":[3210,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A2"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7609:7098":{"id":"a:1:41611:4468-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:983":{"id":"0:983","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1530,0],"end":[1535,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:986:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1551":{"id":"0:1551","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[539,0],"end":[543,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1555:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5032:1319":{"id":"0:5032:1319","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/rc.rs","begin":[1719,4],"end":[1721,5]},"visibility":"public","docs":"Returns `true` if the two `Rc`s point to the same allocation in a vein similar to\n[`ptr::eq`]. This function ignores the metadata of  `dyn Trait` pointers.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\nlet same_five = Rc::clone(&five);\nlet other_five = Rc::new(5);\n\nassert!(Rc::ptr_eq(&five, &same_five));\nassert!(!Rc::ptr_eq(&five, &other_five));\n```","links":{"`ptr::eq`":"1:2561:678"},"attrs":["#[inline]","#[stable(feature = \"ptr_eq\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4501:6589":{"id":"0:4501:6589","crate_id":0,"name":"truncate","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1059,4],"end":[1101,5]},"visibility":"public","docs":"Shortens the deque, keeping the first `len` elements and dropping\nthe rest.\n\nIf `len` is greater or equal to the deque's current length, this has\nno effect.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\nbuf.truncate(1);\nassert_eq!(buf, [5]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras\", since = \"1.16.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1465:4057":{"id":"a:1:32053:3459-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:3397:4776":{"id":"b:1:3727-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13186:29482":{"id":"1:13186:29482","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12812:2367","str::split":"1:13174:4225","prim@char":"1:52078:458","str::split_terminator":"1:13183:29481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43447:8940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7511":{"id":"0:7511","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2734,0],"end":[2734,63]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7517:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:7412:5026":{"id":"b:1:2898-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7297:780":{"id":"0:7297:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3250,4],"end":[3252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:3271:5793":{"id":"a:1:41611:4468-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:3661:4509":{"id":"b:1:2615-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7547":{"id":"0:7547","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,16],"end":[80,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7548:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2163:5012":{"id":"0:2163:5012","crate_id":0,"name":"insert_after_unchecked","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3117,4],"end":[3144,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap before the\nnewly inserted element.\n\n# Safety\n\nYou must ensure that the `BTreeMap` invariants are maintained.\nSpecifically:\n\n* The key of the newly inserted element must be unique in the tree.\n* All keys in the tree must remain in sorted order.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13140:3920":{"id":"1:13140:3920","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5383-1:11290:8721":{"id":"0:5383-1:11290:8721","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[67,30],"end":[67,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RSplitMut","name":"RSplitMut","id":"1:11290:8721","glob":false}}},"a:1:3111:246-0:7392:4150":{"id":"a:1:3111:246-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1912:172":{"id":"0:1912:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2055,4],"end":[2055,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"0:5101:651":{"id":"0:5101:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/rc.rs","begin":[2162,4],"end":[2179,5]},"visibility":"default","docs":"Drops the `Rc`.\n\nThis will decrement the strong reference count. If the strong reference\ncount reaches zero then the only other references (if any) are\n[`Weak`], so we `drop` the inner value.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo  = Rc::new(Foo);\nlet foo2 = Rc::clone(&foo);\n\ndrop(foo);    // Doesn't print anything\ndrop(foo2);   // Prints \"dropped!\"\n```","links":{"`Weak`":"0:5217:8069"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2141:1167":{"id":"0:2141:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2947,4],"end":[2950,5]},"visibility":"public","docs":"Advances the cursor to the next gap, returning the key and value of the\nelement that it moved over.\n\nIf the cursor is already at the end of the map then `None` is returned\nand the cursor is not moved.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5377-1:43277:8714":{"id":"0:5377-1:43277:8714","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[65,22],"end":[65,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RChunks","name":"RChunks","id":"1:43277:8714","glob":false}}},"b:1:3727-0:2089:4918":{"id":"b:1:3727-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:663:810":{"id":"0:663:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2267,4],"end":[2269,5]},"visibility":"default","docs":"Converts a type of [`Error`] into a box of dyn [`Error`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\nuse std::mem;\n\n#[derive(Debug)]\nstruct AnError;\n\nimpl fmt::Display for AnError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"An error\")\n    }\n}\n\nimpl Error for AnError {}\n\nlet an_error = AnError;\nassert!(0 == mem::size_of_val(&an_error));\nlet a_boxed_error = Box::<dyn Error>::from(an_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Error`":"1:2951:136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"generic":"E"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3737":{"id":"0:3737","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1170,0],"end":[1187,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3740:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:2103:4931":{"id":"b:1:2898-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:7597:7097":{"id":"a:1:3111:246-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7218:917":{"id":"0:7218:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2855,4],"end":[2857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:39126:4364","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7472:4175":{"id":"b:1:2898-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:1546:4541":{"id":"a:1:31996:236-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5262:1319":{"id":"0:5262:1319","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/rc.rs","begin":[3229,4],"end":[3231,5]},"visibility":"public","docs":"Returns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`], or if\nboth don't point to any allocation (because they were created with `Weak::new()`). However,\nthis function ignores the metadata of  `dyn Trait` pointers.\n\n# Notes\n\nSince this compares pointers it means that `Weak::new()` will equal each\nother, even though they don't point to any allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet first_rc = Rc::new(5);\nlet first = Rc::downgrade(&first_rc);\nlet second = Rc::downgrade(&first_rc);\n\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Rc::new(5);\nlet third = Rc::downgrade(&third_rc);\n\nassert!(!first.ptr_eq(&third));\n```\n\nComparing `Weak::new`.\n\n```\nuse std::rc::{Rc, Weak};\n\nlet first = Weak::new();\nlet second = Weak::new();\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Rc::new(());\nlet third = Rc::downgrade(&third_rc);\nassert!(!first.ptr_eq(&third));\n```","links":{"`ptr::eq`":"1:2561:678"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7048:263":{"id":"b:1:2888-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1613:4632":{"id":"0:1613:4632","crate_id":0,"name":"contains_key","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[919,4],"end":[925,5]},"visibility":"public","docs":"Returns `true` if the map contains a value for the specified key.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7519":{"id":"0:7519","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2735,0],"end":[2735,67]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7525:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:693":{"id":"0:693","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2447,0],"end":[2464,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:696:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7645:9281":{"id":"0:7645:9281","crate_id":0,"name":"FromUtf8Error","span":{"filename":"library/alloc/src/string.rs","begin":[403,0],"end":[406,1]},"visibility":"public","docs":"A possible error value when converting a `String` from a UTF-8 byte vector.\n\nThis type is the error type for the [`from_utf8`] method on [`String`]. It\nis designed in such a way to carefully avoid reallocations: the\n[`into_bytes`] method will give back the byte vector that was used in the\nconversion attempt.\n\n[`from_utf8`]: String::from_utf8\n[`into_bytes`]: FromUtf8Error::into_bytes\n\nThe [`Utf8Error`] type provided by [`std::str`] represents an error that may\noccur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\nan analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`\nthrough the [`utf8_error`] method.\n\n[`Utf8Error`]: str::Utf8Error \"std::str::Utf8Error\"\n[`std::str`]: core::str \"std::str\"\n[`&str`]: prim@str \"&str\"\n[`utf8_error`]: FromUtf8Error::utf8_error\n\n# Examples\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert!(value.is_err());\nassert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n```","links":{"FromUtf8Error::into_bytes":"0:5743:7197","prim@str":"1:52084:1672","`u8`":"1:52095:1800","`String`":"0:7632:242","FromUtf8Error::utf8_error":"0:5744:7287","String::from_utf8":"0:5669:7286","core::str":"1:12353:1672","str::Utf8Error":"1:43325:7107"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:5741","a:1:3146:11953-0:7645:9281","a:1:32053:3459-0:7645:9281","a:1:3111:246-0:7645:9281","a:1:31996:236-0:7645:9281","a:1:41612:4469-0:7645:9281","a:1:41611:4468-0:7645:9281","b:0:5854-0:7645:9281","b:0:727-0:7645:9281","b:1:2888-0:7645:9281","b:1:2618-0:7645:9281","b:1:2615-0:7645:9281","b:1:3727-0:7645:9281","b:1:2892-0:7645:9281","b:1:2903-0:7645:9281","b:1:2898-0:7645:9281","0:7653","0:7643","0:5749","0:7648","0:7650","0:5745","0:7651"]}}},"0:3767":{"id":"0:3767","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1241,0],"end":[1241,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6565:780":{"id":"0:6565:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5623:8869":{"id":"0:5623:8869","crate_id":0,"name":"to_ascii_lowercase","span":{"filename":"library/alloc/src/str.rs","begin":[591,4],"end":[595,5]},"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13248:8870"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4979:2669":{"id":"0:4979:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/rc.rs","begin":[688,4],"end":[695,5]},"visibility":"public","docs":"Constructs a new `Rc` in the provided allocator.\n\n# Examples\n\n```\n#![feature(allocator_api)]\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet five = Rc::new_in(5, System);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4500:4123":{"id":"0:4500:4123","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[963,4],"end":[1037,5]},"visibility":"public","docs":"Shrinks the capacity of the deque with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to(6);\nassert!(buf.capacity() >= 6);\nbuf.shrink_to(0);\nassert!(buf.capacity() >= 4);\n```","links":{},"attrs":["#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7380:4065":{"id":"b:1:2892-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:7048:263":{"id":"a:1:32053:3459-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:7609:7098":{"id":"a:1:32053:3459-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2620:3455":{"id":"1:2620:3455","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1851":{"id":"0:1851","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1916,0],"end":[1929,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1856:172","0:1857:1167","0:1858:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5364-1:43185:8704":{"id":"0:5364-1:43185:8704","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[57,22],"end":[57,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::Chunks","name":"Chunks","id":"1:43185:8704","glob":false}}},"0:1773:1167":{"id":"0:1773:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1752,4],"end":[1754,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3823:6239":{"id":"0:3823:6239","crate_id":0,"name":"move_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1399,4],"end":[1413,5]},"visibility":"public","docs":"Moves the cursor to the next element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:4074:4150":{"id":"a:1:41612:4469-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13177:8726":{"id":"1:13177:8726","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12628:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5041:3409":{"id":"0:5041:3409","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/rc.rs","begin":[1866,4],"end":[1877,5]},"visibility":"public","docs":"Attempt to downcast the `Rc<dyn Any>` to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\nuse std::rc::Rc;\n\nfn print_if_string(value: Rc<dyn Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Rc::new(my_string));\nprint_if_string(Rc::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_downcast\", since = \"1.29.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:8953":{"id":"1:13145:8953","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13144:6461","str::split_at_mut_checked":"1:13147:28432"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:6554:4150":{"id":"b:1:2618-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:43923:9746":{"id":"1:43923:9746","crate_id":1,"name":"strip_prefix_of","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:2103:4931":{"id":"a:1:41611:4468-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1944:1167":{"id":"0:1944:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2122,4],"end":[2124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2182:5031":{"id":"0:2182:5031","crate_id":0,"name":"remove_next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3379,4],"end":[3381,5]},"visibility":"public","docs":"Removes the next element from the `BTreeMap`.\n\nThe element that was removed is returned. The cursor position is\nunchanged (before the removed element).","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4995:3118":{"id":"0:4995:3118","crate_id":0,"name":"new_zeroed_slice","span":{"filename":"library/alloc/src/rc.rs","begin":[1022,4],"end":[1033,5]},"visibility":"public","docs":"Constructs a new reference-counted slice with uninitialized contents, with the memory being\nfilled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::rc::Rc;\n\nlet values = Rc::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7085:4498":{"id":"0:7085:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1535,4],"end":[1569,5]},"visibility":"public","docs":"Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.\n\n# Panics\n\nPanics if `index > len`.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.insert(1, 4);\nassert_eq!(vec, [1, 4, 2, 3]);\nvec.insert(4, 5);\nassert_eq!(vec, [1, 4, 2, 3, 5]);\n```\n\n# Time complexity\n\nTakes *O*([`Vec::len`]) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.","links":{"`Vec::len`":"0:7141:974"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["element",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7444:209":{"id":"b:1:2615-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:3271:5793":{"id":"a:1:32053:3459-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:1577:4553":{"id":"b:1:8171-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:3898:3429":{"id":"0:3898:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1982,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1480:4509":{"id":"a:1:3146:11953-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13180:28435":{"id":"1:13180:28435","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12812:2367","`DoubleEndedIterator`":"1:8205:129","prim@char":"1:52078:458","str::split":"1:13174:4225"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43397:8720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:6681:4175":{"id":"b:1:2888-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5947:3431":{"id":"0:5947:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/string.rs","begin":[3017,4],"end":[3019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:610":{"id":"0:509:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/boxed.rs","begin":[1930,4],"end":[1932,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3523:4798":{"id":"0:3523:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1590,4],"end":[1595,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7372:4175":{"id":"b:1:2888-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:732:118":{"id":"a:1:3111:246-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:122:2856":{"id":"0:122:2856","crate_id":0,"name":"grow_zeroed","span":{"filename":"library/alloc/src/alloc.rs","begin":[272,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ptr",{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}],["old_layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonNull","id":"1:2128:188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1948":{"id":"0:1948","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2136,0],"end":[2140,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1952:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:218:3019":{"id":"b:1:3727-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4499:2775":{"id":"0:4499:2775","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[938,4],"end":[940,5]},"visibility":"public","docs":"Shrinks the capacity of the deque as much as possible.\n\nIt will drop down as close as possible to the length but the allocator may still inform the\ndeque that there is space for a few more elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to_fit();\nassert!(buf.capacity() >= 4);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4494:2680":{"id":"0:4494:2680","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[751,4],"end":[753,5]},"visibility":"public","docs":"Returns the number of elements the deque can hold without\nreallocating.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet buf: VecDeque<i32> = VecDeque::with_capacity(10);\nassert!(buf.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8175:933":{"id":"1:8175:933","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5535-1:12628:8727":{"id":"0:5535-1:12628:8727","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[30,0],"end":[30,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::SplitInclusive","name":"SplitInclusive","id":"1:12628:8727","glob":false}}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2001,0],"end":[2008,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:550:974","0:551:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1113:172":{"id":"0:1113:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1810,4],"end":[1810,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:3830:4991":{"id":"0:3830:4991","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1471,4],"end":[1479,5]},"visibility":"public","docs":"Returns a reference to the previous element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6106:3113":{"id":"0:6106:3113","crate_id":0,"name":"new_uninit_slice","span":{"filename":"library/alloc/src/sync.rs","begin":[1133,4],"end":[1135,5]},"visibility":"public","docs":"Constructs a new atomically reference-counted slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut values = Arc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Arc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7936:678":{"id":"0:7936:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[27,0],"end":[27,126]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5350-1:11938:8693":{"id":"0:5350-1:11938:8693","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[47,32],"end":[47,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"from_ref\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::from_ref","name":"from_ref","id":"1:11938:8693","glob":false}}},"b:1:8171-0:7472:4175":{"id":"b:1:8171-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1063:651":{"id":"0:1063:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1720,4],"end":[1734,5]},"visibility":"default","docs":"Removes heap elements in heap order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13160:28443":{"id":"1:13160:28443","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1137:4213":{"id":"0:1137:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1877,4],"end":[1879,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2089:4918":{"id":"0:2089:4918","crate_id":0,"name":"Cursor","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2786,0],"end":[2790,1]},"visibility":"public","docs":"A cursor over a `BTreeMap`.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth.\n\nCursors always point to a gap between two elements in the map, and can\noperate on the two immediately adjacent elements.\n\nA `Cursor` is created with the [`BTreeMap::lower_bound`] and [`BTreeMap::upper_bound`] methods.","links":{"`BTreeMap::lower_bound`":"0:2081:4916","`BTreeMap::upper_bound`":"0:2085:4945"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:2128","a:1:3146:11953-0:2089:4918","a:1:32053:3459-0:2089:4918","a:1:3111:246-0:2089:4918","a:1:31996:236-0:2089:4918","a:1:41612:4469-0:2089:4918","a:1:41611:4468-0:2089:4918","b:0:727-0:2089:4918","b:1:2888-0:2089:4918","b:1:2618-0:2089:4918","b:1:2615-0:2089:4918","b:1:3727-0:2089:4918","b:1:2892-0:2089:4918","b:1:2903-0:2089:4918","b:1:2898-0:2089:4918","0:2095","0:2099"]}}},"0:5781:2350":{"id":"0:5781:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2195,4],"end":[2197,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["c",{"primitive":"char"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:1465:4057":{"id":"b:1:2618-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:412:3313":{"id":"0:412:3313","crate_id":0,"name":"write_u128","span":{"filename":"library/alloc/src/boxed.rs","begin":[1414,4],"end":[1416,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4754":{"id":"0:4754","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[701,0],"end":[708,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_drop\", since = \"1.13.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4755:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7664:1135":{"id":"0:7664:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2345,0],"end":[2345,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4579:678":{"id":"0:4579:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2690,4],"end":[2724,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5900:810":{"id":"0:5900:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2840,4],"end":[2842,5]},"visibility":"default","docs":"Converts a [`String`] into an [`Owned`] variant.\nNo heap allocation is performed, and the string\nis not copied.\n\n# Example\n\n```\n# use std::borrow::Cow;\nlet s = \"eggplant\".to_string();\nlet s2 = \"eggplant\".to_string();\nassert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));\n```\n\n[`Owned`]: crate::borrow::Cow::Owned \"borrow::Cow::Owned\"","links":{"crate::borrow::Cow::Owned":"0:738:3355","`String`":"0:7632:242"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6019":{"id":"0:6019","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[263,0],"end":[263,86]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:3397:4776":{"id":"a:1:41612:4469-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1992,0],"end":[1999,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:545:3437","0:546:3438"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:882:1153":{"id":"0:882:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[439,4],"end":[441,5]},"visibility":"public","docs":"Creates an empty `BinaryHeap` as a max-heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.push(4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_binary_heap_constructor\", issue =\n\"112353\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4177":{"id":"0:4177","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[105,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4180:3437","0:4181:7003","0:4182:7004","0:4185:7005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7930:678":{"id":"0:7930:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[26,0],"end":[26,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4965:2330":{"id":"0:4965:2330","crate_id":0,"name":"new_uninit","span":{"filename":"library/alloc/src/rc.rs","begin":[521,4],"end":[529,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut five = Rc::<u32>::new_uninit();\n\n// Deferred initialization:\nRc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5039":{"id":"0:5039","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1845,0],"end":[1915,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5041:3409","0:5043:3411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6217:651":{"id":"0:6217:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/sync.rs","begin":[2423,4],"end":[2464,5]},"visibility":"default","docs":"Drops the `Arc`.\n\nThis will decrement the strong reference count. If the strong reference\ncount reaches zero then the only other references (if any) are\n[`Weak`], so we `drop` the inner value.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo  = Arc::new(Foo);\nlet foo2 = Arc::clone(&foo);\n\ndrop(foo);    // Doesn't print anything\ndrop(foo2);   // Prints \"dropped!\"\n```","links":{"`Weak`":"0:6039:8069"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4597":{"id":"0:4597","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2767,0],"end":[2774,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:39126:4364","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4600:198","0:4601:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:7372:4175":{"id":"a:1:3146:11953-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31996:236-0:3872:4776":{"id":"a:1:31996:236-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:304:2330":{"id":"0:304:2330","crate_id":0,"name":"new_uninit","span":{"filename":"library/alloc/src/boxed.rs","begin":[243,4],"end":[245,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut five = Box::<u32>::new_uninit();\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584:362":{"id":"0:584:362","crate_id":0,"name":"async_call_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[2050,4],"end":[2052,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["args",{"generic":"Args"}]],"output":{"qualified_path":{"name":"CallRefFuture","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3187:3005","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}}},"0:1014":{"id":"0:1014","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1603,0],"end":[1609,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1017:311"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7402:4039":{"id":"a:1:31996:236-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1609:4614":{"id":"0:1609:4614","crate_id":0,"name":"last_key_value","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[834,4],"end":[840,5]},"visibility":"public","docs":"Returns the last key-value pair in the map.\nThe key in this pair is the maximum key in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"b\");\nmap.insert(2, \"a\");\nassert_eq!(map.last_key_value(), Some((&2, &\"a\")));\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7392:4150":{"id":"a:1:41611:4468-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3535":{"id":"0:3535","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1630,0],"end":[1645,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3538:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3580:462":{"id":"0:3580:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1793,4],"end":[1795,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4762:810":{"id":"0:4762:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[733,4],"end":[735,5]},"visibility":"default","docs":"Converts a [`CString`] into a <code>[Vec]<[u8]></code>.\n\nThe conversion consumes the [`CString`], and removes the terminating NUL byte.","links":{"u8":"1:52095:1800","Vec":"0:7048:263","`CString`":"0:7553:7100"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5254:334":{"id":"0:5254:334","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/rc.rs","begin":[2950,4],"end":[2963,5]},"visibility":"public","docs":"Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n\nThe pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even [`null`] otherwise.\n\n# Examples\n\n```\nuse std::rc::Rc;\nuse std::ptr;\n\nlet strong = Rc::new(\"hello\".to_owned());\nlet weak = Rc::downgrade(&strong);\n// Both point to the same object\nassert!(ptr::eq(&*strong, weak.as_ptr()));\n// The strong here keeps it alive, so we can still access the object.\nassert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n\ndrop(strong);\n// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behaviour.\n// assert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n```\n\n[`null`]: ptr::null","links":{"ptr::null":"1:2498:11860"},"attrs":["#[must_use]","#[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1121:4175":{"id":"0:1121:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1839,4],"end":[1839,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1903,0],"end":[1907,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:496:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:776":{"id":"0:776","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[410,0],"end":[418,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default\", since = \"1.11.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"constraint":[{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:778:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4189":{"id":"0:4189","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[151,0],"end":[159,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4191:974","0:4192:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7533:678":{"id":"0:7533:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,16],"end":[59,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5093":{"id":"0:5093","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2130,0],"end":[2130,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"deref_pure_trait\", issue = \"87121\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefPure","id":"1:3337:3011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7730:10536":{"id":"b:1:2903-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2888-0:7472:4175":{"id":"b:1:2888-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7240:933":{"id":"0:7240:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2969,4],"end":[2971,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8167:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3920:4175":{"id":"0:3920:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2027,4],"end":[2027,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:1024":{"id":"0:1024","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1628,0],"end":[1628,72]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1804:172":{"id":"0:1804:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1819,4],"end":[1819,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}}},"0:7705":{"id":"0:7705","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2352,0],"end":[2352,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7708:678","0:7709:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4814:780":{"id":"0:4814:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated, deprecated_in_future)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:3209:100":{"id":"b:1:3727-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7920":{"id":"0:7920","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[25,0],"end":[25,103]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7924:678","0:7925:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2080:3440":{"id":"0:2080:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2526,4],"end":[2528,5]},"visibility":"public","docs":"Returns `true` if the map contains no elements.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7632:242":{"id":"a:1:41611:4468-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2903-0:2114:4932":{"id":"b:1:2903-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6512":{"id":"0:6512","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[31,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6515:172","0:6516:1167","0:6517:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:481":{"id":"0:481","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1783,0],"end":[1840,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:483:3409","0:485:3411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5895":{"id":"0:5895","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2803,0],"end":[2820,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5897:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:785:335":{"id":"0:785:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/borrow.rs","begin":[433,4],"end":[435,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:766":{"id":"0:766","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[373,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:769:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4823:917":{"id":"0:4823:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1041,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_index",{"resolved_path":{"name":"ops::RangeFull","id":"1:39143:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7914":{"id":"0:7914","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[24,0],"end":[24,99]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7918:678","0:7919:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2133:4981":{"id":"0:2133:4981","crate_id":0,"name":"prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2906,4],"end":[2919,5]},"visibility":"public","docs":"Advances the cursor to the previous gap, returning the key and value of\nthe element that it moved over.\n\nIf the cursor is already at the start of the map then `None` is returned\nand the cursor is not moved.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4202-0:7480:4175":{"id":"0:4202-0:7480:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[45,0],"end":[45,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::into_iter::IntoIter","name":"IntoIter","id":"0:7480:4175","glob":false}}},"b:1:8171-0:4074:4150":{"id":"b:1:8171-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:638:1403":{"id":"0:638:1403","crate_id":0,"name":"resume","span":{"filename":"library/alloc/src/boxed.rs","begin":[2167,4],"end":[2169,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["arg",{"generic":"R"}]],"output":{"resolved_path":{"name":"CoroutineState","id":"1:39082:3009","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3301:3008","args":null}}}},{"type":{"qualified_path":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3301:3008","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:3271:5793":{"id":"b:1:2892-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:3209:100":{"id":"b:1:2903-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:4423:264":{"id":"b:1:2618-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4855-1:10221:142":{"id":"0:4855-1:10221:142","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[590,20],"end":[590,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Formatter","name":"Formatter","id":"1:10221:142","glob":false}}},"0:773":{"id":"0:773","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[397,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"constraint":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:775:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1355,0],"end":[1376,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:386:1252","0:387:1016","0:388:973","0:389:829","0:390:847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:664":{"id":"0:664","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2274,0],"end":[2309,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:667:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7730:10536":{"id":"0:7730:10536","crate_id":0,"name":"Splice","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[21,0],"end":[28,1]},"visibility":"public","docs":"A splicing iterator for `Vec`.\n\nThis struct is created by [`Vec::splice()`].\nSee its documentation for more.\n\n# Example\n\n```\nlet mut v = vec![0, 1, 2];\nlet new = [7, 8];\nlet iter: std::vec::Splice<'_, _> = v.splice(1.., new);\n```","links":{"`Vec::splice()`":"0:7262:9700"},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:7730:10536","a:1:32053:3459-0:7730:10536","a:1:3111:246-0:7730:10536","a:1:31996:236-0:7730:10536","a:1:41612:4469-0:7730:10536","a:1:41611:4468-0:7730:10536","b:1:8171-0:7730:10536","b:1:2888-0:7730:10536","b:1:2618-0:7730:10536","b:1:2615-0:7730:10536","b:1:3727-0:7730:10536","b:1:2892-0:7730:10536","b:1:2903-0:7730:10536","b:1:2898-0:7730:10536","0:6525","0:6512","0:6518","0:7736","0:6522"]}}},"b:1:3727-0:7048:263":{"id":"b:1:3727-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:3305:5807":{"id":"b:1:3727-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7262:9700":{"id":"0:7262:9700","crate_id":0,"name":"splice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3101,4],"end":[3107,5]},"visibility":"public","docs":"Creates a splicing iterator that replaces the specified range in the vector\nwith the given `replace_with` iterator and yields the removed items.\n`replace_with` does not need to be the same length as `range`.\n\n`range` is removed even if the iterator is not consumed until the end.\n\nIt is unspecified how many elements are removed from the vector\nif the `Splice` value is leaked.\n\nThe input iterator `replace_with` is only consumed when the `Splice` value is dropped.\n\nThis is optimal if:\n\n* The tail (elements in the vector after `range`) is empty,\n* or `replace_with` yields fewer or equal elements than `range`’s length\n* or the lower bound of its `size_hint()` is exact.\n\nOtherwise, a temporary vector is allocated and the tail is moved twice.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3, 4];\nlet new = [7, 8, 9];\nlet u: Vec<_> = v.splice(1..3, new).collect();\nassert_eq!(v, &[1, 7, 8, 9, 4]);\nassert_eq!(u, &[2, 3]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}],["replace_with",{"generic":"I"}]],"output":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8167:164","args":null}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2074:954":{"id":"0:2074:954","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2380,4],"end":[2388,5]},"visibility":"public","docs":"Gets an iterator over the entries of the map, sorted by key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"c\");\nmap.insert(2, \"b\");\nmap.insert(1, \"a\");\n\nfor (key, value) in map.iter() {\n    println!(\"{key}: {value}\");\n}\n\nlet (first_key, first_value) = map.iter().next().unwrap();\nassert_eq!((*first_key, *first_value), (1, \"a\"));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5950":{"id":"0:5950","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[3031,0],"end":[3031,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5571-1:43483:8724":{"id":"0:5571-1:43483:8724","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[53,29],"end":[53,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::SplitN","name":"SplitN","id":"1:43483:8724","glob":false}}},"b:1:2615-0:6007:71":{"id":"b:1:2615-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4991:3104":{"id":"0:4991:3104","crate_id":0,"name":"into_inner","span":{"filename":"library/alloc/src/rc.rs","begin":[964,4],"end":[966,5]},"visibility":"public","docs":"Returns the inner value, if the `Rc` has exactly one strong reference.\n\nOtherwise, [`None`] is returned and the `Rc` is dropped.\n\nThis will succeed even if there are outstanding weak references.\n\nIf `Rc::into_inner` is called on every clone of this `Rc`,\nit is guaranteed that exactly one of the calls returns the inner value.\nThis means in particular that the inner value is not dropped.\n\n[`Rc::try_unwrap`] is conceptually similar to `Rc::into_inner`.\nAnd while they are meant for different use-cases, `Rc::into_inner(this)`\nis in fact equivalent to <code>[Rc::try_unwrap]\\(this).[ok][Result::ok]()</code>.\n(Note that the same kind of equivalence does **not** hold true for\n[`Arc`](crate::sync::Arc), due to race conditions that do not apply to `Rc`!)\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(3);\nassert_eq!(Rc::into_inner(x), Some(3));\n\nlet x = Rc::new(4);\nlet y = Rc::clone(&x);\n\nassert_eq!(Rc::into_inner(y), None);\nassert_eq!(Rc::into_inner(x), Some(4));\n```","links":{"Rc::try_unwrap":"0:4990:8122","Result::ok":"1:9536:4592","`Rc::try_unwrap`":"0:4990:8122","`None`":"1:41519:190","crate::sync::Arc":"0:6007:71"},"attrs":["#[inline]","#[stable(feature = \"rc_into_inner\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6136:8240":{"id":"0:6136:8240","crate_id":0,"name":"downgrade","span":{"filename":"library/alloc/src/sync.rs","begin":[1613,4],"end":[1648,5]},"visibility":"public","docs":"Creates a new [`Weak`] pointer to this allocation.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet weak_five = Arc::downgrade(&five);\n```","links":{"`Weak`":"0:6039:8069"},"attrs":["#[must_use =\n\"this returns a new `Weak` pointer, \\\n                  without modifying the original `Arc`\"]","#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4636:4213":{"id":"0:4636:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2835,4],"end":[2837,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:852:612":{"id":"0:852:612","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[338,4],"end":[362,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6741":{"id":"0:6741","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[371,0],"end":[371,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5160":{"id":"0:5160","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2460,0],"end":[2464,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Pointer","id":"1:10262:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5163:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7926":{"id":"0:7926","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[26,0],"end":[26,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"items":["0:7930:678","0:7931:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7213":{"id":"0:7213","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2851,0],"end":[2858,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_on_unimplemented(message =\n\"vector indices are of type `usize` or ranges of `usize`\", label =\n\"vector indices are of type `usize` or ranges of `usize`\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:39126:4364","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7217:198","0:7218:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3111:246-0:1496:4175":{"id":"a:1:3111:246-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6518":{"id":"0:6518","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[44,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6521:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6515:172":{"id":"0:6515:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[32,4],"end":[32,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:1618:4665":{"id":"0:1618:4665","crate_id":0,"name":"try_insert","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1019,4],"end":[1027,5]},"visibility":"public","docs":"Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.\n\nIf the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.\n\n# Examples\n\n```\n#![feature(map_try_insert)]\n\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n\nlet err = map.try_insert(37, \"b\").unwrap_err();\nassert_eq!(err.entry.key(), &37);\nassert_eq!(err.entry.get(), &\"a\");\nassert_eq!(err.value, \"b\");\n```","links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}},{"type":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3566:462":{"id":"0:3566:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1733,4],"end":[1745,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7498":{"id":"0:7498","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2732,0],"end":[2732,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7502:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5365-1:43176:8705":{"id":"0:5365-1:43176:8705","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[57,30],"end":[57,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::Windows","name":"Windows","id":"1:43176:8705","glob":false}}},"b:1:2618-0:1496:4175":{"id":"b:1:2618-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:7632:242":{"id":"b:1:3727-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5483":{"id":"0:5483","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[779,0],"end":[783,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::vec::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5486:3455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294:3301":{"id":"0:294:3301","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6641":{"id":"0:6641","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[45,0],"end":[55,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_vec_ref\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6644:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4136-0:4149:4509":{"id":"0:4136-0:4149:4509","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[40,0],"end":[40,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::iter_mut::IterMut","name":"IterMut","id":"0:4149:4509","glob":false}}},"0:5166:810":{"id":"0:5166:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2482,4],"end":[2484,5]},"visibility":"default","docs":"Converts a generic type `T` into an `Rc<T>`\n\nThe conversion allocates on the heap and moves `t`\nfrom the stack into it.\n\n# Example\n```rust\n# use std::rc::Rc;\nlet x = 5;\nlet rc = Rc::new(5);\n\nassert_eq!(Rc::from(x), rc);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6359:813":{"id":"0:6359:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/sync.rs","begin":[3550,4],"end":[3552,5]},"visibility":"default","docs":"Takes each element in the `Iterator` and collects it into an `Arc<[T]>`.\n\n# Performance characteristics\n\n## The general case\n\nIn the general case, collecting into `Arc<[T]>` is done by first\ncollecting into a `Vec<T>`. That is, when writing the following:\n\n```rust\n# use std::sync::Arc;\nlet evens: Arc<[u8]> = (0..10).filter(|&x| x % 2 == 0).collect();\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nthis behaves as if we wrote:\n\n```rust\n# use std::sync::Arc;\nlet evens: Arc<[u8]> = (0..10).filter(|&x| x % 2 == 0)\n    .collect::<Vec<_>>() // The first set of allocations happens here.\n    .into(); // A second allocation for `Arc<[T]>` happens here.\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nThis will allocate as many times as needed for constructing the `Vec<T>`\nand then it will allocate once for turning the `Vec<T>` into the `Arc<[T]>`.\n\n## Iterators of known length\n\nWhen your `Iterator` implements `TrustedLen` and is of an exact size,\na single allocation will be made for the `Arc<[T]>`. For example:\n\n```rust\n# use std::sync::Arc;\nlet evens: Arc<[u8]> = (0..10).collect(); // Just a single allocation happens here.\n# assert_eq!(&*evens, &*(0..10).collect::<Vec<_>>());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:1536:4534":{"id":"b:1:8171-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:32053:3459-0:3807:4931":{"id":"a:1:32053:3459-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3345:4609":{"id":"0:3345:4609","crate_id":0,"name":"pop_first","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[845,4],"end":[850,5]},"visibility":"public","docs":"Removes the first element from the set and returns it, if any.\nThe first element is always the minimum element in the set.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(1);\nwhile let Some(n) = set.pop_first() {\n    assert_eq!(n, 1);\n}\nassert!(set.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:839:780":{"id":"0:839:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1086":{"id":"0:1086","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1757,0],"end":[1757,69]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1590:1153":{"id":"0:1590:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Makes a new, empty `BTreeMap`.\n\nDoes not allocate anything on its own.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\n\n// entries can now be inserted into the empty map\nmap.insert(1, \"a\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_btree_new\", since = \"1.66.0\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1622:4610":{"id":"0:1622:4610","crate_id":0,"name":"remove_entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1072,4],"end":[1091,5]},"visibility":"public","docs":"Removes a key from the map, returning the stored key and value if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove_entry(&1), Some((1, \"a\")));\nassert_eq!(map.remove_entry(&1), None);\n```","links":{},"attrs":["#[stable(feature = \"btreemap_remove_entry\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:3305:5807":{"id":"a:1:3111:246-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3111:246-0:3397:4776":{"id":"a:1:3111:246-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:7569:7099":{"id":"a:1:32053:3459-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1022:1167":{"id":"0:1022:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1616,4],"end":[1618,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4937":{"id":"0:4937","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[338,0],"end":[338,85]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:7392:4150":{"id":"b:1:2898-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6711":{"id":"0:6711","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[195,0],"end":[195,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:7048:263":{"id":"b:1:2898-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1436":{"id":"0:1436","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[187,0],"end":[191,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_drop\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1440:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5739:1965":{"id":"0:5739:1965","crate_id":0,"name":"leak","span":{"filename":"library/alloc/src/string.rs","begin":[1988,4],"end":[1991,5]},"visibility":"public","docs":"Consumes and leaks the `String`, returning a mutable reference to the contents,\n`&'a mut str`.\n\nThe caller has free choice over the returned lifetime, including `'static`. Indeed,\nthis function is ideally used for data that lives for the remainder of the program's life,\nas dropping the returned reference will cause a memory leak.\n\nIt does not reallocate or shrink the `String`,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice. If you don't want that, call [`into_boxed_str`],\nand then [`Box::leak`].\n\n[`into_boxed_str`]: Self::into_boxed_str\n\n# Examples\n\n```\nlet x = String::from(\"bucket\");\nlet static_ref: &'static mut str = x.leak();\nassert_eq!(static_ref, \"bucket\");\n```","links":{"Self::into_boxed_str":"0:5738:9706","`Box::leak`":"0:354:1965"},"attrs":["#[stable(feature = \"string_leak\", since = \"1.72.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1719:4175":{"id":"0:1719:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1638,4],"end":[1638,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:7653":{"id":"0:7653","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[402,27],"end":[402,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6734:3440":{"id":"0:6734:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[354,4],"end":[360,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381:678":{"id":"0:381:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/boxed.rs","begin":[1346,4],"end":[1348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:612":{"id":"0:513:612","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[1937,4],"end":[1939,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4821":{"id":"0:4821","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1037,0],"end":[1044,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_asref\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:39126:4364","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"RangeFull","id":"1:39143:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4822:198","0:4823:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5690:7197":{"id":"0:5690:7197","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[1012,4],"end":[1014,5]},"visibility":"public","docs":"Converts a `String` into a byte vector.\n\nThis consumes the `String`, so we do not need to copy its contents.\n\n# Examples\n\n```\nlet s = String::from(\"hello\");\nlet bytes = s.into_bytes();\n\nassert_eq!(&[104, 101, 108, 108, 111][..], &bytes[..]);\n```","links":{},"attrs":["#[inline]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7621:8665":{"id":"b:1:2618-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6599:651":{"id":"0:6599:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[175,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6086":{"id":"0:6086","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[685,0],"end":[1104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6089:311","0:6090:2669","0:6091:3035","0:6093:3045","0:6095:3090","0:6096:10035","0:6097:3059","0:6098:3065","0:6100:3070","0:6102:8122","0:6103:3104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5755:464":{"id":"0:5755:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/string.rs","begin":[2100,4],"end":[2102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1412:4229":{"id":"0:1412:4229","crate_id":0,"name":"key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[403,4],"end":[405,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:7714:4776":{"id":"b:1:3727-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:233:3542":{"id":"0:233:3542","crate_id":0,"name":"new_unsize","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[108,4],"end":[115,5]},"visibility":"public","docs":"Moves a type to the heap with its [`Metadata`] stored in the heap allocation instead of on\nthe stack.\n\n# Examples\n\n```\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n```\n\n[`Metadata`]: core::ptr::Pointee::Metadata","links":{"core::ptr::Pointee::Metadata":"1:2040:3547"},"attrs":["#[cfg(not(no_global_oom_handling))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"Dyn"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2104,0],"end":[2108,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"box_borrow\", since = \"1.1.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:613:3455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:769:1252":{"id":"0:769:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/borrow.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:923:3440":{"id":"0:923:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1293,4],"end":[1295,5]},"visibility":"public","docs":"Checks if the binary heap is empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\n\nassert!(heap.is_empty());\n\nheap.push(3);\nheap.push(5);\nheap.push(1);\n\nassert!(!heap.is_empty());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1326:780":{"id":"0:1326:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[37,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:3635:181":{"id":"b:1:2903-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:7538:2621":{"id":"a:1:31996:236-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5930":{"id":"0:5930","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2952,0],"end":[2952,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5932":{"id":"0:5932","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2957,0],"end":[2968,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5933:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:6681:4175":{"id":"b:1:2618-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4721":{"id":"0:4721","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[234,0],"end":[695,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4722:1153","0:4736:7228","0:4738:3190","0:4741:3225","0:4742:7285","0:4744:7197","0:4745:7299","0:4746:3305","0:4747:7310","0:4748:7317","0:4749:7322","0:4751:7331","0:4753:7348"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:7372:4175":{"id":"b:0:727-0:7372:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7573":{"id":"0:7573","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,9],"end":[136,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7574:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4552:1416":{"id":"0:4552:1416","crate_id":0,"name":"rotate_right","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2391,4],"end":[2399,5]},"visibility":"public","docs":"Rotates the double-ended queue `n` places to the right.\n\nEquivalently,\n- Rotates the first item into position `n`.\n- Pops the last `n` items and pushes them to the front.\n- Rotates `len() - n` places to the left.\n\n# Panics\n\nIf `n` is greater than `len()`. Note that `n == len()`\ndoes _not_ panic and is a no-op rotation.\n\n# Complexity\n\nTakes `*O*(min(n, len() - n))` time and no extra space.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = (0..10).collect();\n\nbuf.rotate_right(3);\nassert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);\n\nfor i in 1..10 {\n    assert_eq!(0, buf[i * 3 % 10]);\n    buf.rotate_right(3);\n}\nassert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```","links":{},"attrs":["#[stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7569:7099":{"id":"b:1:2618-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5102":{"id":"0:5102","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2183,0],"end":[2205,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5105:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4620:172":{"id":"0:4620:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2805,4],"end":[2805,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:7678:678":{"id":"0:7678:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2346,0],"end":[2346,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:1496:4175":{"id":"b:1:3727-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:7655:9289":{"id":"b:1:2618-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3242":{"id":"0:3242","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[137,0],"end":[141,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3244:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7603":{"id":"0:7603","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,16],"end":[161,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7604:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7605":{"id":"0:7605","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,27],"end":[161,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:5217:8069":{"id":"b:1:2898-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3218":{"id":"0:3218","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[90,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3221:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4829":{"id":"0:4829","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1124,0],"end":[1129,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4830:3494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4866:793":{"id":"0:4866:793","crate_id":0,"name":"format","span":{"filename":"library/alloc/src/fmt.rs","begin":[629,0],"end":[638,1]},"visibility":"public","docs":"The `format` function takes an [`Arguments`] struct and returns the resulting\nformatted string.\n\nThe [`Arguments`] instance can be created with the [`format_args!`] macro.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::fmt;\n\nlet s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\nassert_eq!(s, \"Hello, world!\");\n```\n\nPlease note that using [`format!`] might be preferable.\nExample:\n\n```\nlet s = format!(\"Hello, {}!\", \"world\");\nassert_eq!(s, \"Hello, world!\");\n```\n\n[`format_args!`]: core::format_args\n[`format!`]: crate::format","links":{"core::format_args":"1:22:795","crate::format":"0:6:793","`Arguments`":"1:42551:7834"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["args",{"resolved_path":{"name":"Arguments","id":"1:42551:7834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"string::String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5832:295":{"id":"0:5832:295","crate_id":0,"name":"add","span":{"filename":"library/alloc/src/string.rs","begin":[2430,4],"end":[2433,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4669-0:3209:100":{"id":"0:4669-0:3209:100","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[43,0],"end":[43,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"btree_set::BTreeSet","name":"BTreeSet","id":"0:3209:100","glob":false}}},"0:4777:810":{"id":"0:4777:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[804,4],"end":[818,5]},"visibility":"default","docs":"Converts a <code>[Vec]<[NonZero]<[u8]>></code> into a [`CString`] without\ncopying nor checking for inner nul bytes.","links":{"NonZero":"1:737:189","`CString`":"0:7553:7100","u8":"1:52095:1800","Vec":"0:7048:263"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5021:3225":{"id":"0:5021:3225","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[1350,4],"end":[1354,5]},"visibility":"public","docs":"Consumes the `Rc`, returning the wrapped pointer.\n\nTo avoid a memory leak the pointer must be converted back to an `Rc` using\n[`Rc::from_raw`].\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(\"hello\".to_owned());\nlet x_ptr = Rc::into_raw(x);\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{"`Rc::from_raw`":"0:5015:3190"},"attrs":["#[must_use = \"losing the pointer will leak memory\"]","#[stable(feature = \"rc_raw\", since = \"1.17.0\")]","#[rustc_never_returns_null_ptr]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5698:2768":{"id":"0:5698:2768","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/string.rs","begin":[1215,4],"end":[1217,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` bytes more than\nthe current length. Unlike [`reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `reserve_exact`, capacity will be greater than or equal to\n`self.len() + additional`. Does nothing if the capacity is already\nsufficient.\n\n[`reserve`]: String::reserve\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::new();\n\ns.reserve_exact(10);\n\nassert!(s.capacity() >= 10);\n```\n\nThis might not actually increase the capacity:\n\n```\nlet mut s = String::with_capacity(10);\ns.push('a');\ns.push('b');\n\n// s now has a length of 2 and a capacity of at least 10\nlet capacity = s.capacity();\nassert_eq!(2, s.len());\nassert!(capacity >= 10);\n\n// Since we already have at least an extra 8 capacity, calling this...\ns.reserve_exact(8);\n\n// ... doesn't actually increase.\nassert_eq!(capacity, s.capacity());\n```","links":{"String::reserve":"0:5697:2750","`usize`":"1:52101:1861"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3889":{"id":"0:3889","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1963,0],"end":[1970,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:3892:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5235":{"id":"0:5235","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2806,0],"end":[2832,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5237:1153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3849":{"id":"0:3849","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1612,0],"end":[1655,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3852:6314","0:3853:6322"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7503":{"id":"0:7503","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2733,0],"end":[2733,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"U"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7509:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5565-1:43601:8939":{"id":"0:5565-1:43601:8939","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[49,29],"end":[49,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::RMatches","name":"RMatches","id":"1:43601:8939","glob":false}}},"0:4793":{"id":"0:4793","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[880,0],"end":[888,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::sync::Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4794:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:7436:4175":{"id":"b:1:2615-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3860:6240":{"id":"0:3860:6240","crate_id":0,"name":"remove_current","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1703,4],"end":[1711,5]},"visibility":"public","docs":"Removes the current element from the `LinkedList`.\n\nThe element that was removed is returned, and the cursor is\nmoved to point to the next element in the `LinkedList`.\n\nIf the cursor is currently pointing to the \"ghost\" non-element then no element\nis removed and `None` is returned.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4690-0:7597:7097":{"id":"0:4690-0:7597:7097","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[85,22],"end":[85,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::c_str::FromVecWithNulError","name":"FromVecWithNulError","id":"0:7597:7097","glob":false}}},"0:4630":{"id":"0:4630","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2824,0],"end":[2838,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4633:3569","0:4635:2350","0:4636:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:747:3656":{"id":"0:747:3656","crate_id":0,"name":"is_borrowed","span":{"filename":"library/alloc/src/borrow.rs","begin":[230,4],"end":[235,5]},"visibility":"public","docs":"Returns true if the data is borrowed, i.e. if `to_mut` would require additional work.\n\n# Examples\n\n```\n#![feature(cow_is_borrowed)]\nuse std::borrow::Cow;\n\nlet cow = Cow::Borrowed(\"moo\");\nassert!(cow.is_borrowed());\n\nlet bull: Cow<'_, str> = Cow::Owned(\"...moo?\".to_string());\nassert!(!bull.is_borrowed());\n```","links":{},"attrs":["#[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]","#[rustc_const_unstable(feature = \"const_cow_is_borrowed\", issue = \"65143\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5152":{"id":"0:5152","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2446,0],"end":[2450,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5155:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5818:9747":{"id":"0:5818:9747","crate_id":0,"name":"is_suffix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2305,4],"end":[2307,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6080:10015":{"id":"0:6080:10015","crate_id":0,"name":"try_pin","span":{"filename":"library/alloc/src/sync.rs","begin":[590,4],"end":[592,5]},"visibility":"public","docs":"Constructs a new `Pin<Arc<T>>`, return an error if allocation fails.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7480:4175":{"id":"0:7480:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"An owning iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`into_iter`] method on [`VecDeque`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: VecDeque::into_iter","links":{"VecDeque::into_iter":"0:4615:933","`IntoIterator`":"1:8167:164","`VecDeque`":"0:4423:264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:7480:4175","a:1:32053:3459-0:7480:4175","a:1:3111:246-0:7480:4175","a:1:31996:236-0:7480:4175","a:1:41612:4469-0:7480:4175","a:1:41611:4468-0:7480:4175","b:0:727-0:7480:4175","b:1:8171-0:7480:4175","b:1:2888-0:7480:4175","b:1:2618-0:7480:4175","b:1:2615-0:7480:4175","b:1:3727-0:7480:4175","b:1:2892-0:7480:4175","b:1:2903-0:7480:4175","b:1:2898-0:7480:4175","0:4290","0:4227","0:4293","0:4260","0:4286","0:7484","0:4223"]}}},"0:3792:4918":{"id":"0:3792:4918","crate_id":0,"name":"Cursor","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1328,0],"end":[1336,1]},"visibility":"public","docs":"A cursor over a `LinkedList`.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth.\n\nCursors always rest between two elements in the list, and index in a logically circular way.\nTo accommodate this, there is a \"ghost\" non-element that yields `None` between the head and\ntail of the list.\n\nWhen created, cursors start at the front of the list, or the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:3818","a:1:3146:11953-0:3792:4918","a:1:32053:3459-0:3792:4918","a:1:41612:4469-0:3792:4918","a:1:41611:4468-0:3792:4918","b:0:727-0:3792:4918","b:1:2888-0:3792:4918","b:1:2618-0:3792:4918","b:1:2615-0:3792:4918","b:1:3727-0:3792:4918","b:1:2892-0:3792:4918","b:1:2903-0:3792:4918","b:1:2898-0:3792:4918","0:4018","0:3803","0:4015","0:3799"]}}},"0:3914:813":{"id":"0:3914:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2017,4],"end":[2021,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5667:2679":{"id":"0:5667:2679","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/string.rs","begin":[491,4],"end":[493,5]},"visibility":"public","docs":"Creates a new empty `String` with at least the specified capacity.\n\n`String`s have an internal buffer to hold their data. The capacity is\nthe length of that buffer, and can be queried with the [`capacity`]\nmethod. This method creates an empty `String`, but one with an initial\nbuffer that can hold at least `capacity` bytes. This is useful when you\nmay be appending a bunch of data to the `String`, reducing the number of\nreallocations it needs to do.\n\n[`capacity`]: String::capacity\n\nIf the given capacity is `0`, no allocation will occur, and this method\nis identical to the [`new`] method.\n\n[`new`]: String::new\n\n# Examples\n\n```\nlet mut s = String::with_capacity(10);\n\n// The String contains no chars, even though it has capacity for more\nassert_eq!(s.len(), 0);\n\n// These are all done without reallocating...\nlet cap = s.capacity();\nfor _ in 0..10 {\n    s.push('a');\n}\n\nassert_eq!(s.capacity(), cap);\n\n// ...but this may make the string reallocate\ns.push('a');\n```","links":{"String::new":"0:5666:1153","String::capacity":"0:5696:2680"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6525":{"id":"0:6525","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[54,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6528:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2135:4991":{"id":"0:2135:4991","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2935,4],"end":[2937,5]},"visibility":"public","docs":"Returns a reference to the key and value of the previous element\nwithout moving the cursor.\n\nIf the cursor is at the start of the map then `None` is returned.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:3059":{"id":"0:314:3059","crate_id":0,"name":"try_new_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[407,4],"end":[416,5]},"visibility":"public","docs":"Allocates memory in the given allocator then places `x` into it,\nreturning an error if the allocation fails\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet five = Box::try_new_in(5, System)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4633:3569":{"id":"0:4633:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2825,4],"end":[2827,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5705:3305":{"id":"0:5705:3305","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[1381,4],"end":[1383,5]},"visibility":"public","docs":"Returns a byte slice of this `String`'s contents.\n\nThe inverse of this method is [`from_utf8`].\n\n[`from_utf8`]: String::from_utf8\n\n# Examples\n\n```\nlet s = String::from(\"hello\");\n\nassert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());\n```","links":{"String::from_utf8":"0:5669:7286"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5200:1755":{"id":"0:5200:1755","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/rc.rs","begin":[2664,4],"end":[2670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed_slice",{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2872:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:3872:4776":{"id":"a:1:3146:11953-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:727-0:7597:7097":{"id":"b:0:727-0:7597:7097","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7342":{"id":"0:7342","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3401,0],"end":[3414,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"vec_from_box\", since = \"1.18.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7345:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:332:3131":{"id":"0:332:3131","crate_id":0,"name":"new_uninit_slice_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[761,4],"end":[763,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents in the provided allocator.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut values = Box::<[u32], _>::new_uninit_slice_in(3, System);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:780":{"id":"0:504:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1918,4],"end":[1923,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3245:5783":{"id":"b:1:2898-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:759:469":{"id":"0:759:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/borrow.rs","begin":[355,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1973":{"id":"0:1973","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2177,0],"end":[2177,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1706":{"id":"0:1706","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1625,0],"end":[1625,49]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3705:954":{"id":"0:3705:954","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[541,4],"end":[543,5]},"visibility":"public","docs":"Provides a forward iterator.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7597:7097":{"id":"b:1:2892-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5267":{"id":"0:5267","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3275,0],"end":[3294,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5270:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:7645:9281":{"id":"b:0:727-0:7645:9281","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5687:7372":{"id":"0:5687:7372","crate_id":0,"name":"into_raw_parts","span":{"filename":"library/alloc/src/string.rs","begin":[908,4],"end":[910,5]},"visibility":"public","docs":"Decomposes a `String` into its raw components: `(pointer, length, capacity)`.\n\nReturns the raw pointer to the underlying data, the length of\nthe string (in bytes), and the allocated capacity of the data\n(in bytes). These are the same arguments in the same order as\nthe arguments to [`from_raw_parts`].\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `String`. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a `String` with the [`from_raw_parts`] function, allowing\nthe destructor to perform the cleanup.\n\n[`from_raw_parts`]: String::from_raw_parts\n\n# Examples\n\n```\n#![feature(vec_into_raw_parts)]\nlet s = String::from(\"hello\");\n\nlet (ptr, len, cap) = s.into_raw_parts();\n\nlet rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };\nassert_eq!(rebuilt, \"hello\");\n```","links":{"String::from_raw_parts":"0:5688:3544"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n\"65816\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4799":{"id":"0:4799","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[914,0],"end":[919,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"default_box_extra\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4800:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[213,0],"end":[329,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:747:3656","0:748:3662","0:749:3671","0:750:3683"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3530":{"id":"0:3530","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1613,0],"end":[1613,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4094":{"id":"0:4094","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[89,0],"end":[89,69]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:7714:4776":{"id":"b:1:2898-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:7714:4776":{"id":"a:1:31996:236-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:943:4057":{"id":"a:1:3146:11953-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:3397:4776":{"id":"b:1:2618-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:401:850":{"id":"0:401:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/boxed.rs","begin":[1389,4],"end":[1391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7688:678":{"id":"0:7688:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2348,0],"end":[2348,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1058:311":{"id":"0:1058:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1712,4],"end":[1714,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2184":{"id":"0:2184","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3401,0],"end":[3405,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2185:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3991:810":{"id":"0:3991:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2171,4],"end":[2173,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `LinkedList<T>`.\n\n```\nuse std::collections::LinkedList;\n\nlet list1 = LinkedList::from([1, 2, 3, 4]);\nlet list2: LinkedList<_> = [1, 2, 3, 4].into();\nassert_eq!(list1, list2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6226:1153":{"id":"0:6226:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/sync.rs","begin":[2559,4],"end":[2566,5]},"visibility":"public","docs":"Constructs a new `Weak<T>`, without allocating any memory.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::sync::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","Weak::upgrade":"0:6247:8595"},"attrs":["#[inline]","#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]","#[rustc_const_stable(feature = \"const_weak_new\", since = \"1.73.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6044":{"id":"0:6044","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[336,0],"end":[336,80]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6516:1167":{"id":"0:6516:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5795":{"id":"0:5795","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2238,0],"end":[2242,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_str2\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5796:3569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2158":{"id":"0:2158","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3102,0],"end":[3305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2163:5012","0:2165:5020","0:2167:5025","0:2168:5027","0:2169:5031","0:2171:5036"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7293:60":{"id":"0:7293:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3243,4],"end":[3245,5]},"visibility":"default","docs":"Creates an empty `Vec<T>`.\n\nThe vector will not allocate until elements are pushed onto it.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4520:4502":{"id":"0:4520:4502","crate_id":0,"name":"range","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1323,4],"end":[1335,5]},"visibility":"public","docs":"Creates an iterator that covers the specified range in the deque.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [1, 2, 3].into();\nlet range = deque.range(2..).copied().collect::<VecDeque<_>>();\nassert_eq!(range, [3]);\n\n// A full range covers all contents\nlet all = deque.range(..);\nassert_eq!(all.len(), 3);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"deque_range\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:797":{"id":"0:797","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[481,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"1:33079:3572","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:799:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1587":{"id":"0:1587","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[610,0],"end":[632,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1590:1153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7527:2620":{"id":"a:1:31996:236-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:7632:242":{"id":"a:1:32053:3459-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3858:5025":{"id":"0:3858:5025","crate_id":0,"name":"insert_after","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1663,4],"end":[1676,5]},"visibility":"public","docs":"Inserts a new element into the `LinkedList` after the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new element is\ninserted at the front of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4546:6255":{"id":"0:4546:6255","crate_id":0,"name":"retain_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2047,4],"end":[2079,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain_mut(|x| if *x % 2 == 0 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(buf, [3, 5]);\n```","links":{},"attrs":["#[stable(feature = \"vec_retain_mut\", since = \"1.61.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:3090":{"id":"0:319:3090","crate_id":0,"name":"pin_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"Constructs a new `Pin<Box<T, A>>`. If `T` does not implement [`Unpin`], then\n`x` will be pinned in memory and unable to be moved.\n\nConstructing and pinning of the `Box` can also be done in two steps: `Box::pin_in(x, alloc)`\ndoes the same as <code>[Box::into_pin]\\([Box::new_in]\\(x, alloc))</code>. Consider using\n[`into_pin`](Box::into_pin) if you already have a `Box<T, A>`, or if you want to\nconstruct a (pinned) `Box` in a different way than with [`Box::new_in`].","links":{"`Unpin`":"1:32053:3459","Box::new_in":"0:313:2669","Box::into_pin":"0:356:3091","`Box::new_in`":"0:313:2669"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7388":{"id":"0:7388","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1595,16],"end":[1595,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7391:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3468:462":{"id":"0:3468:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1461,4],"end":[1463,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1546:4541":{"id":"b:1:2898-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7199:612":{"id":"0:7199:612","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2795,4],"end":[2797,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:359":{"id":"0:337:359","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/boxed.rs","begin":[825,4],"end":[828,5]},"visibility":"public","docs":"Converts to `Box<T, A>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut five = Box::<u32>::new_uninit();\n\nlet five: Box<u32> = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{"mem::MaybeUninit::assume_init":"1:1821:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5890":{"id":"0:5890","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2760,0],"end":[2775,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_str\", since = \"1.20.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5891:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6334":{"id":"0:6334","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3383,0],"end":[3398,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:6335:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6332":{"id":"0:6332","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3364,0],"end":[3379,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:6333:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3714:5864":{"id":"0:3714:5864","crate_id":0,"name":"contains","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[718,4],"end":[723,5]},"visibility":"public","docs":"Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.\n\nThis operation should compute linearly in *O*(*n*) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nassert_eq!(list.contains(&0), true);\nassert_eq!(list.contains(&10), false);\n```","links":{},"attrs":["#[stable(feature = \"linked_list_contains\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:4074:4150":{"id":"a:1:32053:3459-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7565:850":{"id":"0:7565:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,41],"end":[111,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5476:198":{"id":"0:5476:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[746,4],"end":[746,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:1:3727-0:3635:181":{"id":"b:1:3727-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2045":{"id":"0:2045","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2304,0],"end":[2309,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2049:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6347:810":{"id":"0:6347:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3468,4],"end":[3473,5]},"visibility":"default","docs":"Create an atomically reference-counted pointer from\na clone-on-write pointer by copying its content.\n\n# Example\n\n```rust\n# use std::sync::Arc;\n# use std::borrow::Cow;\nlet cow: Cow<'_, str> = Cow::Borrowed(\"eggplant\");\nlet shared: Arc<str> = Arc::from(cow);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cow",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1523":{"id":"0:1523","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[482,0],"end":[486,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1526:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5314":{"id":"0:5314","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3567,0],"end":[3574,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5316:248","0:5317:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6256:462":{"id":"0:6256:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/sync.rs","begin":[2974,4],"end":[2989,5]},"visibility":"default","docs":"Makes a clone of the `Weak` pointer that points to the same allocation.\n\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet weak_five = Arc::downgrade(&Arc::new(5));\n\nlet _ = Weak::clone(&weak_five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:6007:71":{"id":"a:1:3146:11953-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2903-0:1568:209":{"id":"b:1:2903-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:3245:5783":{"id":"b:1:2618-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:7553:7100":{"id":"b:1:2615-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7569:7099":{"id":"0:7569:7099","crate_id":0,"name":"NulError","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[138,0],"end":[138,36]},"visibility":"public","docs":"An error indicating that an interior nul byte was found.\n\nWhile Rust strings may contain nul bytes in the middle, C strings\ncan't, as that byte would effectively truncate the string.\n\nThis error is created by the [`new`][`CString::new`] method on\n[`CString`]. See its documentation for more.\n\n# Examples\n\n```\nuse std::ffi::{CString, NulError};\n\nlet _: NulError = CString::new(b\"f\\0oo\".to_vec()).unwrap_err();\n```","links":{"`CString::new`":"0:4722:1153","`CString`":"0:7553:7100"},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null,null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:4801","a:1:3146:11953-0:7569:7099","a:1:32053:3459-0:7569:7099","a:1:3111:246-0:7569:7099","a:1:31996:236-0:7569:7099","a:1:41612:4469-0:7569:7099","a:1:41611:4468-0:7569:7099","b:0:5854-0:7569:7099","b:0:727-0:7569:7099","b:1:2888-0:7569:7099","b:1:2618-0:7569:7099","b:1:2615-0:7569:7099","b:1:3727-0:7569:7099","b:1:2892-0:7569:7099","b:1:2903-0:7569:7099","b:1:2898-0:7569:7099","0:7573","0:7580","0:4804","0:7578","0:7576","0:4829","0:7575"]}}},"0:1792":{"id":"0:1792","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1797,0],"end":[1801,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1795:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7597:7097":{"id":"b:1:2903-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4807:780":{"id":"0:4807:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[969,4],"end":[978,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13133:2855":{"id":"1:13133:2855","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:52095:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:7436:4175":{"id":"b:1:8171-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:218:3019":{"id":"0:218:3019","crate_id":0,"name":"ThinBox","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[34,0],"end":[39,1]},"visibility":"public","docs":"ThinBox.\n\nA thin pointer for heap allocation, regardless of T.\n\n# Examples\n\n```\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet five = ThinBox::new(5);\nlet thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n\nuse std::mem::{size_of, size_of_val};\nlet size_of_ptr = size_of::<*const ()>();\nassert_eq!(size_of_ptr, size_of_val(&five));\nassert_eq!(size_of_ptr, size_of_val(&thin_slice));\n```","links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:226","0:231","a:1:3146:11953-0:218:3019","a:1:32053:3459-0:218:3019","a:1:41612:4469-0:218:3019","a:1:41611:4468-0:218:3019","b:0:5854-0:218:3019","b:1:2888-0:218:3019","b:1:2618-0:218:3019","b:1:2615-0:218:3019","b:1:3727-0:218:3019","b:1:2892-0:218:3019","b:1:2903-0:218:3019","b:1:2898-0:218:3019","0:245","0:224","0:248","0:292","0:241","0:222","0:238","0:235"]}}},"0:388:973":{"id":"0:388:973","crate_id":0,"name":"le","span":{"filename":"library/alloc/src/boxed.rs","begin":[1365,4],"end":[1367,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:789:295":{"id":"0:789:295","crate_id":0,"name":"add","span":{"filename":"library/alloc/src/borrow.rs","begin":[444,4],"end":[447,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3157:3571","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1772:172":{"id":"0:1772:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1750,4],"end":[1750,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}}},"0:1768":{"id":"0:1768","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1749,0],"end":[1777,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1772:172","0:1773:1167","0:1775:3429","0:1776:3431","0:1777:4798","0:1778:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5921:9861":{"id":"0:5921:9861","crate_id":0,"name":"write_char","span":{"filename":"library/alloc/src/string.rs","begin":[2920,4],"end":[2923,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["c",{"primitive":"char"}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5424":{"id":"0:5424","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[176,0],"end":[602,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"slice":{"generic":"T"}},"items":["0:5426:5983","0:5427:4845","0:5430:8780","0:5434:8802","0:5438:1732","0:5439:3451","0:5441:2574","0:5443:8830","0:5444:487","0:5446:8844","0:5448:8852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6681:4175":{"id":"0:6681:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[45,0],"end":[61,1]},"visibility":"public","docs":"An iterator that moves out of a vector.\n\nThis `struct` is created by the `into_iter` method on [`Vec`](super::Vec)\n(provided by the [`IntoIterator`] trait).\n\n# Example\n\n```\nlet v = vec![0, 1, 2];\nlet iter: std::vec::IntoIter<_> = v.into_iter();\n```","links":{"super::Vec":"0:7048:263","`IntoIterator`":"1:8167:164"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:6694","a:1:3146:11953-0:6681:4175","a:1:32053:3459-0:6681:4175","a:1:41612:4469-0:6681:4175","a:1:41611:4468-0:6681:4175","b:0:727-0:6681:4175","b:1:8171-0:6681:4175","b:1:2888-0:6681:4175","b:1:2618-0:6681:4175","b:1:2615-0:6681:4175","b:1:3727-0:6681:4175","b:1:2892-0:6681:4175","b:1:2903-0:6681:4175","b:1:2898-0:6681:4175","0:6759","0:6726","0:6755","0:6735","0:6690","0:6704","0:6744","0:6711","0:6714","0:6731","0:6708","0:6741"]}}},"0:5439:3451":{"id":"0:5439:3451","crate_id":0,"name":"to_vec_in","span":{"filename":"library/alloc/src/slice.rs","begin":[436,4],"end":[442,5]},"visibility":"public","docs":"Copies `self` into a new `Vec` with an allocator.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet s = [10, 40, 30];\nlet x = s.to_vec_in(System);\n// Here, `s` and `x` can be modified independently.\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4517:3440":{"id":"0:4517:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1254,4],"end":[1256,5]},"visibility":"public","docs":"Returns `true` if the deque is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\nassert!(deque.is_empty());\ndeque.push_front(1);\nassert!(!deque.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4293":{"id":"0:4293","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[261,0],"end":[261,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4998":{"id":"0:4998","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1036,0],"end":[1111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5001:3131","0:5002:3135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:731:3595":{"id":"0:731:3595","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/borrow.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:3305:5807":{"id":"b:1:8171-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:3484:974":{"id":"0:3484:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1503,4],"end":[1505,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3557:172":{"id":"0:3557:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1704,4],"end":[1704,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:5898":{"id":"0:5898","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2824,0],"end":[2843,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5900:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3456:396":{"id":"0:3456:396","crate_id":0,"name":"bitand","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1419,4],"end":[1424,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([2, 3, 4]);\n\nlet result = &a & &b;\nassert_eq!(result, BTreeSet::from([2, 3]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3922":{"id":"0:3922","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2037,0],"end":[2044,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3926:172","0:3927:4175","0:3928:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5195":{"id":"0:5195","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2661,0],"end":[2671,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:5199:136","0:5200:1755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:5854-0:7609:7098":{"id":"b:0:5854-0:7609:7098","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:218:3019":{"id":"a:1:32053:3459-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:1557:4545":{"id":"a:1:41611:4468-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6697:2428":{"id":"0:6697:2428","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[83,4],"end":[85,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.\n\n# Examples\n\n```\nlet vec = vec!['a', 'b', 'c'];\nlet mut into_iter = vec.into_iter();\nassert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\nlet _ = into_iter.next().unwrap();\nassert_eq!(into_iter.as_slice(), &['b', 'c']);\n```","links":{},"attrs":["#[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7224":{"id":"0:7224","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2918,0],"end":[2923,1]},"visibility":"default","docs":"Collects an iterator into a Vec, commonly called via [`Iterator::collect()`]\n\n# Allocation behavior\n\nIn general `Vec` does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.\n\n**Note:** This section covers implementation details and is therefore exempt from\nstability guarantees.\n\nVec may use any or none of the following strategies,\ndepending on the supplied iterator:\n\n* preallocate based on [`Iterator::size_hint()`]\n  * and panic if the number of items is outside the provided lower/upper bounds\n* use an amortized growth strategy similar to `pushing` one item at a time\n* perform the iteration in-place on the original allocation backing the iterator\n\nThe last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting `Vec` is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.\n\nIn cases where this is an issue, the excess capacity can be discarded with [`Vec::shrink_to()`],\n[`Vec::shrink_to_fit()`] or by collecting into [`Box<[T]>`][owned slice] instead, which additionally reduces\nthe size of the long-lived struct.\n\n[owned slice]: Box\n\n```rust\n# use std::sync::Mutex;\nstatic LONG_LIVED: Mutex<Vec<Vec<u16>>> = Mutex::new(Vec::new());\n\nfor i in 0..10 {\n    let big_temporary: Vec<u16> = (0..1024).collect();\n    // discard most items\n    let mut result: Vec<_> = big_temporary.into_iter().filter(|i| i % 100 == 0).collect();\n    // without this a lot of unused capacity might be moved into the global\n    result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}\n```","links":{"Box":"0:295:2399","`Iterator::collect()`":"1:8376:2426","`Iterator::size_hint()`":"1:8319:3429","`Vec::shrink_to_fit()`":"0:7073:2775","`Vec::shrink_to()`":"0:7074:4123"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7226:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2892-0:7048:263":{"id":"b:1:2892-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2142:4981":{"id":"0:2142:4981","crate_id":0,"name":"prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2958,4],"end":[2961,5]},"visibility":"public","docs":"Advances the cursor to the previous gap, returning the key and value of\nthe element that it moved over.\n\nIf the cursor is already at the start of the map then `None` is returned\nand the cursor is not moved.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:3648:4057":{"id":"b:1:2903-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:4309:4057":{"id":"b:1:2892-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4648:780":{"id":"0:4648:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2859,4],"end":[2861,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7376":{"id":"0:7376","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1491,9],"end":[1491,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7379:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1363":{"id":"0:1363","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[111,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1367:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7206:462":{"id":"0:7206:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2807,4],"end":[2810,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3968:1252":{"id":"0:3968:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2108,4],"end":[2110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4989:3090":{"id":"0:4989:3090","crate_id":0,"name":"pin_in","span":{"filename":"library/alloc/src/rc.rs","begin":[887,4],"end":[889,5]},"visibility":"public","docs":"Constructs a new `Pin<Rc<T>>` in the provided allocator. If `T` does not implement `Unpin`, then\n`value` will be pinned in memory and unable to be moved.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5806:3569":{"id":"0:5806:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2260,4],"end":[2262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:3058":{"id":"0:229:3058","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[86,4],"end":[89,5]},"visibility":"public","docs":"Moves a type to the heap with its [`Metadata`] stored in the heap allocation instead of on\nthe stack. Returns an error if allocation fails, instead of aborting.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet five = ThinBox::try_new(5)?;\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[`Metadata`]: core::ptr::Pointee::Metadata","links":{"core::ptr::Pointee::Metadata":"1:2040:3547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"core::alloc::AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:847":{"id":"0:390:847","crate_id":0,"name":"gt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1373,4],"end":[1375,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1936,0],"end":[1940,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3332:3010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:513:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5897:810":{"id":"0:5897:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2817,4],"end":[2819,5]},"visibility":"default","docs":"Converts a string slice into a [`Borrowed`] variant.\nNo heap allocation is performed, and the string\nis not copied.\n\n# Example\n\n```\n# use std::borrow::Cow;\nassert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n```\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed \"borrow::Cow::Borrowed\"","links":{"crate::borrow::Cow::Borrowed":"0:735:3354"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1915:3429":{"id":"0:1915:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1465:4057":{"id":"a:1:41612:4469-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:1518:4524":{"id":"a:1:41611:4468-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4661:810":{"id":"0:4661:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2941,4],"end":[2953,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `VecDeque<T>`.\n\n```\nuse std::collections::VecDeque;\n\nlet deq1 = VecDeque::from([1, 2, 3, 4]);\nlet deq2: VecDeque<_> = [1, 2, 3, 4].into();\nassert_eq!(deq1, deq2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7251:3569":{"id":"0:7251:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2988,4],"end":[2990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7527:2620":{"id":"b:1:2618-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4849-1:9999:7837":{"id":"0:4849-1:9999:7837","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[588,20],"end":[588,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::DebugList","name":"DebugList","id":"1:9999:7837","glob":false}}},"0:7138:4149":{"id":"0:7138:4149","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2153,4],"end":[2181,5]},"visibility":"public","docs":"Removes the specified range from the vector in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.\n\nThe returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.\n\n# Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to\n[`mem::forget`], for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3];\nlet u: Vec<_> = v.drain(1..).collect();\nassert_eq!(v, &[1]);\nassert_eq!(u, &[2, 3]);\n\n// A full range clears the vector, like `clear()` does\nv.drain(..);\nassert_eq!(v, &[]);\n```","links":{"`mem::forget`":"1:1907:792"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3912":{"id":"0:3912","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2016,0],"end":[2022,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3914:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6744":{"id":"0:6744","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[374,0],"end":[389,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6747:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4343:3437":{"id":"0:4343:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[116,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5460:8844":{"id":"0:5460:8844","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[702,4],"end":[702,58]},"visibility":"default","docs":"Implementation of [`[T]::join`](slice::join)","links":{"slice::join":"0:5446:8844"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sep",{"generic":"Separator"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:5457:8847","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:3111:246-0:1465:4057":{"id":"a:1:3111:246-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1691:172":{"id":"0:1691:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1571,4],"end":[1571,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"0:244:610":{"id":"0:244:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[136,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3225":{"id":"0:3225","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[100,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3228:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:4925:216":{"id":"b:1:3727-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5931":{"id":"0:5931","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2954,0],"end":[2954,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1879:3431":{"id":"0:1879:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1986,4],"end":[1988,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4836-1:42513:7830":{"id":"0:4836-1:42513:7830","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[576,0],"end":[576,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Alignment","name":"Alignment","id":"1:42513:7830","glob":false}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[126,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:240:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:463":{"id":"0:463","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1670,0],"end":[1689,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:467:136","0:468:1755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1491":{"id":"0:1491","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[405,0],"end":[416,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1495:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3834":{"id":"0:3834","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1500,0],"end":[1608,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3838:917","0:3839:6239","0:3840:6241","0:3842:4919","0:3844:4987","0:3846:4991","0:3848:4997"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7736":{"id":"0:7736","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8313:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7740:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:1428:99":{"id":"a:1:3146:11953-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4753:7348":{"id":"0:4753:7348","crate_id":0,"name":"from_vec_with_nul","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[677,4],"end":[694,5]},"visibility":"public","docs":"Attempts to converts a <code>[Vec]<[u8]></code> to a [`CString`].\n\nRuntime checks are present to ensure there is only one nul byte in the\n[`Vec`], its last element.\n\n# Errors\n\nIf a nul byte is present and not the last element or no nul bytes\nis present, an error will be returned.\n\n# Examples\n\nA successful conversion will produce the same result as [`CString::new`]\nwhen called without the ending nul byte.\n\n```\nuse std::ffi::CString;\nassert_eq!(\n    CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n        .expect(\"CString::from_vec_with_nul failed\"),\n    CString::new(b\"abc\".to_vec()).expect(\"CString::new failed\")\n);\n```\n\nAn incorrectly formatted [`Vec`] will produce an error.\n\n```\nuse std::ffi::{CString, FromVecWithNulError};\n// Interior nul byte\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n// No nul byte\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n```","links":{"u8":"1:52095:1800","`Vec`":"0:7048:263","`CString::new`":"0:4722:1153","Vec":"0:7048:263","`CString`":"0:7553:7100"},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5804":{"id":"0:5804","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2268,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"herd_cows\", since = \"1.19.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5806:3569","0:5809:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:3245:5783":{"id":"b:1:2903-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5022:334":{"id":"0:5022:334","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/rc.rs","begin":[1374,4],"end":[1381,5]},"visibility":"public","docs":"Provides a raw pointer to the data.\n\nThe counts are not affected in any way and the `Rc` is not consumed. The pointer is valid\nfor as long there are strong counts in the `Rc`.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(\"hello\".to_owned());\nlet y = Rc::clone(&x);\nlet x_ptr = Rc::as_ptr(&x);\nassert_eq!(x_ptr, Rc::as_ptr(&y));\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{},"attrs":["#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]","#[rustc_never_returns_null_ptr]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6554:4150":{"id":"0:6554:4150","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"A draining iterator for `Vec<T>`.\n\nThis `struct` is created by [`Vec::drain`].\nSee its documentation for more.\n\n# Example\n\n```\nlet mut v = vec![0, 1, 2];\nlet iter: std::vec::Drain<'_, _> = v.drain(..);\n```","links":{"`Vec::drain`":"0:7138:4149"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:6566","a:1:3146:11953-0:6554:4150","a:1:32053:3459-0:6554:4150","a:1:41612:4469-0:6554:4150","a:1:41611:4468-0:6554:4150","b:1:8171-0:6554:4150","b:1:2888-0:6554:4150","b:1:2618-0:6554:4150","b:1:2615-0:6554:4150","b:1:3727-0:6554:4150","b:1:2892-0:6554:4150","b:1:2903-0:6554:4150","b:1:2898-0:6554:4150","0:6573","0:6620","0:6613","0:6596","0:6562","0:6578","0:6581","0:6591","0:6617","0:6584"]}}},"0:3522:3431":{"id":"0:3522:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1586,4],"end":[1588,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:1518:4524":{"id":"b:1:2892-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:7632:242":{"id":"a:1:3111:246-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1081:1167":{"id":"0:1081:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1742,4],"end":[1744,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1251,0],"end":[1257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:363:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7600":{"id":"0:7600","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,9],"end":[161,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7601:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:1830:4776":{"id":"a:1:31996:236-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5794:2350":{"id":"0:5794:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2231,4],"end":[2233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6714":{"id":"0:6714","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[198,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6717:172","0:6718:1167","0:6719:3429","0:6720:6996","0:6721:557","0:6722:7012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7082:3916":{"id":"0:7082:3916","crate_id":0,"name":"set_len","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1455,4],"end":[1459,5]},"visibility":"public","docs":"Forces the length of the vector to `new_len`.\n\nThis is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n[`truncate`], [`resize`], [`extend`], or [`clear`].\n\n[`truncate`]: Vec::truncate\n[`resize`]: Vec::resize\n[`extend`]: Extend::extend\n[`clear`]: Vec::clear\n\n# Safety\n\n- `new_len` must be less than or equal to [`capacity()`].\n- The elements at `old_len..new_len` must be initialized.\n\n[`capacity()`]: Vec::capacity\n\n# Examples\n\nThis method can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:\n\n```no_run\n# #![allow(dead_code)]\n# // This is just a minimal skeleton for the doc example;\n# // don't use this as a starting point for a real library.\n# pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n# const Z_OK: i32 = 0;\n# extern \"C\" {\n#     fn deflateGetDictionary(\n#         strm: *mut std::ffi::c_void,\n#         dictionary: *mut u8,\n#         dictLength: *mut usize,\n#     ) -> i32;\n# }\n# impl StreamWrapper {\npub fn get_dictionary(&self) -> Option<Vec<u8>> {\n    // Per the FFI method's docs, \"32768 bytes is always enough\".\n    let mut dict = Vec::with_capacity(32_768);\n    let mut dict_length = 0;\n    // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` <= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    unsafe {\n        // Make the FFI call...\n        let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n        if r == Z_OK {\n            // ...and update the length to what was initialized.\n            dict.set_len(dict_length);\n            Some(dict)\n        } else {\n            None\n        }\n    }\n}\n# }\n```\n\nWhile the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the `set_len` call:\n\n```\nlet mut vec = vec![vec![1, 0, 0],\n                   vec![0, 1, 0],\n                   vec![0, 0, 1]];\n// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 <= capacity` always holds whatever `capacity` is.\nunsafe {\n    vec.set_len(0);\n}\n```\n\nNormally, here, one would use [`clear`] instead to correctly drop\nthe contents and thus not leak memory.","links":{"Vec::clear":"0:7140:4152","Vec::resize":"0:7155:6933","Extend::extend":"1:8178:3569","Vec::capacity":"0:7068:2680","Vec::truncate":"0:7076:6589"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3493:3429":{"id":"0:3493:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1519,4],"end":[1521,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3861:6338":{"id":"0:3861:6338","crate_id":0,"name":"remove_current_as_list","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1721,4],"end":[1740,5]},"visibility":"public","docs":"Removes the current element from the `LinkedList` without deallocating the list node.\n\nThe node that was removed is returned as a new `LinkedList` containing only this node.\nThe cursor is moved to point to the next element in the current `LinkedList`.\n\nIf the cursor is currently pointing to the \"ghost\" non-element then no element\nis removed and `None` is returned.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7248":{"id":"0:7248","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2986,0],"end":[3001,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7251:3569","0:7253:2350","0:7254:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:1518:4524":{"id":"b:1:3727-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1624:4049":{"id":"0:1624:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1110,4],"end":[1116,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\nThe elements are visited in ascending key order.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n// Keep only the elements with even-numbered keys.\nmap.retain(|&k, _| k % 2 == 0);\nassert!(map.into_iter().eq(vec![(0, 0), (2, 20), (4, 40), (6, 60)]));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"btree_retain\", since = \"1.53.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5771:813":{"id":"0:5771:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2157,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4824":{"id":"0:4824","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1047,0],"end":[1052,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_asref\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4825:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:1356:4373":{"id":"a:1:41612:4469-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13245:28317":{"id":"1:13245:28317","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39481:12693","Self::is_ascii":"1:13244:28316"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39481:12693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:3091":{"id":"0:356:3091","crate_id":0,"name":"into_pin","span":{"filename":"library/alloc/src/boxed.rs","begin":[1221,4],"end":[1229,5]},"visibility":"public","docs":"Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n`*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`From`].\n\nConstructing and pinning a `Box` with <code>Box::into_pin([Box::new]\\(x))</code>\ncan also be written more concisely using <code>[Box::pin]\\(x)</code>.\nThis `into_pin` method is useful if you already have a `Box<T>`, or you are\nconstructing a (pinned) `Box` in a different way than with [`Box::new`].\n\n# Notes\n\nIt's not recommended that crates add an impl like `From<Box<T>> for Pin<T>`,\nas it'll introduce an ambiguity when calling `Pin::from`.\nA demonstration of such a poor impl is shown below.\n\n```compile_fail\n# use std::pin::Pin;\nstruct Foo; // A type defined in this crate.\nimpl From<Box<()>> for Pin<Foo> {\n    fn from(_: Box<()>) -> Pin<Foo> {\n        Pin::new(Foo)\n    }\n}\n\nlet foo = Box::new(());\nlet bar = Pin::from(foo);\n```","links":{"`Unpin`":"1:32053:3459","Box::new":"0:303:1153","`From`":"1:2865:143","Box::pin":"0:306:1263","`Box::new`":"0:303:1153"},"attrs":["#[stable(feature = \"box_into_pin\", since = \"1.63.0\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:862:464":{"id":"0:862:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[388,4],"end":[390,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7412:5026":{"id":"0:7412:5026","crate_id":0,"name":"UnorderedKeyError","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3398,0],"end":[3398,31]},"visibility":"public","docs":"Error type returned by [`CursorMut::insert_before`] and\n[`CursorMut::insert_after`] if the key being inserted is not properly\nordered with regards to adjacent keys.","links":{"`CursorMut::insert_before`":"0:2181:5027","`CursorMut::insert_after`":"0:2180:5025"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3146:11953-0:7412:5026","a:1:32053:3459-0:7412:5026","a:1:3111:246-0:7412:5026","a:1:31996:236-0:7412:5026","a:1:41612:4469-0:7412:5026","a:1:41611:4468-0:7412:5026","b:0:5854-0:7412:5026","b:0:727-0:7412:5026","b:1:2888-0:7412:5026","b:1:2618-0:7412:5026","b:1:2615-0:7412:5026","b:1:3727-0:7412:5026","b:1:2892-0:7412:5026","b:1:2903-0:7412:5026","b:1:2898-0:7412:5026","0:7418","0:7415","0:7420","0:7413","0:2184","0:2186","0:7416"]}}},"b:1:3727-0:1557:4545":{"id":"b:1:3727-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:1428:99":{"id":"a:1:41612:4469-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5232":{"id":"0:5232","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2804,0],"end":[2804,78]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3636:3012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5937":{"id":"0:5937","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2990,0],"end":[2994,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:5939:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5298:2400":{"id":"0:5298:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/rc.rs","begin":[3430,4],"end":[3432,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:1536:4534":{"id":"a:1:41611:4468-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:1327:4374":{"id":"b:1:2892-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3828:4987":{"id":"0:3828:4987","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1454,4],"end":[1462,5]},"visibility":"public","docs":"Returns a reference to the next element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5725:4498":{"id":"0:5725:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/string.rs","begin":[1658,4],"end":[1666,5]},"visibility":"public","docs":"Inserts a character into this `String` at a byte position.\n\nThis is an *O*(*n*) operation as it requires copying every element in the\nbuffer.\n\n# Panics\n\nPanics if `idx` is larger than the `String`'s length, or if it does not\nlie on a [`char`] boundary.\n\n# Examples\n\n```\nlet mut s = String::with_capacity(3);\n\ns.insert(0, 'f');\ns.insert(1, 'o');\ns.insert(2, 'o');\n\nassert_eq!(\"foo\", s);\n```","links":{"`char`":"1:52078:458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"set\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["idx",{"primitive":"usize"}],["ch",{"primitive":"char"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2007:3569":{"id":"0:2007:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2241,4],"end":[2245,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7380:4065":{"id":"b:1:2888-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2888-0:7402:4039":{"id":"b:1:2888-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2617:2400":{"id":"1:2617:2400","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6013":{"id":"0:6013","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[258,0],"end":[258,79]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6693:780":{"id":"0:6693:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[65,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7436:4175":{"id":"a:1:41612:4469-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:7632:242":{"id":"a:1:3146:11953-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:7632:242":{"id":"b:1:2898-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:4149:4509":{"id":"a:1:31996:236-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:7412:5026":{"id":"a:1:41611:4468-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3546:3429":{"id":"0:3546:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1677,4],"end":[1686,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5023:2710":{"id":"0:5023:2710","crate_id":0,"name":"from_raw_in","span":{"filename":"library/alloc/src/rc.rs","begin":[1451,4],"end":[1458,5]},"visibility":"public","docs":"Constructs an `Rc<T, A>` from a raw pointer in the provided allocator.\n\nThe raw pointer must have been previously returned by a call to [`Rc<U,\nA>::into_raw`][into_raw] with the following requirements:\n\n* If `U` is sized, it must have the same size and alignment as `T`. This\n  is trivially true if `U` is `T`.\n* If `U` is unsized, its data pointer must have the same size and\n  alignment as `T`. This is trivially true if `Rc<U>` was constructed\n  through `Rc<T>` and then converted to `Rc<U>` through an [unsized\n  coercion].\n\nNote that if `U` or `U`'s data pointer is not `T` but has the same size\nand alignment, this is basically like transmuting references of\ndifferent types. See [`mem::transmute`][transmute] for more information\non what restrictions apply in this case.\n\nThe raw pointer must point to a block of memory allocated by `alloc`\n\nThe user of `from_raw` has to make sure a specific value of `T` is only\ndropped once.\n\nThis function is unsafe because improper use may lead to memory unsafety,\neven if the returned `Rc<T>` is never accessed.\n\n[into_raw]: Rc::into_raw\n[transmute]: core::mem::transmute\n[unsized coercion]: https://doc.rust-lang.org/reference/type-coercions.html#unsized-coercions\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet x = Rc::new_in(\"hello\".to_owned(), System);\nlet x_ptr = Rc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Rc` to prevent leak.\n    let x = Rc::from_raw_in(x_ptr, System);\n    assert_eq!(&*x, \"hello\");\n\n    // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n```\n\nConvert a slice back into its original array:\n\n```\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet x: Rc<[u32], _> = Rc::new_in([1, 2, 3], System);\nlet x_ptr: *const [u32] = Rc::into_raw(x);\n\nunsafe {\n    let x: Rc<[u32; 3], _> = Rc::from_raw_in(x_ptr.cast::<[u32; 3]>(), System);\n    assert_eq!(&*x, &[1, 2, 3]);\n}\n```","links":{"Rc::into_raw":"0:5021:3225","core::mem::transmute":"1:1567:1740"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7436:4175":{"id":"a:1:3111:246-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3515:462":{"id":"0:3515:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1573,4],"end":[1575,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3271:5793":{"id":"0:3271:5793","crate_id":0,"name":"SymmetricDifference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[236,0],"end":[236,71]},"visibility":"public","docs":"A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.\n\nThis `struct` is created by the [`symmetric_difference`] method on\n[`BTreeSet`]. See its documentation for more.\n\n[`symmetric_difference`]: BTreeSet::symmetric_difference","links":{"`BTreeSet`":"0:3209:100","BTreeSet::symmetric_difference":"0:3326:5843"},"attrs":["#[must_use =\n\"this returns the difference as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3271:5793","a:1:32053:3459-0:3271:5793","a:1:3111:246-0:3271:5793","a:1:31996:236-0:3271:5793","a:1:41612:4469-0:3271:5793","a:1:41611:4468-0:3271:5793","b:0:727-0:3271:5793","b:1:8171-0:3271:5793","b:1:2888-0:3271:5793","b:1:2618-0:3271:5793","b:1:2615-0:3271:5793","b:1:3727-0:3271:5793","b:1:2892-0:3271:5793","b:1:2903-0:3271:5793","b:1:2898-0:3271:5793","0:3561","0:3551","0:3276","0:3554"]}}},"0:7616:678":{"id":"0:7616:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,16],"end":[227,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5238":{"id":"0:5238","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2834,0],"end":[2859,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5241:2669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5471:8844":{"id":"0:5471:8844","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[725,4],"end":[740,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sep",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5030:4637":{"id":"0:5030:4637","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/rc.rs","begin":[1630,4],"end":[1632,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Rc`, if there are\nno other `Rc` or [`Weak`] pointers to the same allocation.\n\nReturns [`None`] otherwise, because it is not safe to\nmutate a shared value.\n\nSee also [`make_mut`][make_mut], which will [`clone`][clone]\nthe inner value when there are other `Rc` pointers.\n\n[make_mut]: Rc::make_mut\n[clone]: Clone::clone\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet mut x = Rc::new(3);\n*Rc::get_mut(&mut x).unwrap() = 4;\nassert_eq!(*x, 4);\n\nlet _y = Rc::clone(&x);\nassert!(Rc::get_mut(&mut x).is_none());\n```","links":{"Rc::make_mut":"0:5036:8336","Clone::clone":"1:2632:462","`Weak`":"0:5217:8069","`None`":"1:41519:190"},"attrs":["#[inline]","#[stable(feature = \"rc_unique\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6104":{"id":"0:6104","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1106,0],"end":[1173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6106:3113","0:6107:3118"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:7402:4039":{"id":"a:1:3146:11953-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:732:118":{"id":"a:1:3146:11953-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:3397:4776":{"id":"b:1:8171-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2898-0:1428:99":{"id":"b:1:2898-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:732:118":{"id":"a:1:41611:4468-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4296-0:4309:4057":{"id":"0:4296-0:4309:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[50,0],"end":[50,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::iter::Iter","name":"Iter","id":"0:4309:4057","glob":false}}},"0:5732:4749":{"id":"0:5732:4749","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/string.rs","begin":[1807,4],"end":[1811,5]},"visibility":"public","docs":"Splits the string into two at the given byte index.\n\nReturns a newly allocated `String`. `self` contains bytes `[0, at)`, and\nthe returned `String` contains bytes `[at, len)`. `at` must be on the\nboundary of a UTF-8 code point.\n\nNote that the capacity of `self` does not change.\n\n# Panics\n\nPanics if `at` is not on a `UTF-8` code point boundary, or if it is beyond the last\ncode point of the string.\n\n# Examples\n\n```\n# fn main() {\nlet mut hello = String::from(\"Hello, World!\");\nlet world = hello.split_off(7);\nassert_eq!(hello, \"Hello, \");\nassert_eq!(world, \"World!\");\n# }\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"string_split_off\", since = \"1.16.0\")]","#[must_use = \"use `.truncate()` if you don't need the other half\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:3648:4057":{"id":"a:1:41611:4468-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:3279:5798":{"id":"b:1:3727-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:4074:4150":{"id":"b:1:2615-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6220:3409":{"id":"0:6220:3409","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/sync.rs","begin":[2488,4],"end":[2500,5]},"visibility":"public","docs":"Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\nuse std::sync::Arc;\n\nfn print_if_string(value: Arc<dyn Any + Send + Sync>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Arc::new(my_string));\nprint_if_string(Arc::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_downcast\", since = \"1.29.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6521:3437":{"id":"0:6521:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[45,4],"end":[47,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1311:4371":{"id":"a:1:31996:236-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:3305:5807":{"id":"a:1:3146:11953-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4540:4222":{"id":"0:4540:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1845,4],"end":[1869,5]},"visibility":"public","docs":"Removes and returns the element at `index` from the deque.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.remove(1), Some(2));\nassert_eq!(buf, [1, 3]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"delete\", \"take\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:5922:4150":{"id":"a:1:41612:4469-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:218:3019":{"id":"b:1:2618-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5894:810":{"id":"0:5894:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2796,4],"end":[2798,5]},"visibility":"default","docs":"Converts a clone-on-write string to an owned\ninstance of [`String`].\n\nThis extracts the owned string,\nclones the string if it is not already owned.\n\n# Example\n\n```\n# use std::borrow::Cow;\n// If the string is not owned...\nlet cow: Cow<'_, str> = Cow::Borrowed(\"eggplant\");\n// It will allocate on the heap and copy the string.\nlet owned: String = String::from(cow);\nassert_eq!(&owned[..], \"eggplant\");\n```","links":{"`String`":"0:7632:242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1976":{"id":"0:1976","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2180,0],"end":[2184,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1979:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:7609:7098":{"id":"b:1:2618-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:826:101":{"id":"a:1:41612:4469-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7080:2855":{"id":"0:7080:2855","crate_id":0,"name":"as_mut_ptr","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1362,4],"end":[1366,5]},"visibility":"public","docs":"Returns an unsafe mutable pointer to the vector's buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn't allocate.\n\nThe caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.\n\nThis method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to [`as_ptr`] and [`as_mut_ptr`].\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.\n\n\n# Examples\n\n```\n// Allocate vector big enough for 4 elements.\nlet size = 4;\nlet mut x: Vec<i32> = Vec::with_capacity(size);\nlet x_ptr = x.as_mut_ptr();\n\n// Initialize elements via raw pointer writes, then set length.\nunsafe {\n    for i in 0..size {\n        *x_ptr.add(i) = i as i32;\n    }\n    x.set_len(size);\n}\nassert_eq!(&*x, &[0, 1, 2, 3]);\n```\n\nDue to the aliasing guarantee, the following code is legal:\n\n```rust\nunsafe {\n    let mut v = vec![0];\n    let ptr1 = v.as_mut_ptr();\n    ptr1.write(1);\n    let ptr2 = v.as_mut_ptr();\n    ptr2.write(2);\n    // Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    ptr1.write(3);\n}\n```\n\n[`as_mut_ptr`]: Vec::as_mut_ptr\n[`as_ptr`]: Vec::as_ptr","links":{"Vec::as_mut_ptr":"0:7080:2855","Vec::as_ptr":"0:7079:334"},"attrs":["#[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]","#[rustc_never_returns_null_ptr]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3707:6148":{"id":"0:3707:6148","crate_id":0,"name":"cursor_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[580,4],"end":[582,5]},"visibility":"public","docs":"Provides a cursor at the front element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:830:3912":{"id":"b:1:2892-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:7472:4175":{"id":"a:1:41612:4469-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:1327:4374":{"id":"b:1:3727-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:3661:4509":{"id":"b:1:2618-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:5854-0:7527:2620":{"id":"b:0:5854-0:7527:2620","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5375-1:11072:4509":{"id":"0:5375-1:11072:4509","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[63,28],"end":[63,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::IterMut","name":"IterMut","id":"1:11072:4509","glob":false}}},"0:6091:3035":{"id":"0:6091:3035","crate_id":0,"name":"new_uninit_in","span":{"filename":"library/alloc/src/sync.rs","begin":[753,4],"end":[764,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents in the provided allocator.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet mut five = Arc::<u32, _>::new_uninit_in(System);\n\nlet five = unsafe {\n    // Deferred initialization:\n    Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:781:850":{"id":"0:781:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/borrow.rs","begin":[426,4],"end":[428,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2179:5020":{"id":"0:2179:5020","crate_id":0,"name":"insert_before_unchecked","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3340,4],"end":[3342,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the\nnewly inserted element.\n\n# Safety\n\nYou must ensure that the `BTreeMap` invariants are maintained.\nSpecifically:\n\n* The key of the newly inserted element must be unique in the tree.\n* All keys in the tree must remain in sorted order.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3716:4780":{"id":"0:3716:4780","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[745,4],"end":[747,5]},"visibility":"public","docs":"Provides a reference to the front element, or `None` if the list is\nempty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"first\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4975":{"id":"0:4975","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[663,0],"end":[967,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4978:311","0:4979:2669","0:4980:3035","0:4982:3045","0:4984:3059","0:4985:3065","0:4987:3070","0:4989:3090","0:4990:8122","0:4991:3104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6059:780":{"id":"0:6059:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[347,4],"end":[349,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13183:29481":{"id":"1:13183:29481","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12812:2367","str::split":"1:13174:4225","prim@char":"1:52078:458","`DoubleEndedIterator`":"1:8205:129","str::rsplit_terminator":"1:13186:29482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43429:8941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7480:4175":{"id":"a:1:41611:4468-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5835":{"id":"0:5835","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2449,0],"end":[2459,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"slice::SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:39126:4364","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5837:198","0:5838:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6719:3429":{"id":"0:6719:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[223,4],"end":[230,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2169:5031":{"id":"0:2169:5031","crate_id":0,"name":"remove_next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3253,4],"end":[3275,5]},"visibility":"public","docs":"Removes the next element from the `BTreeMap`.\n\nThe element that was removed is returned. The cursor position is\nunchanged (before the removed element).","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4680":{"id":"0:4680","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[122,0],"end":[128,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason = \"new API\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LayoutError","id":"1:44394:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4681:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:943:4057":{"id":"b:1:2615-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1660:3431":{"id":"0:1660:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1511,4],"end":[1513,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3735:4683":{"id":"0:3735:4683","crate_id":0,"name":"extract_if","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1157,4],"end":[1166,5]},"visibility":"public","docs":"Creates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the list and will not be yielded\nby the iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse `extract_if().for_each(drop)` if you do not need the returned iterator.\n\nNote that `extract_if` lets you mutate every element in the filter closure, regardless of\nwhether you choose to keep or remove it.\n\n# Examples\n\nSplitting a list into evens and odds, reusing the original list:\n\n```\n#![feature(extract_if)]\nuse std::collections::LinkedList;\n\nlet mut numbers: LinkedList<u32> = LinkedList::new();\nnumbers.extend(&[1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15]);\n\nlet evens = numbers.extract_if(|x| *x % 2 == 0).collect::<LinkedList<_>>();\nlet odds = numbers;\n\nassert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![2, 4, 6, 8, 14]);\nassert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 9, 11, 13, 15]);\n```","links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filter",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1342:4372":{"id":"b:1:2615-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4328:1167":{"id":"0:4328:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[44,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1496:4175":{"id":"a:1:41612:4469-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5534-1:43662:8918":{"id":"0:5534-1:43662:8918","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[28,0],"end":[28,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::SplitAsciiWhitespace","name":"SplitAsciiWhitespace","id":"1:43662:8918","glob":false}}},"b:1:2618-0:830:3912":{"id":"b:1:2618-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8171-0:1518:4524":{"id":"b:1:8171-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1923:3437":{"id":"0:1923:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2086,4],"end":[2088,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1776:3431":{"id":"0:1776:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1760,4],"end":[1762,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5845":{"id":"0:5845","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2483,0],"end":[2483,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"deref_pure_trait\", issue = \"87121\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefPure","id":"1:3337:3011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2907:1755":{"id":"1:2907:1755","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6306:780":{"id":"0:6306:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[3263,4],"end":[3265,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:29485":{"id":"1:13213:29485","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:1153":{"id":"0:303:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/boxed.rs","begin":[216,4],"end":[219,5]},"visibility":"public","docs":"Allocates memory on the heap and then places `x` into it.\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\nlet five = Box::new(5);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline(always)]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]","#[rustc_diagnostic_item = \"box_new\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1800":{"id":"0:1800","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1818,0],"end":[1832,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1804:172","0:1805:1167","0:1807:3429","0:1808:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4541:4749":{"id":"0:4541:4749","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1897,4],"end":[1942,5]},"visibility":"public","docs":"Splits the deque into two at the given index.\n\nReturns a newly allocated `VecDeque`. `self` contains elements `[0, at)`,\nand the returned deque contains elements `[at, len)`.\n\nNote that the capacity of `self` does not change.\n\nElement at index 0 is the front of the queue.\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = [1, 2, 3].into();\nlet buf2 = buf.split_off(1);\nassert_eq!(buf, [1]);\nassert_eq!(buf2, [2, 3]);\n```","links":{},"attrs":["#[inline]","#[must_use = \"use `.truncate()` if you don't need the other half\"]","#[stable(feature = \"split_off\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1041:1167":{"id":"0:1041:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1665,4],"end":[1667,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4990:8122":{"id":"0:4990:8122","crate_id":0,"name":"try_unwrap","span":{"filename":"library/alloc/src/rc.rs","begin":[912,4],"end":[930,5]},"visibility":"public","docs":"Returns the inner value, if the `Rc` has exactly one strong reference.\n\nOtherwise, an [`Err`] is returned with the same `Rc` that was\npassed in.\n\nThis will succeed even if there are outstanding weak references.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(3);\nassert_eq!(Rc::try_unwrap(x), Ok(3));\n\nlet x = Rc::new(4);\nlet _y = Rc::clone(&x);\nassert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);\n```","links":{"`Err`":"1:41636:135"},"attrs":["#[inline]","#[stable(feature = \"rc_unique\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7617":{"id":"0:7617","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,27],"end":[227,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4688:763":{"id":"0:4688:763","crate_id":0,"name":"ffi","span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[1,0],"end":[92,14]},"visibility":"public","docs":"Utilities related to FFI bindings.\n\nThis module provides utilities to handle data across non-Rust\ninterfaces, like other programming languages and the underlying\noperating system. It is mainly of use for FFI (Foreign Function\nInterface) bindings and code that needs to exchange C-like strings\nwith other languages.\n\n# Overview\n\nRust represents owned strings with the [`String`] type, and\nborrowed slices of strings with the [`str`] primitive. Both are\nalways in UTF-8 encoding, and may contain nul bytes in the middle,\ni.e., if you look at the bytes that make up the string, there may\nbe a `\\0` among them. Both `String` and `str` store their length\nexplicitly; there are no nul terminators at the end of strings\nlike in C.\n\nC strings are different from Rust strings:\n\n* **Encodings** - Rust strings are UTF-8, but C strings may use\nother encodings. If you are using a string from C, you should\ncheck its encoding explicitly, rather than just assuming that it\nis UTF-8 like you can do in Rust.\n\n* **Character size** - C strings may use `char` or `wchar_t`-sized\ncharacters; please **note** that C's `char` is different from Rust's.\nThe C standard leaves the actual sizes of those types open to\ninterpretation, but defines different APIs for strings made up of\neach character type. Rust strings are always UTF-8, so different\nUnicode characters will be encoded in a variable number of bytes\neach. The Rust type [`char`] represents a '[Unicode scalar\nvalue]', which is similar to, but not the same as, a '[Unicode\ncode point]'.\n\n* **Nul terminators and implicit string lengths** - Often, C\nstrings are nul-terminated, i.e., they have a `\\0` character at the\nend. The length of a string buffer is not stored, but has to be\ncalculated; to compute the length of a string, C code must\nmanually call a function like `strlen()` for `char`-based strings,\nor `wcslen()` for `wchar_t`-based ones. Those functions return\nthe number of characters in the string excluding the nul\nterminator, so the buffer length is really `len+1` characters.\nRust strings don't have a nul terminator; their length is always\nstored and does not need to be calculated. While in Rust\naccessing a string's length is an *O*(1) operation (because the\nlength is stored); in C it is an *O*(*n*) operation because the\nlength needs to be computed by scanning the string for the nul\nterminator.\n\n* **Internal nul characters** - When C strings have a nul\nterminator character, this usually means that they cannot have nul\ncharacters in the middle — a nul character would essentially\ntruncate the string. Rust strings *can* have nul characters in\nthe middle, because nul does not have to mark the end of the\nstring in Rust.\n\n# Representations of non-Rust strings\n\n[`CString`] and [`CStr`] are useful when you need to transfer\nUTF-8 strings to and from languages with a C ABI, like Python.\n\n* **From Rust to C:** [`CString`] represents an owned, C-friendly\nstring: it is nul-terminated, and has no internal nul characters.\nRust code can create a [`CString`] out of a normal string (provided\nthat the string doesn't have nul characters in the middle), and\nthen use a variety of methods to obtain a raw <code>\\*mut [u8]</code> that can\nthen be passed as an argument to functions which use the C\nconventions for strings.\n\n* **From C to Rust:** [`CStr`] represents a borrowed C string; it\nis what you would use to wrap a raw <code>\\*const [u8]</code> that you got from\na C function. A [`CStr`] is guaranteed to be a nul-terminated array\nof bytes. Once you have a [`CStr`], you can convert it to a Rust\n<code>&[str]</code> if it's valid UTF-8, or lossily convert it by adding\nreplacement characters.\n\n[`String`]: crate::string::String\n[`CStr`]: core::ffi::CStr","links":{"`str`":"1:52084:1672","`char`":"1:52078:458","core::ffi::CStr":"1:40050:106","str":"1:52084:1672","crate::string::String":"0:7632:242","u8":"1:52095:1800","`CString`":"0:7553:7100"},"attrs":["#[cfg(all(not(no_rc), not(no_sync), not(no_global_oom_handling)))]","#![stable(feature = \"alloc_ffi\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:4694:419","0:4690-0:7597:7097","0:4691-0:7609:7098","0:4692-0:7569:7099","0:4693-0:7553:7100"],"is_stripped":false}}},"0:3491:1167":{"id":"0:3491:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1515,4],"end":[1517,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[347,0],"end":[347,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7645:9281":{"id":"a:1:31996:236-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1398":{"id":"0:1398","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[297,0],"end":[387,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1403:4229","0:1404:5106","0:1405:4498"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4231:1167":{"id":"0:4231:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6084:3069":{"id":"0:6084:3069","crate_id":0,"name":"try_new_zeroed","span":{"filename":"library/alloc/src/sync.rs","begin":[674,4],"end":[682,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, returning an error if allocation fails.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit, allocator_api)]\n\nuse std::sync::Arc;\n\nlet zero = Arc::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7597:7097":{"id":"b:1:2618-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5316:248":{"id":"0:5316:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/rc.rs","begin":[3568,4],"end":[3568,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:6191:462":{"id":"0:6191:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/sync.rs","begin":[2063,4],"end":[2097,5]},"visibility":"default","docs":"Makes a clone of the `Arc` pointer.\n\nThis creates another pointer to the same allocation, increasing the\nstrong reference count.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet _ = Arc::clone(&five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6440:1877":{"id":"0:6440:1877","crate_id":0,"name":"vec","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1,0],"end":[3507,1]},"visibility":"public","docs":"A contiguous growable array type with heap-allocated contents, written\n`Vec<T>`.\n\nVectors have *O*(1) indexing, amortized *O*(1) push (to the end) and\n*O*(1) pop (from the end).\n\nVectors ensure they never allocate more than `isize::MAX` bytes.\n\n# Examples\n\nYou can explicitly create a [`Vec`] with [`Vec::new`]:\n\n```\nlet v: Vec<i32> = Vec::new();\n```\n\n...or by using the [`vec!`] macro:\n\n```\nlet v: Vec<i32> = vec![];\n\nlet v = vec![1, 2, 3, 4, 5];\n\nlet v = vec![0; 10]; // ten zeroes\n```\n\nYou can [`push`] values onto the end of a vector (which will grow the vector\nas needed):\n\n```\nlet mut v = vec![1, 2];\n\nv.push(3);\n```\n\nPopping values works in much the same way:\n\n```\nlet mut v = vec![1, 2];\n\nlet two = v.pop();\n```\n\nVectors also support indexing (through the [`Index`] and [`IndexMut`] traits):\n\n```\nlet mut v = vec![1, 2, 3];\nlet three = v[2];\nv[1] = v[1] + 5;\n```\n\n[`push`]: Vec::push","links":{"`Vec`":"0:7048:263","`Index`":"1:39126:4364","`vec!`":"0:5:1877","`IndexMut`":"1:3387:6395","Vec::push":"0:7131:3980","`Vec::new`":"0:7055:1153"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:6475-0:7714:4776","0:6500-0:7730:10536","0:6535-0:6554:4150","0:6651-0:6681:4175","0:7048:263"],"is_stripped":false}}},"a:1:3146:11953-0:4149:4509":{"id":"a:1:3146:11953-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4801":{"id":"0:4801","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[921,0],"end":[958,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4802:7398","0:4803:2574"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2078:4883":{"id":"0:2078:4883","crate_id":0,"name":"values_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2479,4],"end":[2481,5]},"visibility":"public","docs":"Gets a mutable iterator over the values of the map, in order by key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, String::from(\"hello\"));\na.insert(2, String::from(\"goodbye\"));\n\nfor value in a.values_mut() {\n    value.push_str(\"!\");\n}\n\nlet values: Vec<String> = a.values().cloned().collect();\nassert_eq!(values, [String::from(\"hello!\"),\n                    String::from(\"goodbye!\")]);\n```","links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2081:4916":{"id":"0:2081:4916","crate_id":0,"name":"lower_bound","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2570,4],"end":[2581,5]},"visibility":"public","docs":"Returns a [`Cursor`] pointing at the gap before the smallest key\ngreater than the given bound.\n\nPassing `Bound::Included(x)` will return a cursor pointing to the\ngap before the smallest key greater than or equal to `x`.\n\nPassing `Bound::Excluded(x)` will return a cursor pointing to the\ngap before the smallest key greater than `x`.\n\nPassing `Bound::Unbounded` will return a cursor pointing to the\ngap before the smallest key in the map.\n\n# Examples\n\n```\n#![feature(btree_cursors)]\n\nuse std::collections::BTreeMap;\nuse std::ops::Bound;\n\nlet map = BTreeMap::from([\n    (1, \"a\"),\n    (2, \"b\"),\n    (3, \"c\"),\n    (4, \"d\"),\n]);\n\nlet cursor = map.lower_bound(Bound::Included(&2));\nassert_eq!(cursor.peek_prev(), Some((&1, &\"a\")));\nassert_eq!(cursor.peek_next(), Some((&2, &\"b\")));\n\nlet cursor = map.lower_bound(Bound::Excluded(&2));\nassert_eq!(cursor.peek_prev(), Some((&2, &\"b\")));\nassert_eq!(cursor.peek_next(), Some((&3, &\"c\")));\n\nlet cursor = map.lower_bound(Bound::Unbounded);\nassert_eq!(cursor.peek_prev(), None);\nassert_eq!(cursor.peek_next(), Some((&1, &\"a\")));\n```","links":{"`Cursor`":"0:2089:4918"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bound",{"resolved_path":{"name":"Bound","id":"1:39258:4363","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6050":{"id":"0:6050","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[341,0],"end":[341,96]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3599:3007","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7925:1135":{"id":"0:7925:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[25,0],"end":[25,103]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5684:9430":{"id":"0:5684:9430","crate_id":0,"name":"from_utf16be_lossy","span":{"filename":"library/alloc/src/string.rs","begin":[866,4],"end":[878,5]},"visibility":"public","docs":"Decode a UTF-16BE–encoded slice `v` into a `String`, replacing\ninvalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n\nUnlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n`from_utf16le_lossy` returns a `String` since the UTF-16 to UTF-8\nconversion requires a memory allocation.\n\n[`from_utf8_lossy`]: String::from_utf8_lossy\n[`Cow<'a, str>`]: crate::borrow::Cow \"borrow::Cow\"\n[U+FFFD]: core::char::REPLACEMENT_CHARACTER\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(str_from_utf16_endian)]\n// 𝄞mus<invalid>ic<invalid>\nlet v = &[0xD8, 0x34, 0xDD, 0x1E, 0x00, 0x6d, 0x00, 0x75,\n          0x00, 0x73, 0xDD, 0x1E, 0x00, 0x69, 0x00, 0x63,\n          0xD8, 0x34];\n\nassert_eq!(String::from(\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"),\n           String::from_utf16be_lossy(v));\n```","links":{"core::char::REPLACEMENT_CHARACTER":"1:4973:9397","String::from_utf8_lossy":"0:5670:7436","crate::borrow::Cow":"0:732:118"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"str_from_utf16_endian\", issue = \"116258\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2060:198":{"id":"0:2060:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2324,4],"end":[2324,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"0:799:296":{"id":"0:799:296","crate_id":0,"name":"add_assign","span":{"filename":"library/alloc/src/borrow.rs","begin":[482,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1763:974":{"id":"0:1763:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1740,4],"end":[1742,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5379-1:43306:8716":{"id":"0:5379-1:43306:8716","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[65,45],"end":[65,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RChunksExactMut","name":"RChunksExactMut","id":"1:43306:8716","glob":false}}},"0:6026":{"id":"0:6026","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[269,0],"end":[269,76]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3636:3012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4860-1:10266:7843":{"id":"0:4860-1:10266:7843","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[592,30],"end":[592,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::UpperExp","name":"UpperExp","id":"1:10266:7843","glob":false}}},"0:1374":{"id":"0:1374","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[137,0],"end":[144,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::collections::btree_map::OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1378:3494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5777":{"id":"0:5777","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2186,0],"end":[2203,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5778:3569","0:5781:2350","0:5782:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:1311:4371":{"id":"b:1:2903-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7551":{"id":"0:7551","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,31],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7552:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1415:4637":{"id":"0:1415:4637","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[479,4],"end":[481,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntry` that may outlive the\ndestruction of the `Entry` value, see [`into_mut`].\n\n[`into_mut`]: OccupiedEntry::into_mut\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\nassert_eq!(map[\"poneyland\"], 24);\n```","links":{"OccupiedEntry::into_mut":"0:1416:5064"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:1577:4553":{"id":"a:1:3111:246-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7048:263":{"id":"0:7048:263","crate_id":0,"name":"Vec","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[398,0],"end":[401,1]},"visibility":"public","docs":"A contiguous growable array type, written as `Vec<T>`, short for 'vector'.\n\n# Examples\n\n```\nlet mut vec = Vec::new();\nvec.push(1);\nvec.push(2);\n\nassert_eq!(vec.len(), 2);\nassert_eq!(vec[0], 1);\n\nassert_eq!(vec.pop(), Some(2));\nassert_eq!(vec.len(), 1);\n\nvec[0] = 7;\nassert_eq!(vec[0], 7);\n\nvec.extend([1, 2, 3]);\n\nfor x in &vec {\n    println!(\"{x}\");\n}\nassert_eq!(vec, [7, 1, 2, 3]);\n```\n\nThe [`vec!`] macro is provided for convenient initialization:\n\n```\nlet mut vec1 = vec![1, 2, 3];\nvec1.push(4);\nlet vec2 = Vec::from([1, 2, 3, 4]);\nassert_eq!(vec1, vec2);\n```\n\nIt can also initialize each element of a `Vec<T>` with a given value.\nThis may be more efficient than performing allocation and initialization\nin separate steps, especially when initializing a vector of zeros:\n\n```\nlet vec = vec![0; 5];\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n\n// The following is equivalent, but potentially slower:\nlet mut vec = Vec::with_capacity(5);\nvec.resize(5, 0);\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n```\n\nFor more information, see\n[Capacity and Reallocation](#capacity-and-reallocation).\n\nUse a `Vec<T>` as an efficient stack:\n\n```\nlet mut stack = Vec::new();\n\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\nwhile let Some(top) = stack.pop() {\n    // Prints 3, 2, 1\n    println!(\"{top}\");\n}\n```\n\n# Indexing\n\nThe `Vec` type allows access to values by index, because it implements the\n[`Index`] trait. An example will be more explicit:\n\n```\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[1]); // it will display '2'\n```\n\nHowever be careful: if you try to access an index which isn't in the `Vec`,\nyour software will panic! You cannot do this:\n\n```should_panic\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[6]); // it will panic!\n```\n\nUse [`get`] and [`get_mut`] if you want to check whether the index is in\nthe `Vec`.\n\n# Slicing\n\nA `Vec` can be mutable. On the other hand, slices are read-only objects.\nTo get a [slice][prim@slice], use [`&`]. Example:\n\n```\nfn read_slice(slice: &[usize]) {\n    // ...\n}\n\nlet v = vec![0, 1];\nread_slice(&v);\n\n// ... and that's all!\n// you can also do it like this:\nlet u: &[usize] = &v;\n// or like this:\nlet u: &[_] = &v;\n```\n\nIn Rust, it's more common to pass slices as arguments rather than vectors\nwhen you just want to provide read access. The same goes for [`String`] and\n[`&str`].\n\n# Capacity and reallocation\n\nThe capacity of a vector is the amount of space allocated for any future\nelements that will be added onto the vector. This is not to be confused with\nthe *length* of a vector, which specifies the number of actual elements\nwithin the vector. If a vector's length exceeds its capacity, its capacity\nwill automatically be increased, but its elements will have to be\nreallocated.\n\nFor example, a vector with capacity 10 and length 0 would be an empty vector\nwith space for 10 more elements. Pushing 10 or fewer elements onto the\nvector will not change its capacity or cause reallocation to occur. However,\nif the vector's length is increased to 11, it will have to reallocate, which\ncan be slow. For this reason, it is recommended to use [`Vec::with_capacity`]\nwhenever possible to specify how big the vector is expected to get.\n\n# Guarantees\n\nDue to its incredibly fundamental nature, `Vec` makes a lot of guarantees\nabout its design. This ensures that it's as low-overhead as possible in\nthe general case, and can be correctly manipulated in primitive ways\nby unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.\nIf additional type parameters are added (e.g., to support custom allocators),\noverriding their defaults may change the behavior.\n\nMost fundamentally, `Vec` is and always will be a (pointer, capacity, length)\ntriplet. No more, no less. The order of these fields is completely\nunspecified, and you should use the appropriate methods to modify these.\nThe pointer will never be null, so this type is null-pointer-optimized.\n\nHowever, the pointer might not actually point to allocated memory. In particular,\nif you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],\n[`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]\non an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\ntypes inside a `Vec`, it will not allocate space for them. *Note that in this case\nthe `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only\nif <code>[mem::size_of::\\<T>]\\() * [capacity]\\() > 0</code>. In general, `Vec`'s allocation\ndetails are very subtle --- if you intend to allocate memory using a `Vec`\nand use it for something else (either to pass to unsafe code, or to build your\nown memory-backed collection), be sure to deallocate this memory by using\n`from_raw_parts` to recover the `Vec` and then dropping it.\n\nIf a `Vec` *has* allocated memory, then the memory it points to is on the heap\n(as defined by the allocator Rust is configured to use by default), and its\npointer points to [`len`] initialized, contiguous elements in order (what\nyou would see if you coerced it to a slice), followed by <code>[capacity] - [len]</code>\nlogically uninitialized, contiguous elements.\n\nA vector containing the elements `'a'` and `'b'` with capacity 4 can be\nvisualized as below. The top part is the `Vec` struct, it contains a\npointer to the head of the allocation in the heap, length and capacity.\nThe bottom part is the allocation on the heap, a contiguous memory block.\n\n```text\n            ptr      len  capacity\n       +--------+--------+--------+\n       | 0x0123 |      2 |      4 |\n       +--------+--------+--------+\n            |\n            v\nHeap   +--------+--------+--------+--------+\n       |    'a' |    'b' | uninit | uninit |\n       +--------+--------+--------+--------+\n```\n\n- **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n- Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n  layout (including the order of fields).\n\n`Vec` will never perform a \"small optimization\" where elements are actually\nstored on the stack for two reasons:\n\n* It would make it more difficult for unsafe code to correctly manipulate\n  a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were\n  only moved, and it would be more difficult to determine if a `Vec` had\n  actually allocated memory.\n\n* It would penalize the general case, incurring an additional branch\n  on every access.\n\n`Vec` will never automatically shrink itself, even if completely empty. This\nensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\nand then filling it back up to the same [`len`] should incur no calls to\nthe allocator. If you wish to free up unused memory, use\n[`shrink_to_fit`] or [`shrink_to`].\n\n[`push`] and [`insert`] will never (re)allocate if the reported capacity is\nsufficient. [`push`] and [`insert`] *will* (re)allocate if\n<code>[len] == [capacity]</code>. That is, the reported capacity is completely\naccurate, and can be relied on. It can even be used to manually free the memory\nallocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even\nwhen not necessary.\n\n`Vec` does not guarantee any particular growth strategy when reallocating\nwhen full, nor when [`reserve`] is called. The current strategy is basic\nand it may prove desirable to use a non-constant growth factor. Whatever\nstrategy is used will of course guarantee *O*(1) amortized [`push`].\n\n`vec![x; n]`, `vec![a, b, c, d]`, and\n[`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`\nwith at least the requested capacity. If <code>[len] == [capacity]</code>,\n(as is the case for the [`vec!`] macro), then a `Vec<T>` can be converted to\nand from a [`Box<[T]>`][owned slice] without reallocating or moving the elements.\n\n`Vec` will not specifically overwrite any data that is removed from it,\nbut also won't specifically preserve it. Its uninitialized memory is\nscratch space that it may use however it wants. It will generally just do\nwhatever is most efficient or otherwise easy to implement. Do not rely on\nremoved data to be erased for security purposes. Even if you drop a `Vec`, its\nbuffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory\nfirst, that might not actually happen because the optimizer does not consider\nthis a side-effect that must be preserved. There is one case which we will\nnot break, however: using `unsafe` code to write to the excess capacity,\nand then increasing the length to match, is always valid.\n\nCurrently, `Vec` does not guarantee the order in which elements are dropped.\nThe order has changed in the past and may change again.\n\n[`get`]: slice::get\n[`get_mut`]: slice::get_mut\n[`String`]: crate::string::String\n[`&str`]: type@str\n[`shrink_to_fit`]: Vec::shrink_to_fit\n[`shrink_to`]: Vec::shrink_to\n[capacity]: Vec::capacity\n[`capacity`]: Vec::capacity\n[mem::size_of::\\<T>]: core::mem::size_of\n[len]: Vec::len\n[`len`]: Vec::len\n[`push`]: Vec::push\n[`insert`]: Vec::insert\n[`reserve`]: Vec::reserve\n[`MaybeUninit`]: core::mem::MaybeUninit\n[owned slice]: Box","links":{"Box":"0:295:2399","`Index`":"1:39126:4364","crate::string::String":"0:7632:242","`Vec::new`":"0:7055:1153","core::mem::MaybeUninit":"1:30461:2614","Vec::insert":"0:7085:4498","`vec!`":"0:5:1877","type@str":"1:52084:1672","`Vec::with_capacity`":"0:7056:2679","slice::get_mut":"1:12116:4637","core::mem::size_of":"1:1911:1634","Vec::push":"0:7131:3980","slice::get":"1:12114:3917","Vec::shrink_to":"0:7074:4123","Vec::reserve":"0:7069:2750","Vec::len":"0:7141:974","Vec::capacity":"0:7068:2680","Vec::shrink_to_fit":"0:7073:2775","`&`":"1:52102:1371","prim@slice":"1:52083:1638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"Vec\"]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:7053","0:7059","0:7152","0:7159","0:7169","0:7255","a:1:3146:11953-0:7048:263","a:1:32053:3459-0:7048:263","a:1:3111:246-0:7048:263","a:1:31996:236-0:7048:263","a:1:41612:4469-0:7048:263","a:1:41611:4468-0:7048:263","b:0:727-0:7048:263","b:1:2888-0:7048:263","b:1:2618-0:7048:263","b:1:2615-0:7048:263","b:1:3727-0:7048:263","b:1:2892-0:7048:263","b:1:2903-0:7048:263","b:1:2898-0:7048:263","0:7302","0:7306","0:7317","0:7332","0:6641","0:7275","0:7342","0:4761","0:7310","0:7224","0:7203","0:6340","0:1102","0:7191","0:5479","0:7944","0:4653","0:7352","0:7914","0:7932","0:7926","0:7320","0:7248","0:5483","0:7950","0:7219","0:7976","0:7287","0:7208","0:7920","0:5917","0:7280","0:7346","0:7338","0:7298","0:7196","0:7283","0:6637","0:7213","0:4649","0:7938","0:7966","0:7200","0:7907","0:7241","0:4776","0:7267","0:5185","0:7291","0:1092","0:7228","0:7488","0:469","0:7314","0:7326","0:7350","0:7294","0:7234"]}}},"0:6211:4637":{"id":"0:6211:4637","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/sync.rs","begin":[2285,4],"end":[2296,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Arc`, if there are\nno other `Arc` or [`Weak`] pointers to the same allocation.\n\nReturns [`None`] otherwise, because it is not safe to\nmutate a shared value.\n\nSee also [`make_mut`][make_mut], which will [`clone`][clone]\nthe inner value when there are other `Arc` pointers.\n\n[make_mut]: Arc::make_mut\n[clone]: Clone::clone\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet mut x = Arc::new(3);\n*Arc::get_mut(&mut x).unwrap() = 4;\nassert_eq!(*x, 4);\n\nlet _y = Arc::clone(&x);\nassert!(Arc::get_mut(&mut x).is_none());\n```","links":{"Clone::clone":"1:2632:462","`Weak`":"0:6039:8069","`None`":"1:41519:190","Arc::make_mut":"0:6205:8336"},"attrs":["#[inline]","#[stable(feature = \"arc_unique\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6077:3044":{"id":"0:6077:3044","crate_id":0,"name":"new_zeroed","span":{"filename":"library/alloc/src/sync.rs","begin":[568,4],"end":[576,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::sync::Arc;\n\nlet zero = Arc::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:3135":{"id":"0:333:3135","crate_id":0,"name":"new_zeroed_slice_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[789,4],"end":[791,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents in the provided allocator,\nwith the memory being filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet values = Box::<[u32], _>::new_zeroed_slice_in(3, System);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:248":{"id":"0:508:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/boxed.rs","begin":[1928,4],"end":[1928,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:526:3430":{"id":"0:526:3430","crate_id":0,"name":"nth","span":{"filename":"library/alloc/src/boxed.rs","begin":[1957,4],"end":[1959,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6573":{"id":"0:6573","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[140,0],"end":[144,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6577:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3865:6214":{"id":"0:3865:6214","crate_id":0,"name":"push_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1798,4],"end":[1808,5]},"visibility":"public","docs":"Appends an element to the back of the cursor's parent list. The node\nthat the cursor points to is unchanged, even if it is the \"ghost\" node.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]","#[rustc_confusables(\"push\", \"append\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elt",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7402:4039":{"id":"b:1:2898-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4100":{"id":"0:4100","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[94,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4103:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4978:311":{"id":"0:4978:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/rc.rs","begin":[671,4],"end":[673,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.\n\nNote: this is an associated function, which means that you have\nto call it as `Rc::allocator(&r)` instead of `r.allocator()`. This\nis so that there is no conflict with a method on the inner type.","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5199:136":{"id":"0:5199:136","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/rc.rs","begin":[2662,4],"end":[2662,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}}},"0:6252:1319":{"id":"0:6252:1319","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/sync.rs","begin":[2955,4],"end":[2957,5]},"visibility":"public","docs":"Returns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`], or if\nboth don't point to any allocation (because they were created with `Weak::new()`). However,\nthis function ignores the metadata of  `dyn Trait` pointers.\n\n# Notes\n\nSince this compares pointers it means that `Weak::new()` will equal each\nother, even though they don't point to any allocation.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet first_rc = Arc::new(5);\nlet first = Arc::downgrade(&first_rc);\nlet second = Arc::downgrade(&first_rc);\n\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Arc::new(5);\nlet third = Arc::downgrade(&third_rc);\n\nassert!(!first.ptr_eq(&third));\n```\n\nComparing `Weak::new`.\n\n```\nuse std::sync::{Arc, Weak};\n\nlet first = Weak::new();\nlet second = Weak::new();\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Arc::new(());\nlet third = Arc::downgrade(&third_rc);\nassert!(!first.ptr_eq(&third));\n```\n\n[`ptr::eq`]: core::ptr::eq \"ptr::eq\"","links":{"core::ptr::eq":"1:2561:678"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13123:3440":{"id":"1:13123:3440","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3496:60":{"id":"0:3496:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1533,4],"end":[1535,5]},"visibility":"default","docs":"Creates an empty `btree_set::Iter`.\n\n```\n# use std::collections::btree_set;\nlet iter: btree_set::Iter<'_, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5814:9605":{"id":"0:5814:9605","crate_id":0,"name":"into_searcher","span":{"filename":"library/alloc/src/string.rs","begin":[2285,4],"end":[2287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7310":{"id":"0:7310","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3277,0],"end":[3281,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_as_mut\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2859:76","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7313:3458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5295":{"id":"0:5295","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3429,0],"end":[3433,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5298:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13436:932":{"id":"1:13436:932","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"1:44293:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:3311":{"id":"0:410:3311","crate_id":0,"name":"write_u32","span":{"filename":"library/alloc/src/boxed.rs","begin":[1408,4],"end":[1410,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6587:172":{"id":"0:6587:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[153,4],"end":[153,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:5608:8993":{"id":"0:5608:8993","crate_id":0,"name":"replacen","span":{"filename":"library/alloc/src/str.rs","begin":[311,4],"end":[322,5]},"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"0:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1568:209":{"id":"a:1:41612:4469-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1129:4213":{"id":"0:1129:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1860,4],"end":[1862,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6729:3437":{"id":"0:6729:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[311,4],"end":[331,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:3872:4776":{"id":"a:1:41612:4469-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2099":{"id":"0:2099","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2801,0],"end":[2805,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:2102:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7068:2680":{"id":"0:7068:2680","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[921,4],"end":[923,5]},"visibility":"public","docs":"Returns the total number of elements the vector can hold without\nreallocating.\n\n# Examples\n\n```\nlet mut vec: Vec<i32> = Vec::with_capacity(10);\nvec.push(42);\nassert!(vec.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3833:5177":{"id":"0:3833:5177","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1495,4],"end":[1497,5]},"visibility":"public","docs":"Provides a reference to the back element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]","#[rustc_confusables(\"last\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:732:118":{"id":"b:1:2898-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4763":{"id":"0:4763","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[739,0],"end":[745,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstr_default\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4764:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4331:3434":{"id":"0:4331:3434","crate_id":0,"name":"fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[76,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["accum",{"generic":"Acc"}],["f",{"generic":"F"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7372:4175":{"id":"a:1:41612:4469-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5353-1:11942:8697":{"id":"0:5353-1:11942:8697","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[49,42],"end":[49,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::from_ptr_range","name":"from_ptr_range","id":"1:11942:8697","glob":false}}},"1:13195:28441":{"id":"1:13195:28441","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7693:678":{"id":"0:7693:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2350,0],"end":[2350,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1989":{"id":"0:1989","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2214,0],"end":[2218,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1993:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:3271:5793":{"id":"b:1:2903-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5847:612":{"id":"0:5847:612","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2488,4],"end":[2490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7195:610":{"id":"0:7195:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2787,4],"end":[2789,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7211:850":{"id":"0:7211:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2841,4],"end":[2843,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:311":{"id":"0:353:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/boxed.rs","begin":[1141,4],"end":[1143,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::allocator(&b)` instead of `b.allocator()`. This\nis so that there is no conflict with a method on the inner type.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5459:198":{"id":"0:5459:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[698,4],"end":[698,16]},"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"b:1:2892-0:295:2399":{"id":"b:1:2892-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7415":{"id":"0:7415","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,16],"end":[3396,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7372:4175":{"id":"a:1:31996:236-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:7632:242":{"id":"b:1:2615-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2895-0:4925:216":{"id":"b:1:2895-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2897:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7530:462":{"id":"0:7530:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,9],"end":[59,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1877:172":{"id":"0:1877:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1980,4],"end":[1980,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"0:7668:678":{"id":"0:7668:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2345,0],"end":[2345,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6488":{"id":"0:6488","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[55,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6492:172","0:6493:1167","0:6494:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:1527:4528":{"id":"a:1:31996:236-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:3792:4918":{"id":"a:1:41612:4469-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:7436:4175":{"id":"b:1:2892-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:295:2399":{"id":"0:295:2399","crate_id":0,"name":"Box","span":{"filename":"library/alloc/src/boxed.rs","begin":[196,0],"end":[199,16]},"visibility":"public","docs":"A pointer type that uniquely owns a heap allocation of type `T`.\n\nSee the [module-level documentation](../../std/boxed/index.html) for more.","links":{},"attrs":["#[lang = \"owned_box\"]","#[fundamental]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null,null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:301","0:310","0:323","0:329","0:334","0:339","0:343","0:346","0:475","0:481","0:487","a:1:3146:11953-0:295:2399","a:1:3111:246-0:295:2399","a:1:31996:236-0:295:2399","a:1:41612:4469-0:295:2399","a:1:41611:4468-0:295:2399","b:0:5854-0:295:2399","b:0:727-0:295:2399","b:1:8171-0:295:2399","b:1:2888-0:295:2399","b:1:2618-0:295:2399","b:1:12963-0:295:2399","b:1:2615-0:295:2399","b:1:3727-0:295:2399","b:1:2892-0:295:2399","b:1:2895-0:295:2399","b:1:2903-0:295:2399","b:1:13432-0:295:2399","b:1:4406-0:295:2399","b:1:2898-0:295:2399","0:497","0:441","0:4770","0:451","0:668","0:566","0:448","0:578","0:585","0:4778","0:425","0:625","0:5181","0:403","0:680","0:7342","0:446","0:5890","0:660","0:552","0:597","0:689","0:5888","0:561","0:594","0:383","0:614","0:4774","0:444","0:542","0:398","0:378","0:501","0:5770","0:7346","0:683","0:364","0:505","0:357","0:618","0:6336","0:4780","0:510","0:601","0:555","0:697","0:644","0:686","0:422","0:514","0:5795","0:639","0:664","0:520","0:4772","0:547","0:463","0:622","0:632","0:368","0:571","0:4799","0:438","0:606","0:371","0:376","0:610","0:361","0:391","0:590","0:693","0:469","0:395","0:493"]}}},"0:7368":{"id":"0:7368","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[51,22],"end":[51,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7369:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:3397:4776":{"id":"b:1:2903-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6499:651":{"id":"0:6499:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[95,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:3319":{"id":"0:418:3319","crate_id":0,"name":"write_i128","span":{"filename":"library/alloc/src/boxed.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3502":{"id":"0:3502","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1545,0],"end":[1549,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3505:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3367":{"id":"0:3367","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1189,0],"end":[1201,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3369:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3304:780":{"id":"0:3304:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[294,4],"end":[296,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5830":{"id":"0:5830","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2426,0],"end":[2434,1]},"visibility":"default","docs":"Implements the `+` operator for concatenating two strings.\n\nThis consumes the `String` on the left-hand side and re-uses its buffer (growing it if\nnecessary). This is done to avoid allocating a new `String` and copying the entire contents on\nevery operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by\nrepeated concatenation.\n\nThe string on the right-hand side is only borrowed; its contents are copied into the returned\n`String`.\n\n# Examples\n\nConcatenating two `String`s takes the first by value and borrows the second:\n\n```\nlet a = String::from(\"hello\");\nlet b = String::from(\" world\");\nlet c = a + &b;\n// `a` is moved and can no longer be used here.\n```\n\nIf you want to keep using the first `String`, you can clone it and append to the clone instead:\n\n```\nlet a = String::from(\"hello\");\nlet b = String::from(\" world\");\nlet c = a.clone() + &b;\n// `a` is still valid here.\n```\n\nConcatenating `&str` slices can be done by converting the first to a `String`:\n\n```\nlet a = \"hello\";\nlet b = \" world\";\nlet c = a.to_string() + b;\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"1:3157:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5831:198","0:5832:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7053":{"id":"0:7053","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[407,0],"end":[606,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7055:1153","0:7056:2679","0:7057:2384","0:7058:3544"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:1518:4524":{"id":"a:1:3146:11953-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:629:267":{"id":"0:629:267","crate_id":0,"name":"Yield","span":{"filename":"library/alloc/src/boxed.rs","begin":[2151,4],"end":[2151,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"G"},"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}}},"0:375:464":{"id":"0:375:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1328,4],"end":[1330,5]},"visibility":"default","docs":"Copies `source`'s contents into `self` without creating a new allocation.\n\n# Examples\n\n```\nlet x = Box::new(5);\nlet mut y = Box::new(10);\nlet yp: *const i32 = &*y;\n\ny.clone_from(&x);\n\n// The value is the same\nassert_eq!(x, y);\n\n// And no allocation occurred\nassert_eq!(yp, &*y);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:295:2399":{"id":"b:1:8171-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:2029:60":{"id":"0:2029:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2280,4],"end":[2282,5]},"visibility":"default","docs":"Creates an empty `BTreeMap`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3950":{"id":"0:3950","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2081,0],"end":[2090,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3954:3569","0:3956:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6348":{"id":"0:6348","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3477,0],"end":[3493,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_str\", since = \"1.62.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"items":["0:6349:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7609:7098":{"id":"b:1:3727-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3771:60":{"id":"0:3771:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1252,4],"end":[1254,5]},"visibility":"default","docs":"Creates an empty `linked_list::Iter`.\n\n```\n# use std::collections::linked_list;\nlet iter: linked_list::Iter<'_, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6135:2710":{"id":"0:6135:2710","crate_id":0,"name":"from_raw_in","span":{"filename":"library/alloc/src/sync.rs","begin":[1588,4],"end":[1597,5]},"visibility":"public","docs":"Constructs an `Arc<T, A>` from a raw pointer.\n\nThe raw pointer must have been previously returned by a call to [`Arc<U,\nA>::into_raw`][into_raw] with the following requirements:\n\n* If `U` is sized, it must have the same size and alignment as `T`. This\n  is trivially true if `U` is `T`.\n* If `U` is unsized, its data pointer must have the same size and\n  alignment as `T`. This is trivially true if `Arc<U>` was constructed\n  through `Arc<T>` and then converted to `Arc<U>` through an [unsized\n  coercion].\n\nNote that if `U` or `U`'s data pointer is not `T` but has the same size\nand alignment, this is basically like transmuting references of\ndifferent types. See [`mem::transmute`][transmute] for more information\non what restrictions apply in this case.\n\nThe raw pointer must point to a block of memory allocated by `alloc`\n\nThe user of `from_raw` has to make sure a specific value of `T` is only\ndropped once.\n\nThis function is unsafe because improper use may lead to memory unsafety,\neven if the returned `Arc<T>` is never accessed.\n\n[into_raw]: Arc::into_raw\n[transmute]: core::mem::transmute\n[unsized coercion]: https://doc.rust-lang.org/reference/type-coercions.html#unsized-coercions\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet x = Arc::new_in(\"hello\".to_owned(), System);\nlet x_ptr = Arc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Arc` to prevent leak.\n    let x = Arc::from_raw_in(x_ptr, System);\n    assert_eq!(&*x, \"hello\");\n\n    // Further calls to `Arc::from_raw(x_ptr)` would be memory-unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n```\n\nConvert a slice back into its original array:\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet x: Arc<[u32], _> = Arc::new_in([1, 2, 3], System);\nlet x_ptr: *const [u32] = Arc::into_raw(x);\n\nunsafe {\n    let x: Arc<[u32; 3], _> = Arc::from_raw_in(x_ptr.cast::<[u32; 3]>(), System);\n    assert_eq!(&*x, &[1, 2, 3]);\n}\n```","links":{"Arc::into_raw":"0:6133:3225","core::mem::transmute":"1:1567:1740"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5734:4149":{"id":"0:5734:4149","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/string.rs","begin":[1869,4],"end":[1890,5]},"visibility":"public","docs":"Removes the specified range from the string in bulk, returning all\nremoved characters as an iterator.\n\nThe returned iterator keeps a mutable borrow on the string to optimize\nits implementation.\n\n# Panics\n\nPanics if the starting point or end point do not lie on a [`char`]\nboundary, or if they're out of bounds.\n\n# Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to\n[`core::mem::forget`], for example), the string may still contain a copy\nof any drained characters, or may have lost characters arbitrarily,\nincluding characters outside the range.\n\n# Examples\n\n```\nlet mut s = String::from(\"α is alpha, β is beta\");\nlet beta_offset = s.find('β').unwrap_or(s.len());\n\n// Remove the range up until the β from the string\nlet t: String = s.drain(..beta_offset).collect();\nassert_eq!(t, \"α is alpha, \");\nassert_eq!(s, \"β is beta\");\n\n// A full range clears the string, like `clear()` does\ns.drain(..);\nassert_eq!(s, \"\");\n```","links":{"`char`":"1:52078:458","`core::mem::forget`":"1:1907:792"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:4423:264":{"id":"a:1:31996:236-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5918:810":{"id":"0:5918:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2905,4],"end":[2907,5]},"visibility":"default","docs":"Converts the given [`String`] to a vector [`Vec`] that holds values of type [`u8`].\n\n# Examples\n\n```\nlet s1 = String::from(\"hello world\");\nlet v1 = Vec::from(s1);\n\nfor b in v1 {\n    println!(\"{b}\");\n}\n```","links":{"`Vec`":"0:7048:263","`u8`":"1:52095:1800","`String`":"0:7632:242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["string",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:6039:8069":{"id":"b:0:727-0:6039:8069","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:884":{"id":"0:884","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[465,0],"end":[937,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:887:2669","0:888:2694","0:889:3958","0:890:3924","0:892:3980","0:893:3991","0:901:3978","0:902:4038","0:903:4049"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:735:3354":{"id":"0:735:3354","crate_id":0,"name":"Borrowed","span":{"filename":"library/alloc/src/borrow.rs","begin":[186,4],"end":[186,65]},"visibility":"default","docs":"Borrowed data.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:737:1923"]},"discriminant":null}}},"0:919:2428":{"id":"0:919:2428","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1220,4],"end":[1222,5]},"visibility":"public","docs":"Returns a slice of all values in the underlying vector, in arbitrary\norder.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_as_slice)]\nuse std::collections::BinaryHeap;\nuse std::io::{self, Write};\n\nlet heap = BinaryHeap::from([1, 2, 3, 4, 5, 6, 7]);\n\nio::sink().write(heap.as_slice()).unwrap();\n```","links":{},"attrs":["#[must_use]","#[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3478":{"id":"0:3478","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1496,0],"end":[1500,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3481:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4535:6214":{"id":"0:4535:6214","crate_id":0,"name":"push_back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1685,4],"end":[1692,5]},"visibility":"public","docs":"Appends an element to the back of the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(3, *buf.back().unwrap());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push\", \"put\", \"append\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7502:678":{"id":"0:7502:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2732,0],"end":[2732,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6310:780":{"id":"0:6310:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[3270,4],"end":[3272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1441":{"id":"0:1441","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[198,0],"end":[204,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_unwindsafe\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"core::panic::UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"core::panic::RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"core::panic::RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5880":{"id":"0:5880","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2694,0],"end":[2699,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5881:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:726:3595":{"id":"0:726:3595","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/borrow.rs","begin":[77,4],"end":[79,5]},"visibility":"default","docs":"Uses borrowed data to replace owned data, usually by cloning.\n\nThis is borrow-generalized version of [`Clone::clone_from`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s: String = String::new();\n\"hello\".clone_into(&mut s);\n\nlet mut v: Vec<i32> = Vec::new();\n[1, 2][..].clone_into(&mut v);\n```","links":{"`Clone::clone_from`":"1:2633:464"},"attrs":["#[stable(feature = \"toowned_clone_into\", since = \"1.63.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:723:249","args":null}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1122:933":{"id":"0:1122:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1841,4],"end":[1843,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:1568:209":{"id":"b:1:8171-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:5842":{"id":"0:5842","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2473,0],"end":[2480,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5843:248","0:5844:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:7436:4175":{"id":"b:1:2618-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:786":{"id":"0:786","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[440,0],"end":[448,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"1:3157:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:788:198","0:789:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:1518:4524":{"id":"b:1:2903-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:887:2669":{"id":"0:887:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[483,4],"end":[485,5]},"visibility":"public","docs":"Creates an empty `BinaryHeap` as a max-heap, using `A` as allocator.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new_in(System);\nheap.push(4);\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_binary_heap_constructor\", issue =\n\"112353\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3982":{"id":"0:3982","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2151,0],"end":[2158,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3985:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5135":{"id":"0:5135","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2323,0],"end":[2414,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5138:1252","0:5139:1016","0:5140:973","0:5141:847","0:5142:829"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1404:5106":{"id":"0:1404:5106","crate_id":0,"name":"into_key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[329,4],"end":[331,5]},"visibility":"public","docs":"Take ownership of the key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nif let Entry::Vacant(v) = map.entry(\"poneyland\") {\n    v.into_key();\n}\n```","links":{},"attrs":["#[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4687":{"id":"0:4687","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[158,0],"end":[158,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7612":{"id":"0:7612","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,9],"end":[227,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7613:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3846:4991":{"id":"0:3846:4991","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1588,4],"end":[1596,5]},"visibility":"public","docs":"Returns a reference to the previous element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6708":{"id":"0:6708","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[193,0],"end":[193,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:3397:4776":{"id":"a:1:41611:4468-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:4309:4057":{"id":"a:1:41611:4468-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:5854-0:7632:242":{"id":"b:0:5854-0:7632:242","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:1527:4528":{"id":"b:1:2898-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13210:29484":{"id":"1:13210:29484","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12812:2367","`DoubleEndedIterator`":"1:8205:129","prim@char":"1:52078:458","str::match_indices":"1:13207:8983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43547:8937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6224":{"id":"0:6224","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2541,0],"end":[2567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6226:1153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:295:2399":{"id":"a:1:41611:4468-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1988:2785":{"id":"0:1988:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2205,4],"end":[2210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1367:780":{"id":"0:1367:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[112,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1795:462":{"id":"0:1795:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1798,4],"end":[1800,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6289:973":{"id":"0:6289:973","crate_id":0,"name":"le","span":{"filename":"library/alloc/src/sync.rs","begin":[3193,4],"end":[3195,5]},"visibility":"default","docs":"'Less than or equal to' comparison for two `Arc`s.\n\nThe two are compared by calling `<=` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five <= Arc::new(5));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:642:198":{"id":"0:642:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/boxed.rs","begin":[2174,4],"end":[2174,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:44290:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:6376":{"id":"0:6376","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3603,0],"end":[3607,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6379:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:1568:209":{"id":"a:1:32053:3459-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3320:2669":{"id":"0:3320:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[361,4],"end":[363,5]},"visibility":"public","docs":"Makes a new `BTreeSet` with a reasonable choice of B.\n\n# Examples\n\n```\n# #![allow(unused_mut)]\n# #![feature(allocator_api)]\n# #![feature(btreemap_alloc)]\nuse std::collections::BTreeSet;\nuse std::alloc::Global;\n\nlet mut set: BTreeSet<i32> = BTreeSet::new_in(Global);\n```","links":{},"attrs":["#[unstable(feature = \"btreemap_alloc\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5888":{"id":"0:5888","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2740,0],"end":[2756,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"string_from_box\", since = \"1.18.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5889:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5185":{"id":"0:5185","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2586,0],"end":[2612,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5188:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1873":{"id":"0:1873","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1979,0],"end":[2003,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1877:172","0:1878:1167","0:1879:3431","0:1880:4798","0:1881:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4623":{"id":"0:4623","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2814,0],"end":[2821,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:4627:172","0:4628:4175","0:4629:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5091:248":{"id":"0:5091:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/rc.rs","begin":[2121,4],"end":[2121,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:5320:612":{"id":"0:5320:612","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/rc.rs","begin":[3578,4],"end":[3583,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7655:9289":{"id":"b:1:2898-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7149:8732":{"id":"0:7149:8732","crate_id":0,"name":"spare_capacity_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2405,4],"end":[2415,5]},"visibility":"public","docs":"Returns the remaining spare capacity of the vector as a slice of\n`MaybeUninit<T>`.\n\nThe returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n[`set_len`] method.\n\n[`set_len`]: Vec::set_len\n\n# Examples\n\n```\n// Allocate vector big enough for 10 elements.\nlet mut v = Vec::with_capacity(10);\n\n// Fill in the first 3 elements.\nlet uninit = v.spare_capacity_mut();\nuninit[0].write(0);\nuninit[1].write(1);\nuninit[2].write(2);\n\n// Mark the first 3 elements of the vector as being initialized.\nunsafe {\n    v.set_len(3);\n}\n\nassert_eq!(&v, &[0, 1, 2]);\n```","links":{"Vec::set_len":"0:7082:3916"},"attrs":["#[stable(feature = \"vec_spare_capacity\", since = \"1.60.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6114:3135":{"id":"0:6114:3135","crate_id":0,"name":"new_zeroed_slice_in","span":{"filename":"library/alloc/src/sync.rs","begin":[1234,4],"end":[1248,5]},"visibility":"public","docs":"Constructs a new atomically reference-counted slice with uninitialized contents, with the memory being\nfilled with `0` bytes, in the provided allocator.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet values = Arc::<[u32], _>::new_zeroed_slice_in(3, System);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1809":{"id":"0:1809","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1835,0],"end":[1839,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1813:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7421:780":{"id":"0:7421:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,31],"end":[3396,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:6554:4150":{"id":"b:1:8171-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2615-0:1557:4545":{"id":"b:1:2615-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:1496:4175":{"id":"b:1:2903-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:980:172":{"id":"0:980:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1516,4],"end":[1516,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3727-0:1546:4541":{"id":"b:1:3727-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2906:136":{"id":"1:2906:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31924:9779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2167:5025":{"id":"0:2167:5025","crate_id":0,"name":"insert_after","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3203,4],"end":[3218,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap before the\nnewly inserted element.\n\nIf the inserted key is not greater than the key before the cursor\n(if any), or if it not less than the key after the cursor (if any),\nthen an [`UnorderedKeyError`] is returned since this would\ninvalidate the [`Ord`] invariant between the keys of the map.","links":{"`Ord`":"1:2701:194","`UnorderedKeyError`":"0:7412:5026"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5108:60":{"id":"0:5108:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/rc.rs","begin":[2221,4],"end":[2223,5]},"visibility":"default","docs":"Creates a new `Rc<T>`, with the `Default` value for `T`.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x: Rc<i32> = Default::default();\nassert_eq!(*x, 0);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3962":{"id":"0:3962","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2104,0],"end":[2104,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3278:780":{"id":"0:3278:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[240,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5311:1153":{"id":"0:5311:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/rc.rs","begin":[3519,4],"end":[3531,5]},"visibility":"public","docs":"Creates a new `UniqueRc`\n\nWeak references to this `UniqueRc` can be created with [`UniqueRc::downgrade`]. Upgrading\nthese weak references will fail before the `UniqueRc` has been converted into an [`Rc`].\nAfter converting the `UniqueRc` into an [`Rc`], any weak references created beforehand will\npoint to the new [`Rc`].","links":{"`Rc`":"0:4925:216","`UniqueRc::downgrade`":"0:5312:8240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7621:8665":{"id":"b:1:2888-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:3397:4776":{"id":"a:1:31996:236-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:7553:7100":{"id":"b:1:2898-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4804":{"id":"0:4804","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[961,0],"end":[965,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4805:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1692:1167":{"id":"0:1692:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1573,4],"end":[1580,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6057":{"id":"0:6057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[346,0],"end":[350,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6059:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1557:4545":{"id":"0:1557:4545","crate_id":0,"name":"IntoValues","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[553,0],"end":[559,1]},"visibility":"public","docs":"An owning iterator over the values of a `BTreeMap`.\n\nThis `struct` is created by the [`into_values`] method on [`BTreeMap`].\nSee its documentation for more.\n\n[`into_values`]: BTreeMap::into_values","links":{"BTreeMap::into_values":"0:1642:4794","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1557:4545","a:1:32053:3459-0:1557:4545","a:1:3111:246-0:1557:4545","a:1:31996:236-0:1557:4545","a:1:41612:4469-0:1557:4545","a:1:41611:4468-0:1557:4545","b:1:8171-0:1557:4545","b:1:2888-0:1557:4545","b:1:2618-0:1557:4545","b:1:2615-0:1557:4545","b:1:3727-0:1557:4545","b:1:2892-0:1557:4545","b:1:2903-0:1557:4545","b:1:2898-0:1557:4545","0:1959","0:1939","0:1562","0:1963","0:1954","0:1948"]}}},"0:5559-1:43643:8935":{"id":"0:5559-1:43643:8935","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[45,27],"end":[45,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::LinesAny","name":"LinesAny","id":"1:43643:8935","glob":false}}},"0:1424-0:1356:4373":{"id":"0:1424-0:1356:4373","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[25,38],"end":[25,51]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"entry::OccupiedError","name":"OccupiedError","id":"0:1356:4373","glob":false}}},"0:986:3437":{"id":"0:986:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1532,4],"end":[1534,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1040:172":{"id":"0:1040:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1662,4],"end":[1662,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:3985:850":{"id":"0:3985:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2152,4],"end":[2157,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5180:810":{"id":"0:5180:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2560,4],"end":[2562,5]},"visibility":"default","docs":"Allocate a reference-counted string slice and copy `v` into it.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: String = \"statue\".to_owned();\nlet shared: Rc<str> = Rc::from(original);\nassert_eq!(\"statue\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6143:1319":{"id":"0:6143:1319","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/sync.rs","begin":[1833,4],"end":[1835,5]},"visibility":"public","docs":"Returns `true` if the two `Arc`s point to the same allocation in a vein similar to\n[`ptr::eq`]. This function ignores the metadata of  `dyn Trait` pointers.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\nlet same_five = Arc::clone(&five);\nlet other_five = Arc::new(5);\n\nassert!(Arc::ptr_eq(&five, &same_five));\nassert!(!Arc::ptr_eq(&five, &other_five));\n```\n\n[`ptr::eq`]: core::ptr::eq \"ptr::eq\"","links":{"core::ptr::eq":"1:2561:678"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"ptr_eq\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:3792:4918":{"id":"a:1:3146:11953-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6259:60":{"id":"0:6259:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/sync.rs","begin":[3008,4],"end":[3010,5]},"visibility":"default","docs":"Constructs a new `Weak<T>`, without allocating memory.\nCalling [`upgrade`] on the return value always\ngives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::sync::Weak;\n\nlet empty: Weak<i64> = Default::default();\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","Weak::upgrade":"0:6247:8595"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1395,0],"end":[1444,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8"],"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:406:2422","0:407:2895","0:408:3309","0:409:3310","0:410:3311","0:411:3312","0:412:3313","0:413:3314","0:414:3315","0:415:3316","0:416:3317","0:417:3318","0:418:3319","0:419:3320","0:420:3321","0:421:1911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1566:780":{"id":"0:1566:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[563,4],"end":[565,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7560":{"id":"0:7560","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,32],"end":[111,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3863:6349":{"id":"0:3863:6349","crate_id":0,"name":"split_before","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1768,4],"end":[1775,5]},"visibility":"public","docs":"Splits the list into two before the current element. This will return a\nnew list consisting of everything before the cursor, with the original\nlist retaining everything after.\n\nIf the cursor is pointing at the \"ghost\" non-element then the entire contents\nof the `LinkedList` are moved.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7645:9281":{"id":"a:1:41611:4468-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13250:28322":{"id":"1:13250:28322","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:33075"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1557,0],"end":[1573,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_slice\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:445:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4001":{"id":"0:4001","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2191,0],"end":[2191,70]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7556":{"id":"0:7556","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,9],"end":[111,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7557:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5750:3494":{"id":"0:5750:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/string.rs","begin":[2080,4],"end":[2082,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6192":{"id":"0:6192","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2101,0],"end":[2108,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6195:248","0:6196:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6331:810":{"id":"0:6331:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3357,4],"end":[3359,5]},"visibility":"default","docs":"Allocate a reference-counted slice and fill it by cloning `v`'s items.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet original: &[i32] = &[1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1557:4545":{"id":"b:1:2888-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8171-0:3279:5798":{"id":"b:1:8171-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:0:727-0:4309:4057":{"id":"b:0:727-0:4309:4057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:5922:4150":{"id":"b:1:2892-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1557:4545":{"id":"a:1:3111:246-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1968":{"id":"0:1968","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2170,0],"end":[2174,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1972:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:1830:4776":{"id":"a:1:3146:11953-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:1356:4373":{"id":"a:1:32053:3459-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13204:29483":{"id":"1:13204:29483","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12812:2367","`DoubleEndedIterator`":"1:8205:129","prim@char":"1:52078:458","str::matches":"1:13201:11824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43601:8939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1856:172":{"id":"0:1856:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1920,4],"end":[1920,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"0:1653":{"id":"0:1653","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1495,0],"end":[1528,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1657:172","0:1658:1167","0:1659:3429","0:1660:3431","0:1661:4798","0:1662:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3221:678":{"id":"0:3221:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3267":{"id":"0:3267","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[221,0],"end":[225,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3270:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5595":{"id":"0:5595","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[190,0],"end":[195,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::string::String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5596:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2615-0:4925:216":{"id":"b:1:2615-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:725:3587":{"id":"0:725:3587","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[59,4],"end":[59,38]},"visibility":"default","docs":"Creates owned data from borrowed data, usually by cloning.\n\n# Examples\n\nBasic usage:\n\n```\nlet s: &str = \"a\";\nlet ss: String = s.to_owned();\n\nlet v: &[i32] = &[1, 2];\nlet vv: Vec<i32> = v.to_owned();\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]","#[rustc_diagnostic_item = \"to_owned_method\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:723:249","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:916:2760":{"id":"0:916:2760","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1156,4],"end":[1158,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` elements more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\nuse std::collections::TryReserveError;\n\nfn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n    let mut heap = BinaryHeap::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    heap.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    heap.extend(data.iter());\n\n    Ok(heap.pop())\n}\n# find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve_2\", since = \"1.63.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1532":{"id":"0:1532","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[501,0],"end":[505,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1535:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5013":{"id":"0:5013","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1198,0],"end":[1330,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5015:3190","0:5016:8205","0:5017:8213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5105:462":{"id":"0:5105:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/rc.rs","begin":[2199,4],"end":[2204,5]},"visibility":"default","docs":"Makes a clone of the `Rc` pointer.\n\nThis creates another pointer to the same allocation, increasing the\nstrong reference count.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet _ = Rc::clone(&five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:4423:264":{"id":"a:1:3146:11953-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:6039:8069":{"id":"b:1:2892-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7155:6933":{"id":"0:7155:6933","crate_id":0,"name":"resize","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2530,4],"end":[2538,5]},"visibility":"public","docs":"Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `Vec` is extended by the\ndifference, with each additional slot filled with `value`.\nIf `new_len` is less than `len`, the `Vec` is simply truncated.\n\nThis method requires `T` to implement [`Clone`],\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on [`Default`] instead of\n[`Clone`]), use [`Vec::resize_with`].\nIf you only need to resize to a smaller size, use [`Vec::truncate`].\n\n# Examples\n\n```\nlet mut vec = vec![\"hello\"];\nvec.resize(3, \"world\");\nassert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n\nlet mut vec = vec![1, 2, 3, 4];\nvec.resize(2, 0);\nassert_eq!(vec, [1, 2]);\n```","links":{"`Default`":"1:2940:123","`Vec::resize_with`":"0:7145:6786","`Clone`":"1:2631:112","`Vec::truncate`":"0:7076:6589"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_resize\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7317":{"id":"0:7317","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3305,0],"end":[3321,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7319:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:1465:4057":{"id":"b:1:2888-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:2089:4918":{"id":"a:1:3146:11953-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4484:2384":{"id":"0:4484:2384","crate_id":0,"name":"try_with_capacity","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[583,4],"end":[585,5]},"visibility":"public","docs":"Creates an empty deque with space for at least `capacity` elements.\n\n# Errors\n\nReturns an error if the capacity exceeds `isize::MAX` _bytes_,\nor if the allocator reports allocation failure.\n\n# Examples\n\n```\n# #![feature(try_with_capacity)]\n# #[allow(unused)]\n# fn example() -> Result<(), std::collections::TryReserveError> {\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::try_with_capacity(10)?;\n# Ok(()) }\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"try_with_capacity\", issue = \"91913\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7708:678":{"id":"0:7708:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2352,0],"end":[2352,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7451:780":{"id":"0:7451:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[165,9],"end":[165,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1527:4528":{"id":"0:1527:4528","crate_id":0,"name":"Values","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[496,0],"end":[498,1]},"visibility":"public","docs":"An iterator over the values of a `BTreeMap`.\n\nThis `struct` is created by the [`values`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`values`]: BTreeMap::values","links":{"BTreeMap::values":"0:2077:1874","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1527:4528","a:1:32053:3459-0:1527:4528","a:1:3111:246-0:1527:4528","a:1:31996:236-0:1527:4528","a:1:41612:4469-0:1527:4528","a:1:41611:4468-0:1527:4528","b:0:727-0:1527:4528","b:1:8171-0:1527:4528","b:1:2888-0:1527:4528","b:1:2618-0:1527:4528","b:1:2615-0:1527:4528","b:1:3727-0:1527:4528","b:1:2892-0:1527:4528","b:1:2903-0:1527:4528","b:1:2898-0:1527:4528","0:1822","0:1815","0:1826","0:1809","0:1800","0:1532","0:1819"]}}},"0:3538:462":{"id":"0:3538:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1631,4],"end":[1644,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7472:4175":{"id":"a:1:32053:3459-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31996:236-0:3245:5783":{"id":"a:1:31996:236-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5596:2400":{"id":"0:5596:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/str.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:4074:4150":{"id":"b:1:2618-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13138:3919":{"id":"1:13138:3919","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1577:4553":{"id":"b:1:2898-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1830:4776":{"id":"a:1:3111:246-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4009":{"id":"0:4009","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2200,0],"end":[2200,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4007":{"id":"0:4007","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2197,0],"end":[2197,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3780":{"id":"0:3780","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1288,0],"end":[1303,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3783:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:1356:4373":{"id":"b:1:2898-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:7380:4065":{"id":"a:1:31996:236-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1378:3494":{"id":"0:1378:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[141,4],"end":[143,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:1311:4371":{"id":"a:1:41611:4468-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:0:727-0:3635:181":{"id":"b:0:727-0:3635:181","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7253:2350":{"id":"0:7253:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2993,4],"end":[2995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5757:813":{"id":"0:5757:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2108,4],"end":[2112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1321:1923":{"id":"0:1321:1923","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[32,59],"end":[32,85]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"a:1:3146:11953-0:1311:4371":{"id":"a:1:3146:11953-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1082:3429":{"id":"0:1082:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1747,4],"end":[1750,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7048:263":{"id":"a:1:41612:4469-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:7412:5026":{"id":"b:1:3727-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13192:28439":{"id":"1:13192:28439","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:52078:458","str::splitn":"1:13189:28437","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43501:8722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:688:810":{"id":"0:688:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2418,4],"end":[2420,5]},"visibility":"default","docs":"Converts a [`str`] into a box of dyn [`Error`].\n\n[`str`]: prim@str\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error>::from(a_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"prim@str":"1:52084:1672","`Error`":"1:2951:136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[394,0],"end":[400,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:865:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:826:101":{"id":"0:826:101","crate_id":0,"name":"BinaryHeap","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[276,0],"end":[281,1]},"visibility":"public","docs":"A priority queue implemented with a binary heap.\n\nThis will be a max-heap.\n\nIt is a logic error for an item to be modified in such a way that the\nitem's ordering relative to any other item, as determined by the [`Ord`]\ntrait, changes while it is in the heap. This is normally only possible\nthrough interior mutability, global state, I/O, or unsafe code. The\nbehavior resulting from such a logic error is not specified, but will\nbe encapsulated to the `BinaryHeap` that observed the logic error and not\nresult in undefined behavior. This could include panics, incorrect results,\naborts, memory leaks, and non-termination.\n\nAs long as no elements change their relative order while being in the heap\nas described above, the API of `BinaryHeap` guarantees that the heap\ninvariant remains intact i.e. its methods all behave as documented. For\nexample if a method is documented as iterating in sorted order, that's\nguaranteed to work as long as elements in the heap have not changed order,\neven in the presence of closures getting unwinded out of, iterators getting\nleaked, and similar foolishness.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `BinaryHeap<i32>` in this example).\nlet mut heap = BinaryHeap::new();\n\n// We can use peek to look at the next item in the heap. In this case,\n// there's no items in there yet so we get None.\nassert_eq!(heap.peek(), None);\n\n// Let's add some scores...\nheap.push(1);\nheap.push(5);\nheap.push(2);\n\n// Now peek shows the most important item in the heap.\nassert_eq!(heap.peek(), Some(&5));\n\n// We can check the length of a heap.\nassert_eq!(heap.len(), 3);\n\n// We can iterate over the items in the heap, although they are returned in\n// a random order.\nfor x in &heap {\n    println!(\"{x}\");\n}\n\n// If we instead pop these scores, they should come back in order.\nassert_eq!(heap.pop(), Some(5));\nassert_eq!(heap.pop(), Some(2));\nassert_eq!(heap.pop(), Some(1));\nassert_eq!(heap.pop(), None);\n\n// We can clear the heap of any remaining items.\nheap.clear();\n\n// The heap should now be empty.\nassert!(heap.is_empty())\n```\n\nA `BinaryHeap` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BinaryHeap;\n\nlet heap = BinaryHeap::from([1, 5, 2]);\n```\n\n## Min-heap\n\nEither [`core::cmp::Reverse`] or a custom [`Ord`] implementation can be used to\nmake `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest\nvalue instead of the greatest one.\n\n```\nuse std::collections::BinaryHeap;\nuse std::cmp::Reverse;\n\nlet mut heap = BinaryHeap::new();\n\n// Wrap values in `Reverse`\nheap.push(Reverse(1));\nheap.push(Reverse(5));\nheap.push(Reverse(2));\n\n// If we pop these scores now, they should come back in the reverse order.\nassert_eq!(heap.pop(), Some(Reverse(1)));\nassert_eq!(heap.pop(), Some(Reverse(2)));\nassert_eq!(heap.pop(), Some(Reverse(5)));\nassert_eq!(heap.pop(), None);\n```\n\n# Time complexity\n\n| [push]  | [pop]         | [peek]/[peek\\_mut] |\n|---------|---------------|--------------------|\n| *O*(1)~ | *O*(log(*n*)) | *O*(1)             |\n\nThe value for `push` is an expected cost; the method documentation gives a\nmore detailed analysis.\n\n[`core::cmp::Reverse`]: core::cmp::Reverse\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n[push]: BinaryHeap::push\n[pop]: BinaryHeap::pop\n[peek]: BinaryHeap::peek\n[peek\\_mut]: BinaryHeap::peek_mut","links":{"BinaryHeap::peek_mut":"0:889:3958","BinaryHeap::push":"0:892:3980","core::cmp::Reverse":"1:30863:11886","BinaryHeap::pop":"0:890:3924","BinaryHeap::peek":"0:911:4068","`Ord`":"1:2701:194"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BinaryHeap\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:880","0:884","0:906","a:1:3146:11953-0:826:101","a:1:32053:3459-0:826:101","a:1:3111:246-0:826:101","a:1:31996:236-0:826:101","a:1:41612:4469-0:826:101","a:1:41611:4468-0:826:101","b:0:727-0:826:101","b:1:2888-0:826:101","b:1:2618-0:826:101","b:1:2615-0:826:101","b:1:3727-0:826:101","b:1:2892-0:826:101","b:1:2903-0:826:101","b:1:2898-0:826:101","0:1096","0:866","0:1102","0:1123","0:1110","0:1116","0:863","0:1130","0:1106","0:858","0:1092"]}}},"a:1:3146:11953-0:1496:4175":{"id":"a:1:3146:11953-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4168:3434":{"id":"0:4168:3434","crate_id":0,"name":"fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[67,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["accum",{"generic":"Acc"}],["f",{"generic":"F"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4760:780":{"id":"0:4760:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[722,4],"end":[724,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398":{"id":"0:398","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1388,0],"end":[1392,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:401:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:753:248":{"id":"0:753:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/borrow.rs","begin":[336,4],"end":[336,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"B"}}}},"0:3553:462":{"id":"0:3553:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1698,4],"end":[1700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1527:4528":{"id":"a:1:3146:11953-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4512:954":{"id":"0:4512:954","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1126,4],"end":[1129,5]},"visibility":"public","docs":"Returns a front-to-back iterator.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nlet b: &[_] = &[&5, &3, &4];\nlet c: Vec<&i32> = buf.iter().collect();\nassert_eq!(&c[..], b);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7380:4065":{"id":"a:1:3146:11953-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:3238:4057":{"id":"a:1:41612:4469-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[362,0],"end":[366,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:294:3301"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4447":{"id":"0:4447","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[148,0],"end":[154,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4449:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:7527:2620":{"id":"a:1:41612:4469-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7418":{"id":"0:7418","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,27],"end":[3396,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3933:172":{"id":"0:3933:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2048,4],"end":[2048,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"a:1:41611:4468-0:1356:4373":{"id":"a:1:41611:4468-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:6095:3090":{"id":"0:6095:3090","crate_id":0,"name":"pin_in","span":{"filename":"library/alloc/src/sync.rs","begin":[810,4],"end":[812,5]},"visibility":"public","docs":"Constructs a new `Pin<Arc<T, A>>` in the provided allocator. If `T` does not implement `Unpin`,\nthen `data` will be pinned in memory and unable to be moved.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4641:3569":{"id":"0:4641:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2842,4],"end":[2844,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6747:60":{"id":"0:6747:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[386,4],"end":[388,5]},"visibility":"default","docs":"Creates an empty `vec::IntoIter`.\n\n```\n# use std::vec;\nlet iter: vec::IntoIter<u8> = Default::default();\nassert_eq!(iter.len(), 0);\nassert_eq!(iter.as_slice(), &[]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3312:780":{"id":"0:3312:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[312,4],"end":[314,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:4423:264":{"id":"b:0:727-0:4423:264","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:2089:4918":{"id":"b:1:2898-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2143:4987":{"id":"0:2143:4987","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2968,4],"end":[2971,5]},"visibility":"public","docs":"Returns a reference to the key and value of the next element without\nmoving the cursor.\n\nIf the cursor is at the end of the map then `None` is returned","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1893:3429":{"id":"0:1893:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3509":{"id":"0:3509","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1555,0],"end":[1569,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3512:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7569:7099":{"id":"b:1:2903-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6302:780":{"id":"0:6302:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[3256,4],"end":[3258,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5303":{"id":"0:5303","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3443,0],"end":[3443,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5580:198":{"id":"0:5580:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/str.rs","begin":[64,4],"end":[64,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:6196:610":{"id":"0:6196:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/sync.rs","begin":[2105,4],"end":[2107,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4497:2769":{"id":"0:4497:2769","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[859,4],"end":[871,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional` more elements to\nbe inserted in the given deque. After calling `try_reserve_exact`,\ncapacity will be greater than or equal to `self.len() + additional` if\nit returns `Ok(())`. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: VecDeque::try_reserve\n\n# Errors\n\nIf the capacity overflows `usize`, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\nuse std::collections::VecDeque;\n\nfn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n    let mut output = VecDeque::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM(Out-Of-Memory) in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{"VecDeque::try_reserve":"0:4498:2760"},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:1577:4553":{"id":"b:1:2618-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6720:6996":{"id":"0:6720:6996","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[233,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:914:2750":{"id":"0:914:2750","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` elements more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `reserve`,\ncapacity will be greater than or equal to `self.len() + additional`.\nDoes nothing if capacity is already sufficient.\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.reserve(100);\nassert!(heap.capacity() >= 100);\nheap.push(4);\n```","links":{"`usize`":"1:52101:1861"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1725:651":{"id":"0:1725:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1663,4],"end":[1683,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3387:172":{"id":"0:3387:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1237,4],"end":[1237,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7694:1135":{"id":"0:7694:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2350,0],"end":[2350,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13146:18922":{"id":"1:13146:18922","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13147:28432"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7142:3440":{"id":"0:7142:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2242,4],"end":[2244,5]},"visibility":"public","docs":"Returns `true` if the vector contains no elements.\n\n# Examples\n\n```\nlet mut v = Vec::new();\nassert!(v.is_empty());\n\nv.push(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5813:8912":{"id":"0:5813:8912","crate_id":0,"name":"Searcher","span":{"filename":"library/alloc/src/string.rs","begin":[2283,4],"end":[2283,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}},"a:1:3146:11953-0:7412:5026":{"id":"a:1:3146:11953-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:5217:8069":{"id":"a:1:41612:4469-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:5347-1:10903:238":{"id":"0:5347-1:10903:238","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[45,0],"end":[45,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::SliceIndex","name":"SliceIndex","id":"1:10903:238","glob":false}}},"0:1627:3978":{"id":"0:1627:3978","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1150,4],"end":[1175,5]},"visibility":"public","docs":"Moves all elements from `other` into `self`, leaving `other` empty.\n\nIf a key from `other` is already present in `self`, the respective\nvalue from `self` will be overwritten with the respective value from `other`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\na.insert(3, \"c\"); // Note: Key (3) also present in b.\n\nlet mut b = BTreeMap::new();\nb.insert(3, \"d\"); // Note: Key (3) also present in a.\nb.insert(4, \"e\");\nb.insert(5, \"f\");\n\na.append(&mut b);\n\nassert_eq!(a.len(), 5);\nassert_eq!(b.len(), 0);\n\nassert_eq!(a[&1], \"a\");\nassert_eq!(a[&2], \"b\");\nassert_eq!(a[&3], \"d\"); // Note: \"c\" has been overwritten.\nassert_eq!(a[&4], \"e\");\nassert_eq!(a[&5], \"f\");\n```","links":{},"attrs":["#[stable(feature = \"btree_append\", since = \"1.11.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:2089:4918":{"id":"b:1:2903-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2077:1874":{"id":"0:2077:1874","crate_id":0,"name":"values","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2455,4],"end":[2457,5]},"visibility":"public","docs":"Gets an iterator over the values of the map, in order by key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"hello\");\na.insert(2, \"goodbye\");\n\nlet values: Vec<&str> = a.values().cloned().collect();\nassert_eq!(values, [\"hello\", \"goodbye\"]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:6039:8069":{"id":"a:1:3146:11953-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:7609:7098":{"id":"a:1:3146:11953-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1496:4175":{"id":"b:1:2615-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:7372:4175":{"id":"b:1:2898-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7391:780":{"id":"0:7391:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1595,16],"end":[1595,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4429":{"id":"0:4429","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[109,0],"end":[120,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4432:462","0:4433:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5944:172":{"id":"0:5944:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/string.rs","begin":[3005,4],"end":[3005,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"char"}}}},"b:1:2888-0:7363:2619":{"id":"b:1:2888-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2114:4932":{"id":"0:2114:4932","crate_id":0,"name":"CursorMutKey","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2858,0],"end":[2869,1]},"visibility":"public","docs":"A cursor over a `BTreeMap` with editing operations, and which allows\nmutating the key of elements.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the map during iteration. This is because the lifetime of its yielded\nreferences is tied to its own lifetime, instead of just the underlying map. This means\ncursors cannot yield multiple elements at once.\n\nCursors always point to a gap between two elements in the map, and can\noperate on the two immediately adjacent elements.\n\nA `CursorMutKey` is created from a [`CursorMut`] with the\n[`CursorMut::with_mutable_key`] method.\n\n# Safety\n\nSince this cursor allows mutating keys, you must ensure that the `BTreeMap`\ninvariants are maintained. Specifically:\n\n* The key of the newly inserted element must be unique in the tree.\n* All keys in the tree must remain in sorted order.","links":{"`CursorMut`":"0:2103:4931","`CursorMut::with_mutable_key`":"0:2146:5000"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:2147","0:2158","a:1:3146:11953-0:2114:4932","a:1:32053:3459-0:2114:4932","a:1:3111:246-0:2114:4932","a:1:31996:236-0:2114:4932","a:1:41612:4469-0:2114:4932","a:1:41611:4468-0:2114:4932","b:1:2888-0:2114:4932","b:1:2618-0:2114:4932","b:1:2615-0:2114:4932","b:1:3727-0:2114:4932","b:1:2892-0:2114:4932","b:1:2903-0:2114:4932","b:1:2898-0:2114:4932","0:2123"]}}},"a:1:41612:4469-0:7444:209":{"id":"a:1:41612:4469-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:1557:4545":{"id":"b:1:2898-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4967:3044":{"id":"0:4967:3044","crate_id":0,"name":"new_zeroed","span":{"filename":"library/alloc/src/rc.rs","begin":[554,4],"end":[562,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::rc::Rc;\n\nlet zero = Rc::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:218:3019":{"id":"a:1:41611:4468-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4841-1:42551:7834":{"id":"0:4841-1:42551:7834","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[582,27],"end":[582,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Arguments","name":"Arguments","id":"1:42551:7834","glob":false}}},"0:5358-1:10984:4502":{"id":"0:5358-1:10984:4502","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[53,22],"end":[53,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_range\", issue = \"76393\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::range","name":"range","id":"1:10984:4502","glob":false}}},"0:5250:3190":{"id":"0:5250:3190","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[2917,4],"end":[2919,5]},"visibility":"public","docs":"Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`]\nlater) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`],\nas these don't own anything; the method still works on them).\n\n# Safety\n\nThe pointer must have originated from the [`into_raw`] and must still own its potential\nweak reference, and `ptr` must point to a block of memory allocated by the global allocator.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to [`into_raw`].\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet strong = Rc::new(\"hello\".to_owned());\n\nlet raw_1 = Rc::downgrade(&strong).into_raw();\nlet raw_2 = Rc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Rc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Rc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[`into_raw`]: Weak::into_raw\n[`upgrade`]: Weak::upgrade\n[`new`]: Weak::new","links":{"Weak::new":"0:5237:1153","Weak::into_raw":"0:5255:3225","Weak::upgrade":"0:5258:8595"},"attrs":["#[inline]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7937:1135":{"id":"0:7937:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[27,0],"end":[27,126]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:2103:4931":{"id":"a:1:41612:4469-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:943:4057":{"id":"b:1:3727-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:3245:5783":{"id":"a:1:3146:11953-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:1496:4175":{"id":"a:1:41611:4468-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3704:2669":{"id":"0:3704:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[517,4],"end":[519,5]},"visibility":"public","docs":"Constructs an empty `LinkedList<T, A>`.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\nuse std::collections::LinkedList;\n\nlet list: LinkedList<u32, _> = LinkedList::new_in(System);\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5556-1:43325:7107":{"id":"0:5556-1:43325:7107","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[42,29],"end":[42,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Utf8Error","name":"Utf8Error","id":"1:43325:7107","glob":false}}},"a:1:3146:11953-0:1327:4374":{"id":"a:1:3146:11953-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3353:3926":{"id":"0:3353:3926","crate_id":0,"name":"take","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[977,4],"end":[983,5]},"visibility":"public","docs":"Removes and returns the element in the set, if any, that is equal to\nthe value.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```","links":{},"attrs":["#[stable(feature = \"set_recovery\", since = \"1.9.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1518:4524":{"id":"b:1:2888-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1568:209":{"id":"a:1:3111:246-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:6007:71":{"id":"b:1:2618-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:7714:4776":{"id":"b:1:2892-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1390:5092":{"id":"0:1390:5092","crate_id":0,"name":"and_modify","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[260,4],"end":[271,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[stable(feature = \"entry_and_modify\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3807:4931":{"id":"b:1:2888-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:7569:7099":{"id":"a:1:41612:4469-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:1480:4509":{"id":"a:1:41612:4469-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13127:29475":{"id":"1:13127:29475","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13125:29474"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1342:4372":{"id":"b:1:2888-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3620:3692":{"id":"0:3620:3692","crate_id":0,"name":"linked_list","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1,0],"end":[2218,73]},"visibility":"public","docs":"A doubly-linked list with owned nodes.\n\nThe `LinkedList` allows pushing and popping elements at either end\nin constant time.\n\nNOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\narray-based containers are generally faster,\nmore memory efficient, and make better use of CPU cache.\n\n[`Vec`]: crate::vec::Vec\n[`VecDeque`]: super::vec_deque::VecDeque","links":{"super::vec_deque::VecDeque":"0:4423:264","crate::vec::Vec":"0:7048:263"},"attrs":["#[cfg(not(no_global_oom_handling))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:3635:181","0:3648:4057","0:3661:4509","0:7472:4175","0:3792:4918","0:3807:4931","0:3872:4776"],"is_stripped":false}}},"0:5621:8830":{"id":"0:5621:8830","crate_id":0,"name":"repeat","span":{"filename":"library/alloc/src/str.rs","begin":[529,4],"end":[531,5]},"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"0:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:4309:4057":{"id":"a:1:31996:236-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13163:28444":{"id":"1:13163:28444","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5511:1672":{"id":"0:5511:1672","crate_id":0,"name":"str","span":{"filename":"library/alloc/src/str.rs","begin":[1,0],"end":[662,1]},"visibility":"public","docs":"Utilities for the `str` primitive type.\n\n*[See also the `str` primitive type](str).*","links":{"str":"1:52084:1672"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]","#![allow(unused_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:5532-1:12812:2367","0:5533-1:43671:8916","0:5534-1:43662:8918","0:5535-1:12628:8727","0:5536-1:43653:8919","0:5538-1:12364:3544","0:5539-1:12366:3545","0:5541-1:12360:7286","0:5542-1:12361:8922","0:5543-1:43365:8923","0:5544-1:43355:8924","0:5545-1:43349:8925","0:5547-1:12362:8926","0:5548-1:12363:8927","0:5549-1:43338:8928","0:5551-1:43678:8930","0:5552-1:43687:8931","0:5553-1:43696:8932","0:5555-1:12772:8933","0:5556-1:43325:7107","0:5558-1:43633:8934","0:5559-1:43643:8935","0:5561-1:43529:8936","0:5562-1:43547:8937","0:5564-1:43583:8938","0:5565-1:43601:8939","0:5567-1:43397:8720","0:5568-1:43379:8711","0:5570-1:43501:8722","0:5571-1:43483:8724","0:5573-1:43447:8940","0:5574-1:43429:8941","0:5576-1:43988:8943","0:5577-1:44006:8944","0:5624:3015"],"is_stripped":false}}},"a:1:41612:4469-0:7402:4039":{"id":"a:1:41612:4469-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3725:6209":{"id":"0:3725:6209","crate_id":0,"name":"pop_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[876,4],"end":[878,5]},"visibility":"public","docs":"Removes the first element and returns it, or `None` if the list is\nempty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_front(), None);\n\nd.push_front(1);\nd.push_front(3);\nassert_eq!(d.pop_front(), Some(3));\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4742:7285":{"id":"0:4742:7285","crate_id":0,"name":"into_string","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[475,4],"end":[480,5]},"visibility":"public","docs":"Converts the `CString` into a [`String`] if it contains valid UTF-8 data.\n\nOn failure, ownership of the original `CString` is returned.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet valid_utf8 = vec![b'f', b'o', b'o'];\nlet cstring = CString::new(valid_utf8).expect(\"CString::new failed\");\nassert_eq!(cstring.into_string().expect(\"into_string() call failed\"), \"foo\");\n\nlet invalid_utf8 = vec![b'f', 0xff, b'o', b'o'];\nlet cstring = CString::new(invalid_utf8).expect(\"CString::new failed\");\nlet err = cstring.into_string().err().expect(\"into_string().err() failed\");\nassert_eq!(err.utf8_error().valid_up_to(), 1);\n```","links":{"`String`":"0:7632:242"},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5697:2750":{"id":"0:5697:2750","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/string.rs","begin":[1165,4],"end":[1167,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` bytes more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `reserve`,\ncapacity will be greater than or equal to `self.len() + additional`.\nDoes nothing if capacity is already sufficient.\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::new();\n\ns.reserve(10);\n\nassert!(s.capacity() >= 10);\n```\n\nThis might not actually increase the capacity:\n\n```\nlet mut s = String::with_capacity(10);\ns.push('a');\ns.push('b');\n\n// s now has a length of 2 and a capacity of at least 10\nlet capacity = s.capacity();\nassert_eq!(2, s.len());\nassert!(capacity >= 10);\n\n// Since we already have at least an extra 8 capacity, calling this...\ns.reserve(8);\n\n// ... doesn't actually increase.\nassert_eq!(capacity, s.capacity());\n```","links":{"`usize`":"1:52101:1861"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:3807:4931":{"id":"a:1:41612:4469-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1037":{"id":"0:1037","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1661,0],"end":[1673,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1040:172","0:1041:1167","0:1042:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:1496:4175":{"id":"b:1:8171-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:2894:810":{"id":"1:2894:810","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1046:3437":{"id":"0:1046:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1678,4],"end":[1680,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5192:810":{"id":"0:5192:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2633,4],"end":[2638,5]},"visibility":"default","docs":"Create a reference-counted pointer from\na clone-on-write pointer by copying its content.\n\n# Example\n\n```rust\n# use std::rc::Rc;\n# use std::borrow::Cow;\nlet cow: Cow<'_, str> = Cow::Borrowed(\"eggplant\");\nlet shared: Rc<str> = Rc::from(cow);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cow",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:999:60":{"id":"0:999:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1560,4],"end":[1562,5]},"visibility":"default","docs":"Creates an empty `binary_heap::IntoIter`.\n\n```\n# use std::collections::binary_heap;\nlet iter: binary_heap::IntoIter<u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3887:1167":{"id":"0:3887:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1940,4],"end":[1955,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5150:850":{"id":"0:5150:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/rc.rs","begin":[2440,4],"end":[2442,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1496:4175":{"id":"a:1:31996:236-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3852:6314":{"id":"0:3852:6314","crate_id":0,"name":"splice_after","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1618,4],"end":[1634,5]},"visibility":"public","docs":"Inserts the elements from the given `LinkedList` after the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new elements are\ninserted at the start of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["list",{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6241:334":{"id":"0:6241:334","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/sync.rs","begin":[2683,4],"end":[2696,5]},"visibility":"public","docs":"Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n\nThe pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even [`null`] otherwise.\n\n# Examples\n\n```\nuse std::sync::Arc;\nuse std::ptr;\n\nlet strong = Arc::new(\"hello\".to_owned());\nlet weak = Arc::downgrade(&strong);\n// Both point to the same object\nassert!(ptr::eq(&*strong, weak.as_ptr()));\n// The strong here keeps it alive, so we can still access the object.\nassert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n\ndrop(strong);\n// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behaviour.\n// assert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n```\n\n[`null`]: core::ptr::null \"ptr::null\"","links":{"core::ptr::null":"1:2498:11860"},"attrs":["#[must_use]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6403:10441":{"id":"0:6403:10441","crate_id":0,"name":"wake","span":{"filename":"library/alloc/src/task.rs","begin":[93,4],"end":[93,29]},"visibility":"default","docs":"Wake this task.","links":{},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2898-0:218:3019":{"id":"b:1:2898-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:5854-0:7597:7097":{"id":"b:0:5854-0:7597:7097","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:422":{"id":"0:422","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1448,0],"end":[1465,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:424:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:830:3912":{"id":"b:1:3727-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3706:955":{"id":"0:3706:955","crate_id":0,"name":"iter_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[570,4],"end":[572,5]},"visibility":"public","docs":"Provides a forward iterator with mutable references.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nfor element in list.iter_mut() {\n    *element += 10;\n}\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&10));\nassert_eq!(iter.next(), Some(&11));\nassert_eq!(iter.next(), Some(&12));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4074:4150":{"id":"0:4074:4150","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[18,0],"end":[35,1]},"visibility":"public","docs":"A draining iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`drain`] method on [`VecDeque`]. See its\ndocumentation for more.\n\n[`drain`]: VecDeque::drain","links":{"`VecDeque`":"0:4423:264","VecDeque::drain":"0:4524:4149"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:4074:4150","a:1:32053:3459-0:4074:4150","a:1:41612:4469-0:4074:4150","a:1:41611:4468-0:4074:4150","b:1:8171-0:4074:4150","b:1:2888-0:4074:4150","b:1:2618-0:4074:4150","b:1:2615-0:4074:4150","b:1:3727-0:4074:4150","b:1:2892-0:4074:4150","b:1:2903-0:4074:4150","b:1:2898-0:4074:4150","0:4133","0:4090","0:4130","0:4094","0:4097","0:4120","0:4126","0:4100"]}}},"0:5088":{"id":"0:5088","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2120,0],"end":[2127,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5091:248","0:5092:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1987:4798":{"id":"0:1987:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2198,4],"end":[2203,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:2103:4931":{"id":"b:1:3727-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[93,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Dyn","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"Dyn"}}],"bindings":[]}}}},"items":["0:233:3542"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1047":{"id":"0:1047","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1684,0],"end":[1688,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1050:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1850:780":{"id":"0:1850:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1910,4],"end":[1912,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4925:216":{"id":"0:4925:216","crate_id":0,"name":"Rc","span":{"filename":"library/alloc/src/rc.rs","begin":[317,0],"end":[324,1]},"visibility":"public","docs":"A single-threaded reference-counting pointer. 'Rc' stands for 'Reference\nCounted'.\n\nSee the [module-level documentation](./index.html) for more details.\n\nThe inherent methods of `Rc` are all associated functions, which means\nthat you have to call them as e.g., [`Rc::get_mut(&mut value)`][get_mut] instead of\n`value.get_mut()`. This avoids conflicts with methods of the inner type `T`.\n\n[get_mut]: Rc::get_mut","links":{"Rc::get_mut":"0:5030:4637"},"attrs":["#[rustc_diagnostic_item = \"Rc\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:4960","0:4975","0:4992","0:4998","0:5005","0:5009","0:5013","0:5018","0:5033","0:5039","a:1:3146:11953-0:4925:216","b:0:5854-0:4925:216","b:0:727-0:4925:216","b:1:2888-0:4925:216","b:1:2618-0:4925:216","b:1:2615-0:4925:216","b:1:3727-0:4925:216","b:1:2892-0:4925:216","b:1:2895-0:4925:216","b:1:2903-0:4925:216","b:1:2898-0:4925:216","0:5132","0:5202","0:5156","0:5189","0:5174","0:5303","0:4797","0:5181","0:5167","0:4931","0:5177","0:4937","0:5102","0:5147","0:6424","0:6427","0:5164","0:5127","0:4934","0:5299","0:5195","0:5098","0:4795","0:5135","0:5152","0:5295","0:4940","0:5106","0:4943","0:5088","0:5093","0:5193","0:5185","0:4947","0:5179","0:5143","0:5160"]}}},"b:1:3727-0:5922:4150":{"id":"b:1:3727-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:6554:4150":{"id":"b:1:2615-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1475":{"id":"0:1475","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[367,0],"end":[378,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1479:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7200":{"id":"0:7200","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2801,0],"end":[2801,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"deref_pure_trait\", issue = \"87121\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefPure","id":"1:3337:3011","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4282:7004":{"id":"0:4282:7004","crate_id":0,"name":"rfold","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[238,4],"end":[246,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5850:135":{"id":"0:5850:135","crate_id":0,"name":"Err","span":{"filename":"library/alloc/src/string.rs","begin":[2504,4],"end":[2504,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31924:9779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2615-0:3209:100":{"id":"b:1:2615-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:4409:24836":{"id":"1:4409:24836","crate_id":1,"name":"IntoAsyncIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:740:1923":{"id":"0:740:1923","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/borrow.rs","begin":[190,56],"end":[190,77]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct_field":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:4580":{"id":"0:4580","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2728,0],"end":[2728,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6096:10035":{"id":"0:6096:10035","crate_id":0,"name":"try_pin_in","span":{"filename":"library/alloc/src/sync.rs","begin":[818,4],"end":[820,5]},"visibility":"public","docs":"Constructs a new `Pin<Arc<T, A>>` in the provided allocator, return an error if allocation\nfails.","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7352":{"id":"0:7352","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3462,0],"end":[3507,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"array_try_from_vec\", since = \"1.48.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"N"}},"items":["0:7357:136","0:7358:1755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:7621:8665":{"id":"a:1:41612:4469-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:7525:678":{"id":"0:7525:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2735,0],"end":[2735,67]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5140:973":{"id":"0:5140:973","crate_id":0,"name":"le","span":{"filename":"library/alloc/src/rc.rs","begin":[2375,4],"end":[2377,5]},"visibility":"default","docs":"'Less than or equal to' comparison for two `Rc`s.\n\nThe two are compared by calling `<=` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five <= Rc::new(5));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1777:4798":{"id":"0:1777:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1764,4],"end":[1769,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1342:4372":{"id":"a:1:32053:3459-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:4149:4509":{"id":"a:1:41611:4468-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:5810":{"id":"0:5810","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2282,0],"end":[2313,1]},"visibility":"default","docs":"A convenience impl that delegates to the impl for `&str`.\n\n# Examples\n\n```\nassert_eq!(String::from(\"Hello world\").find(\"world\"), Some(6));\n```","links":{},"attrs":["#[unstable(feature = \"pattern\", reason =\n\"API not fully fleshed out and ready to be stabilized\", issue = \"27721\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_contained_in","strip_prefix_of","strip_suffix_of","is_prefix_of","is_suffix_of"],"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:5813:8912","0:5814:9605","0:5815:9744","0:5816:9745","0:5817:9746","0:5818:9747","0:5819:9748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1952:3437":{"id":"0:1952:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2137,4],"end":[2139,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:1557:4545":{"id":"a:1:41612:4469-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5345-1:43225:8689":{"id":"0:5345-1:43225:8689","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[41,0],"end":[41,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"array_windows\", issue = \"75027\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ArrayWindows","name":"ArrayWindows","id":"1:43225:8689","glob":false}}},"0:7699:1135":{"id":"0:7699:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2350,0],"end":[2350,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7056:2679":{"id":"0:7056:2679","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[480,4],"end":[482,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T>` with at least the specified capacity.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the\nminimum *capacity* specified, the vector will have a zero *length*. For\nan explanation of the difference between length and capacity, see\n*[Capacity and reallocation]*.\n\nIf it is important to know the exact allocated capacity of a `Vec`,\nalways use the [`capacity`] method after construction.\n\nFor `Vec<T>` where `T` is a zero-sized type, there will be no allocation\nand the capacity will always be `usize::MAX`.\n\n[Capacity and reallocation]: #capacity-and-reallocation\n[`capacity`]: Vec::capacity\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n# Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert!(vec.capacity() >= 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert!(vec.capacity() >= 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<()>::with_capacity(10);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```","links":{"Vec::capacity":"0:7068:2680"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:1153":{"id":"0:228:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[65,4],"end":[69,5]},"visibility":"public","docs":"Moves a type to the heap with its [`Metadata`] stored in the heap allocation instead of on\nthe stack.\n\n# Examples\n\n```\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet five = ThinBox::new(5);\n```\n\n[`Metadata`]: core::ptr::Pointee::Metadata","links":{"core::ptr::Pointee::Metadata":"1:2040:3547"},"attrs":["#[cfg(not(no_global_oom_handling))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1407":{"id":"0:1407","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[389,0],"end":[570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1412:4229","0:1413:4610","0:1414:3917","0:1415:4637","0:1416:5064","0:1417:4498","0:1418:4222"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7913:1135":{"id":"0:7913:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[23,0],"end":[23,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A2"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:2103:4931":{"id":"b:1:2888-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5131:1135":{"id":"0:5131:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/rc.rs","begin":[2314,4],"end":[2316,5]},"visibility":"default","docs":"Inequality for two `Rc`s.\n\nTwo `Rc`s are not equal if their inner values are not equal.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Rc`s that point to the same allocation are\nalways equal.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five != Rc::new(6));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:5217:8069":{"id":"a:1:32053:3459-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:801:3690":{"id":"0:801:3690","crate_id":0,"name":"binary_heap","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1,0],"end":[1880,1]},"visibility":"public","docs":"A priority queue implemented with a binary heap.\n\nInsertion and popping the largest element have *O*(log(*n*)) time complexity.\nChecking the largest element is *O*(1). Converting a vector to a binary heap\ncan be done in-place, and has *O*(*n*) complexity. A binary heap can also be\nconverted to a sorted vector in-place, allowing it to be used for an *O*(*n* * log(*n*))\nin-place heapsort.\n\n# Examples\n\nThis is a larger example that implements [Dijkstra's algorithm][dijkstra]\nto solve the [shortest path problem][sssp] on a [directed graph][dir_graph].\nIt shows how to use [`BinaryHeap`] with custom types.\n\n[dijkstra]: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n[sssp]: https://en.wikipedia.org/wiki/Shortest_path_problem\n[dir_graph]: https://en.wikipedia.org/wiki/Directed_graph\n\n```\nuse std::cmp::Ordering;\nuse std::collections::BinaryHeap;\n\n#[derive(Copy, Clone, Eq, PartialEq)]\nstruct State {\n    cost: usize,\n    position: usize,\n}\n\n// The priority queue depends on `Ord`.\n// Explicitly implement the trait so the queue becomes a min-heap\n// instead of a max-heap.\nimpl Ord for State {\n    fn cmp(&self, other: &Self) -> Ordering {\n        // Notice that the we flip the ordering on costs.\n        // In case of a tie we compare positions - this step is necessary\n        // to make implementations of `PartialEq` and `Ord` consistent.\n        other.cost.cmp(&self.cost)\n            .then_with(|| self.position.cmp(&other.position))\n    }\n}\n\n// `PartialOrd` needs to be implemented as well.\nimpl PartialOrd for State {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\n// Each node is represented as a `usize`, for a shorter implementation.\nstruct Edge {\n    node: usize,\n    cost: usize,\n}\n\n// Dijkstra's shortest path algorithm.\n\n// Start at `start` and use `dist` to track the current shortest distance\n// to each node. This implementation isn't memory-efficient as it may leave duplicate\n// nodes in the queue. It also uses `usize::MAX` as a sentinel value,\n// for a simpler implementation.\nfn shortest_path(adj_list: &Vec<Vec<Edge>>, start: usize, goal: usize) -> Option<usize> {\n    // dist[node] = current shortest distance from `start` to `node`\n    let mut dist: Vec<_> = (0..adj_list.len()).map(|_| usize::MAX).collect();\n\n    let mut heap = BinaryHeap::new();\n\n    // We're at `start`, with a zero cost\n    dist[start] = 0;\n    heap.push(State { cost: 0, position: start });\n\n    // Examine the frontier with lower cost nodes first (min-heap)\n    while let Some(State { cost, position }) = heap.pop() {\n        // Alternatively we could have continued to find all shortest paths\n        if position == goal { return Some(cost); }\n\n        // Important as we may have already found a better way\n        if cost > dist[position] { continue; }\n\n        // For each node we can reach, see if we can find a way with\n        // a lower cost going through this node\n        for edge in &adj_list[position] {\n            let next = State { cost: cost + edge.cost, position: edge.node };\n\n            // If so, add it to the frontier and continue\n            if next.cost < dist[next.position] {\n                heap.push(next);\n                // Relaxation, we have now found a better way\n                dist[next.position] = next.cost;\n            }\n        }\n    }\n\n    // Goal not reachable\n    None\n}\n\nfn main() {\n    // This is the directed graph we're going to use.\n    // The node numbers correspond to the different states,\n    // and the edge weights symbolize the cost of moving\n    // from one node to another.\n    // Note that the edges are one-way.\n    //\n    //                  7\n    //          +-----------------+\n    //          |                 |\n    //          v   1        2    |  2\n    //          0 -----> 1 -----> 3 ---> 4\n    //          |        ^        ^      ^\n    //          |        | 1      |      |\n    //          |        |        | 3    | 1\n    //          +------> 2 -------+      |\n    //           10      |               |\n    //                   +---------------+\n    //\n    // The graph is represented as an adjacency list where each index,\n    // corresponding to a node value, has a list of outgoing edges.\n    // Chosen for its efficiency.\n    let graph = vec![\n        // Node 0\n        vec![Edge { node: 2, cost: 10 },\n             Edge { node: 1, cost: 1 }],\n        // Node 1\n        vec![Edge { node: 3, cost: 2 }],\n        // Node 2\n        vec![Edge { node: 1, cost: 1 },\n             Edge { node: 3, cost: 3 },\n             Edge { node: 4, cost: 1 }],\n        // Node 3\n        vec![Edge { node: 0, cost: 7 },\n             Edge { node: 4, cost: 2 }],\n        // Node 4\n        vec![]];\n\n    assert_eq!(shortest_path(&graph, 0, 1), Some(1));\n    assert_eq!(shortest_path(&graph, 0, 3), Some(3));\n    assert_eq!(shortest_path(&graph, 3, 0), Some(7));\n    assert_eq!(shortest_path(&graph, 0, 4), Some(5));\n    assert_eq!(shortest_path(&graph, 4, 0), None);\n}\n```","links":{"`BinaryHeap`":"0:826:101"},"attrs":["#[cfg(not(no_global_oom_handling))]","#![allow(missing_docs)]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:826:101","0:830:3912","0:943:4057","0:7372:4175","0:7380:4065","0:7392:4150","0:7402:4039"],"is_stripped":false}}},"0:3769":{"id":"0:3769","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1244,0],"end":[1255,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3771:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3927:4175":{"id":"0:3927:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2039,4],"end":[2039,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:4527:5864":{"id":"0:4527:5864","crate_id":0,"name":"contains","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1495,4],"end":[1501,5]},"visibility":"public","docs":"Returns `true` if the deque contains an element equal to the\ngiven value.\n\nThis operation is *O*(*n*).\n\nNote that if you have a sorted `VecDeque`, [`binary_search`] may be faster.\n\n[`binary_search`]: VecDeque::binary_search\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<u32> = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\n\nassert_eq!(deque.contains(&1), true);\nassert_eq!(deque.contains(&10), false);\n```","links":{"VecDeque::binary_search":"0:4555:6875"},"attrs":["#[stable(feature = \"vec_deque_contains\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6127:3190":{"id":"0:6127:3190","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[1394,4],"end":[1396,5]},"visibility":"public","docs":"Constructs an `Arc<T>` from a raw pointer.\n\nThe raw pointer must have been previously returned by a call to\n[`Arc<U>::into_raw`][into_raw] with the following requirements:\n\n* If `U` is sized, it must have the same size and alignment as `T`. This\n  is trivially true if `U` is `T`.\n* If `U` is unsized, its data pointer must have the same size and\n  alignment as `T`. This is trivially true if `Arc<U>` was constructed\n  through `Arc<T>` and then converted to `Arc<U>` through an [unsized\n  coercion].\n\nNote that if `U` or `U`'s data pointer is not `T` but has the same size\nand alignment, this is basically like transmuting references of\ndifferent types. See [`mem::transmute`][transmute] for more information\non what restrictions apply in this case.\n\nThe user of `from_raw` has to make sure a specific value of `T` is only\ndropped once.\n\nThis function is unsafe because improper use may lead to memory unsafety,\neven if the returned `Arc<T>` is never accessed.\n\n[into_raw]: Arc::into_raw\n[transmute]: core::mem::transmute\n[unsized coercion]: https://doc.rust-lang.org/reference/type-coercions.html#unsized-coercions\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(\"hello\".to_owned());\nlet x_ptr = Arc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Arc` to prevent leak.\n    let x = Arc::from_raw(x_ptr);\n    assert_eq!(&*x, \"hello\");\n\n    // Further calls to `Arc::from_raw(x_ptr)` would be memory-unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n```\n\nConvert a slice back into its original array:\n\n```\nuse std::sync::Arc;\n\nlet x: Arc<[u32]> = Arc::new([1, 2, 3]);\nlet x_ptr: *const [u32] = Arc::into_raw(x);\n\nunsafe {\n    let x: Arc<[u32; 3]> = Arc::from_raw(x_ptr.cast::<[u32; 3]>());\n    assert_eq!(&*x, &[1, 2, 3]);\n}\n```","links":{"Arc::into_raw":"0:6133:3225","core::mem::transmute":"1:1567:1740"},"attrs":["#[inline]","#[stable(feature = \"rc_raw\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7208":{"id":"0:7208","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2839,0],"end":[2844,1]},"visibility":"default","docs":"The hash of a vector is the same as that of the corresponding slice,\nas required by the `core::borrow::Borrow` implementation.\n\n```\nuse std::hash::BuildHasher;\n\nlet b = std::hash::RandomState::new();\nlet v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\nlet s: &[u8] = &[0xa8, 0x3c, 0x09];\nassert_eq!(b.hash_one(v), b.hash_one(s));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7211:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3661:4509":{"id":"0:3661:4509","crate_id":0,"name":"IterMut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[111,0],"end":[116,1]},"visibility":"public","docs":"A mutable iterator over the elements of a `LinkedList`.\n\nThis `struct` is created by [`LinkedList::iter_mut()`]. See its\ndocumentation for more.","links":{"`LinkedList::iter_mut()`":"0:3706:955"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3661:4509","a:1:32053:3459-0:3661:4509","a:1:41612:4469-0:3661:4509","a:1:41611:4468-0:3661:4509","b:1:8171-0:3661:4509","b:1:2888-0:3661:4509","b:1:2618-0:3661:4509","b:1:2615-0:3661:4509","b:1:3727-0:3661:4509","b:1:2892-0:3661:4509","b:1:2903-0:3661:4509","b:1:2898-0:3661:4509","0:3789","0:4011","0:3668","0:3787","0:3785","0:4013","0:3780","0:3772"]}}},"b:1:2615-0:7730:10536":{"id":"b:1:2615-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:7609:7098":{"id":"a:1:3111:246-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6292":{"id":"0:6292","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3232,0],"end":[3250,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6295:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:316:3065":{"id":"0:316:3065","crate_id":0,"name":"try_new_uninit_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[479,4],"end":[490,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents in the provided allocator,\nreturning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut five = Box::<u32, _>::try_new_uninit_in(System)?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:3440":{"id":"0:551:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/boxed.rs","begin":[2005,4],"end":[2007,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969":{"id":"0:969","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1499,0],"end":[1505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:972:311"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5883:810":{"id":"0:5883:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2708,4],"end":[2710,5]},"visibility":"default","docs":"Converts a `&str` into a [`String`].\n\nThe result is allocated on the heap.","links":{"`String`":"0:7632:242"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4940":{"id":"0:4940","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[340,0],"end":[340,88]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rc_ref_unwind_safe\", since = \"1.58.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7301:335":{"id":"0:7301:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3257,4],"end":[3259,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:1263":{"id":"0:306:1263","crate_id":0,"name":"pin","span":{"filename":"library/alloc/src/boxed.rs","begin":[284,4],"end":[286,5]},"visibility":"public","docs":"Constructs a new `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n`x` will be pinned in memory and unable to be moved.\n\nConstructing and pinning of the `Box` can also be done in two steps: `Box::pin(x)`\ndoes the same as <code>[Box::into_pin]\\([Box::new]\\(x))</code>. Consider using\n[`into_pin`](Box::into_pin) if you already have a `Box<T>`, or if you want to\nconstruct a (pinned) `Box` in a different way than with [`Box::new`].","links":{"`Unpin`":"1:32053:3459","Box::new":"0:303:1153","Box::into_pin":"0:356:3091","`Box::new`":"0:303:1153"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"pin\", since = \"1.33.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"generic":"T"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5670:7436":{"id":"0:5670:7436","crate_id":0,"name":"from_utf8_lossy","span":{"filename":"library/alloc/src/string.rs","begin":[635,4],"end":[663,5]},"visibility":"public","docs":"Converts a slice of bytes to a string, including invalid characters.\n\nStrings are made of bytes ([`u8`]), and a slice of bytes\n([`&[u8]`][byteslice]) is made of bytes, so this function converts\nbetween the two. Not all byte slices are valid strings, however: strings\nare required to be valid UTF-8. During this conversion,\n`from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n[`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: �\n\n[byteslice]: prim@slice\n[U+FFFD]: core::char::REPLACEMENT_CHARACTER\n\nIf you are sure that the byte slice is valid UTF-8, and you don't want\nto incur the overhead of the conversion, there is an unsafe version\nof this function, [`from_utf8_unchecked`], which has the same behavior\nbut skips the checks.\n\n[`from_utf8_unchecked`]: String::from_utf8_unchecked\n\nThis function returns a [`Cow<'a, str>`]. If our byte slice is invalid\nUTF-8, then we need to insert the replacement characters, which will\nchange the size of the string, and hence, require a `String`. But if\nit's already valid UTF-8, we don't need a new allocation. This return\ntype allows us to handle both cases.\n\n[`Cow<'a, str>`]: crate::borrow::Cow \"borrow::Cow\"\n\n# Examples\n\nBasic usage:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\nlet sparkle_heart = String::from_utf8_lossy(&sparkle_heart);\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\nIncorrect bytes:\n\n```\n// some invalid bytes\nlet input = b\"Hello \\xF0\\x90\\x80World\";\nlet output = String::from_utf8_lossy(input);\n\nassert_eq!(\"Hello �World\", output);\n```","links":{"`u8`":"1:52095:1800","core::char::REPLACEMENT_CHARACTER":"1:4973:9397","String::from_utf8_unchecked":"0:5689:8926","crate::borrow::Cow":"0:732:118","prim@slice":"1:52083:1638"},"attrs":["#[must_use]","#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7569:7099":{"id":"a:1:3146:11953-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4769:810":{"id":"0:4769:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[760,4],"end":[762,5]},"visibility":"default","docs":"Converts a `Cow<'a, CStr>` into a `CString`, by copying the contents if they are\nborrowed.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4784:810":{"id":"0:4784:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[843,4],"end":[845,5]},"visibility":"default","docs":"Converts a [`CString`] into an owned [`Cow`] without copying or allocating.","links":{"`Cow`":"0:732:118","`CString`":"0:7553:7100"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3216:850":{"id":"0:3216:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:29478":{"id":"1:13143:29478","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:52084:1672","crate::ops::IndexMut":"1:3387:6395","str::slice_unchecked":"1:13142:29477"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:4256:3431":{"id":"0:4256:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:2114:4932":{"id":"a:1:3111:246-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:912:2680":{"id":"0:912:2680","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1021,4],"end":[1023,5]},"visibility":"public","docs":"Returns the number of elements the binary heap can hold without reallocating.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::with_capacity(100);\nassert!(heap.capacity() >= 100);\nheap.push(4);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6726":{"id":"0:6726","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[309,0],"end":[350,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6729:3437","0:6730:7003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:3807:4931":{"id":"b:1:2898-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:408:3309":{"id":"0:408:3309","crate_id":0,"name":"write_u8","span":{"filename":"library/alloc/src/boxed.rs","begin":[1402,4],"end":[1404,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686":{"id":"0:686","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2403,0],"end":[2421,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_box_error\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:688:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:960":{"id":"0:960","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1467,0],"end":[1472,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:963:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1425-0:1327:4374":{"id":"0:1425-0:1327:4374","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[25,53],"end":[25,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"entry::VacantEntry","name":"VacantEntry","id":"0:1327:4374","glob":false}}},"0:3432":{"id":"0:3432","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1333,0],"end":[1342,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3436:3569","0:3438:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4133":{"id":"0:4133","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[275,0],"end":[275,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4635:2350":{"id":"0:4635:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2830,4],"end":[2832,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elem",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7648":{"id":"0:7648","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[402,9],"end":[402,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7649:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5913":{"id":"0:5913","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2885,0],"end":[2889,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5915:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4693-0:7553:7100":{"id":"0:4693-0:7553:7100","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[89,0],"end":[89,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::c_str::CString","name":"CString","id":"0:7553:7100","glob":false}}},"0:7239:4175":{"id":"0:7239:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2967,4],"end":[2967,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:11048:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:4744:7197":{"id":"0:4744:7197","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[499,4],"end":[504,5]},"visibility":"public","docs":"Consumes the `CString` and returns the underlying byte buffer.\n\nThe returned buffer does **not** contain the trailing nul\nterminator, and it is guaranteed to not have any interior nul\nbytes.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.into_bytes();\nassert_eq!(bytes, vec![b'f', b'o', b'o']);\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:3310":{"id":"0:409:3310","crate_id":0,"name":"write_u16","span":{"filename":"library/alloc/src/boxed.rs","begin":[1405,4],"end":[1407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4780":{"id":"0:4780","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[831,0],"end":[837,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"box_from_c_string\", since = \"1.20.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4781:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:606":{"id":"0:606","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2097,0],"end":[2101,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"box_borrow\", since = \"1.1.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:609:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1108:813":{"id":"0:1108:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1803,4],"end":[1805,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1930":{"id":"0:1930","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2099,0],"end":[2099,71]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3111:246-0:7538:2621":{"id":"a:1:3111:246-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31996:236-0:7569:7099":{"id":"a:1:31996:236-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5222":{"id":"0:5222","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2796,0],"end":[2796,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}}},"0:3524:2785":{"id":"0:3524:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1597,4],"end":[1602,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1134:3569":{"id":"0:1134:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1867,4],"end":[1869,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1479:60":{"id":"0:1479:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":"Creates an empty `btree_map::Iter`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::Iter<'_, u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7294":{"id":"0:7294","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3249,0],"end":[3253,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7297:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6594:3437":{"id":"0:6594:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[168,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7048:263":{"id":"a:1:31996:236-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:318:3070":{"id":"0:318:3070","crate_id":0,"name":"try_new_zeroed_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[553,4],"end":[564,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes in the provided allocator,\nreturning an error if the allocation fails,\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet zero = Box::<u32, _>::try_new_zeroed_in(System)?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3911:60":{"id":"0:3911:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2010,4],"end":[2012,5]},"visibility":"default","docs":"Creates an empty `linked_list::IntoIter`.\n\n```\n# use std::collections::linked_list;\nlet iter: linked_list::IntoIter<u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4615:933":{"id":"0:4615:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2798,4],"end":[2800,5]},"visibility":"default","docs":"Consumes the deque into a front-to-back iterator yielding elements by\nvalue.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6326:810":{"id":"0:6326:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3338,4],"end":[3340,5]},"visibility":"default","docs":"Converts a [`[T; N]`](prim@array) into an `Arc<[T]>`.\n\nThe conversion moves the array into a newly allocated `Arc`.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet original: [i32; 3] = [1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{"prim@array":"1:52082:333"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5438:1732":{"id":"0:5438:1732","crate_id":0,"name":"to_vec","span":{"filename":"library/alloc/src/slice.rs","begin":[412,4],"end":[417,5]},"visibility":"public","docs":"Copies `self` into a new `Vec`.\n\n# Examples\n\n```\nlet s = [10, 40, 30];\nlet x = s.to_vec();\n// Here, `s` and `x` can be modified independently.\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[rustc_conversion_suggestion]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:689":{"id":"0:689","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2425,0],"end":[2443,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:692:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5542-1:12361:8922":{"id":"0:5542-1:12361:8922","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,31],"end":[36,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::from_utf8_mut","name":"from_utf8_mut","id":"1:12361:8922","glob":false}}},"0:113:310":{"id":"0:113:310","crate_id":0,"name":"alloc_zeroed","span":{"filename":"library/alloc/src/alloc.rs","begin":[171,0],"end":[173,1]},"visibility":"public","docs":"Allocate zero-initialized memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::alloc_zeroed`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `alloc_zeroed` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::alloc_zeroed`].\n\n# Examples\n\n```\nuse std::alloc::{alloc_zeroed, dealloc, Layout};\n\nunsafe {\n    let layout = Layout::new::<u16>();\n    let ptr = alloc_zeroed(layout);\n\n    assert_eq!(*(ptr as *mut u16), 0);\n\n    dealloc(ptr, layout);\n}\n```","links":{"`Global`":"0:7363:2619","`Allocator`":"1:13756:2618","`GlobalAlloc::alloc_zeroed`":"1:13704:310"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[must_use = \"losing the pointer will leak memory\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5702:4123":{"id":"0:5702:4123","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/string.rs","begin":[1338,4],"end":[1340,5]},"visibility":"public","docs":"Shrinks the capacity of this `String` with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nlet mut s = String::from(\"foo\");\n\ns.reserve(100);\nassert!(s.capacity() >= 100);\n\ns.shrink_to(10);\nassert!(s.capacity() >= 10);\ns.shrink_to(0);\nassert!(s.capacity() >= 3);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3862:6344":{"id":"0:3862:6344","crate_id":0,"name":"split_after","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1749,4],"end":[1759,5]},"visibility":"public","docs":"Splits the list into two after the current element. This will return a\nnew list consisting of everything after the cursor, with the original\nlist retaining everything before.\n\nIf the cursor is pointing at the \"ghost\" non-element then the entire contents\nof the `LinkedList` are moved.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:943:4057":{"id":"b:1:8171-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:4748:7317":{"id":"0:4748:7317","crate_id":0,"name":"as_c_str","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[582,4],"end":[584,5]},"visibility":"public","docs":"Extracts a [`CStr`] slice containing the entire string.\n\n# Examples\n\n```\nuse std::ffi::{CString, CStr};\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet cstr = c_string.as_c_str();\nassert_eq!(cstr,\n           CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n```","links":{"`CStr`":"1:40050:106"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"as_c_str\", since = \"1.20.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:737:1923":{"id":"0:737:1923","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/borrow.rs","begin":[186,59],"end":[186,64]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"B"}}}}},"0:1721":{"id":"0:1721","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1662,0],"end":[1684,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_drop\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1725:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6379:335":{"id":"0:6379:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/sync.rs","begin":[3604,4],"end":[3606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6722:7012":{"id":"0:6722:7012","crate_id":0,"name":"next_chunk","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[256,4],"end":[290,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"resolved_path":{"name":"core::array::IntoIter","id":"1:3965:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:3807:4931":{"id":"b:1:2618-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3111:246-0:1342:4372":{"id":"a:1:3111:246-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3417:1167":{"id":"0:3417:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1303,4],"end":[1307,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4772":{"id":"0:4772","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[777,0],"end":[787,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4773:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7497:678":{"id":"0:7497:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2731,0],"end":[2731,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5155:780":{"id":"0:5155:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[2447,4],"end":[2449,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5942:335":{"id":"0:5942:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2998,4],"end":[3000,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:29489":{"id":"1:13220:29489","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4788":{"id":"0:4788","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[858,0],"end":[864,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4790:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1938:60":{"id":"0:1938:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2113,4],"end":[2115,5]},"visibility":"default","docs":"Creates an empty `btree_map::IntoKeys`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::IntoKeys<u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5177":{"id":"0:5177","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2529,0],"end":[2544,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5178:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5257:2710":{"id":"0:5257:2710","crate_id":0,"name":"from_raw_in","span":{"filename":"library/alloc/src/rc.rs","begin":[3083,4],"end":[3100,5]},"visibility":"public","docs":"Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`]\nlater) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`],\nas these don't own anything; the method still works on them).\n\n# Safety\n\nThe pointer must have originated from the [`into_raw`] and must still own its potential\nweak reference, and `ptr` must point to a block of memory allocated by `alloc`.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to [`into_raw`].\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet strong = Rc::new(\"hello\".to_owned());\n\nlet raw_1 = Rc::downgrade(&strong).into_raw();\nlet raw_2 = Rc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Rc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Rc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[`into_raw`]: Weak::into_raw\n[`upgrade`]: Weak::upgrade\n[`new`]: Weak::new","links":{"Weak::new":"0:5237:1153","Weak::into_raw":"0:5255:3225","Weak::upgrade":"0:5258:8595"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5878":{"id":"0:5878","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2686,0],"end":[2691,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"string_as_mut\", since = \"1.43.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2859:76","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5879:3458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1110":{"id":"0:1110","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1809,0],"end":[1834,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1113:172","0:1114:4175","0:1115:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1819":{"id":"0:1819","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1849,0],"end":[1849,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4649":{"id":"0:4649","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2865,0],"end":[2879,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4652:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4643:2350":{"id":"0:4643:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2847,4],"end":[2849,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elem",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3494":{"id":"0:3494","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1525,0],"end":[1536,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3496:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1783:3437":{"id":"0:1783:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1781,4],"end":[1783,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4195":{"id":"0:4195","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[165,0],"end":[165,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2083:4930":{"id":"0:2083:4930","crate_id":0,"name":"lower_bound_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2623,4],"end":[2651,5]},"visibility":"public","docs":"Returns a [`CursorMut`] pointing at the gap before the smallest key\ngreater than the given bound.\n\nPassing `Bound::Included(x)` will return a cursor pointing to the\ngap before the smallest key greater than or equal to `x`.\n\nPassing `Bound::Excluded(x)` will return a cursor pointing to the\ngap before the smallest key greater than `x`.\n\nPassing `Bound::Unbounded` will return a cursor pointing to the\ngap before the smallest key in the map.\n\n# Examples\n\n```\n#![feature(btree_cursors)]\n\nuse std::collections::BTreeMap;\nuse std::ops::Bound;\n\nlet mut map = BTreeMap::from([\n    (1, \"a\"),\n    (2, \"b\"),\n    (3, \"c\"),\n    (4, \"d\"),\n]);\n\nlet mut cursor = map.lower_bound_mut(Bound::Included(&2));\nassert_eq!(cursor.peek_prev(), Some((&1, &mut \"a\")));\nassert_eq!(cursor.peek_next(), Some((&2, &mut \"b\")));\n\nlet mut cursor = map.lower_bound_mut(Bound::Excluded(&2));\nassert_eq!(cursor.peek_prev(), Some((&2, &mut \"b\")));\nassert_eq!(cursor.peek_next(), Some((&3, &mut \"c\")));\n\nlet mut cursor = map.lower_bound_mut(Bound::Unbounded);\nassert_eq!(cursor.peek_prev(), None);\nassert_eq!(cursor.peek_next(), Some((&1, &mut \"a\")));\n```","links":{"`CursorMut`":"0:2103:4931"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bound",{"resolved_path":{"name":"Bound","id":"1:39258:4363","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4530:5177":{"id":"0:4530:5177","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1565,4],"end":[1567,5]},"visibility":"public","docs":"Provides a reference to the back element, or `None` if the deque is\nempty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.back(), Some(&2));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"last\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5188:810":{"id":"0:5188:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2598,4],"end":[2611,5]},"visibility":"default","docs":"Allocate a reference-counted slice and move `v`'s items into it.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet unique: Vec<i32> = vec![1, 2, 3];\nlet shared: Rc<[i32]> = Rc::from(unique);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7070:2768":{"id":"0:7070:2768","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[974,4],"end":[976,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` more elements to\nbe inserted in the given `Vec<T>`. Unlike [`reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `reserve_exact`, capacity will be greater than or equal to\n`self.len() + additional`. Does nothing if the capacity is already\nsufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`reserve`] if future insertions are expected.\n\n[`reserve`]: Vec::reserve\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n# Examples\n\n```\nlet mut vec = vec![1];\nvec.reserve_exact(10);\nassert!(vec.capacity() >= 11);\n```","links":{"Vec::reserve":"0:7069:2750"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:3397:4776":{"id":"a:1:3146:11953-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4779:462":{"id":"0:4779:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[825,4],"end":[827,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1753":{"id":"0:1753","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1731,0],"end":[1736,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1757:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5822:60":{"id":"0:5822:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/string.rs","begin":[2358,4],"end":[2360,5]},"visibility":"default","docs":"Creates an empty `String`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2019:2350":{"id":"0:2019:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2262,4],"end":[2264,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["(k, v)",{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6339:810":{"id":"0:6339:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3414,4],"end":[3416,5]},"visibility":"default","docs":"Move a boxed object to a new, reference-counted allocation.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet unique: Box<str> = Box::from(\"eggplant\");\nlet shared: Arc<str> = Arc::from(unique);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:604:462":{"id":"0:604:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/boxed.rs","begin":[2082,4],"end":[2085,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1718:172":{"id":"0:1718:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1637,4],"end":[1637,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"b:1:2903-0:7480:4175":{"id":"b:1:2903-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5017:8213":{"id":"0:5017:8213","crate_id":0,"name":"decrement_strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[1327,4],"end":[1329,5]},"visibility":"public","docs":"Decrements the strong reference count on the `Rc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Rc::into_raw`, the\nassociated `Rc` instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method, and `ptr` must point to a block of memory\nallocated by the global allocator. This method can be used to release the final `Rc` and\nbacking storage, but **should not** be called after the final `Rc` has been released.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nunsafe {\n    let ptr = Rc::into_raw(five);\n    Rc::increment_strong_count(ptr);\n\n    let five = Rc::from_raw(ptr);\n    assert_eq!(2, Rc::strong_count(&five));\n    Rc::decrement_strong_count(ptr);\n    assert_eq!(1, Rc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5848:9778":{"id":"0:5848:9778","crate_id":0,"name":"ParseError","span":{"filename":"library/alloc/src/string.rs","begin":[2499,0],"end":[2499,48]},"visibility":"public","docs":"A type alias for [`Infallible`].\n\nThis alias exists for backwards compatibility, and may be eventually deprecated.\n\n[`Infallible`]: core::convert::Infallible \"convert::Infallible\"","links":{"core::convert::Infallible":"1:31924:9779"},"attrs":["#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::convert::Infallible","id":"1:31924:9779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:6648:813":{"id":"0:6648:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["it",{"generic":"I"}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1908":{"id":"0:1908","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2054,0],"end":[2082,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1912:172","0:1913:1167","0:1915:3429","0:1916:3431","0:1917:4798","0:1918:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3513":{"id":"0:3513","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1572,0],"end":[1576,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3515:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7729:780":{"id":"0:7729:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7740:780":{"id":"0:7740:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1327:4374":{"id":"a:1:31996:236-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3726:6214":{"id":"0:3726:6214","crate_id":0,"name":"push_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[896,4],"end":[903,5]},"visibility":"public","docs":"Appends an element to the back of a list.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nd.push_back(1);\nd.push_back(3);\nassert_eq!(3, *d.back().unwrap());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push\", \"append\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elt",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:991":{"id":"0:991","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1545,0],"end":[1545,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:1365":{"id":"0:112:1365","crate_id":0,"name":"realloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[137,0],"end":[139,1]},"visibility":"public","docs":"Reallocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::realloc`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `realloc` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::realloc`].","links":{"`Global`":"0:7363:2619","`Allocator`":"1:13756:2618","`GlobalAlloc::realloc`":"1:13705:1365"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[must_use = \"losing the pointer will leak memory\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_size",{"primitive":"usize"}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1899:3437":{"id":"0:1899:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2038,4],"end":[2040,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5025:8248":{"id":"0:5025:8248","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/rc.rs","begin":[1498,4],"end":[1500,5]},"visibility":"public","docs":"Gets the number of [`Weak`] pointers to this allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\nlet _weak_five = Rc::downgrade(&five);\n\nassert_eq!(1, Rc::weak_count(&five));\n```","links":{"`Weak`":"0:5217:8069"},"attrs":["#[inline]","#[stable(feature = \"rc_counts\", since = \"1.15.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:800:2401":{"id":"0:800:2401","crate_id":0,"name":"collections","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[1,0],"end":[158,46]},"visibility":"public","docs":"Collection types.","links":{},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:801:3690","0:3620:3692","0:4027:3693","0:4663:3694","0:4665:3696","0:4667-0:826:101","0:4668-0:1428:99","0:4669-0:3209:100","0:4670-0:3635:181","0:4671-0:4423:264","0:7527:2620","0:7538:2621"],"is_stripped":false}}},"0:5834:296":{"id":"0:5834:296","crate_id":0,"name":"add_assign","span":{"filename":"library/alloc/src/string.rs","begin":[2443,4],"end":[2445,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4962:1153":{"id":"0:4962:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/rc.rs","begin":[391,4],"end":[402,5]},"visibility":"public","docs":"Constructs a new `Rc<T>`.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:4410:24837":{"id":"1:4410:24837","crate_id":1,"name":"into_async_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoAsyncIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"IntoAsyncIterator","id":"1:4402:11875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5953:1694":{"id":"0:5953:1694","crate_id":0,"name":"sync","span":{"filename":"library/alloc/src/sync.rs","begin":[1,0],"end":[3653,1]},"visibility":"public","docs":"Thread-safe reference-counting pointers.\n\nSee the [`Arc<T>`][Arc] documentation for more details.\n\n**Note**: This module is only available on platforms that support atomic\nloads and stores of pointers. This may be detected at compile time using\n`#[cfg(target_has_atomic = \"ptr\")]`.","links":{"Arc":"0:6007:71"},"attrs":["#[cfg(all(not(no_rc), not(no_sync), target_has_atomic = \"ptr\"))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:6007:71","0:6039:8069"],"is_stripped":false}}},"0:6626":{"id":"0:6626","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[6,0],"end":[16,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6629:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3854":{"id":"0:3854","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1657,0],"end":[1913,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3858:5025","0:3859:5027","0:3860:6240","0:3861:6338","0:3862:6344","0:3863:6349","0:3864:6200","0:3865:6214","0:3866:6209","0:3867:6219","0:3868:4780","0:3869:6188","0:3870:5177","0:3871:6196"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1095:810":{"id":"0:1095:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1767,4],"end":[1771,5]},"visibility":"default","docs":"Converts a `Vec<T>` into a `BinaryHeap<T>`.\n\nThis conversion happens in-place, and has *O*(*n*) time complexity.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1785":{"id":"0:1785","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1787,0],"end":[1791,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1788:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4671-0:4423:264":{"id":"0:4671-0:4423:264","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[53,0],"end":[53,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"vec_deque::VecDeque","name":"VecDeque","id":"0:4423:264","glob":false}}},"0:5666:1153":{"id":"0:5666:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/string.rs","begin":[448,4],"end":[450,5]},"visibility":"public","docs":"Creates a new empty `String`.\n\nGiven that the `String` is empty, this will not allocate any initial\nbuffer. While that means that this initial operation is very\ninexpensive, it may cause excessive allocation later when you add\ndata. If you have an idea of how much data the `String` will hold,\nconsider the [`with_capacity`] method to prevent excessive\nre-allocation.\n\n[`with_capacity`]: String::with_capacity\n\n# Examples\n\n```\nlet s = String::new();\n```","links":{"String::with_capacity":"0:5667:2679"},"attrs":["#[inline]","#[rustc_const_stable(feature = \"const_string_new\", since = \"1.39.0\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:7392:4150":{"id":"b:1:3727-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:911:4068":{"id":"0:911:4068","crate_id":0,"name":"peek","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1003,4],"end":[1005,5]},"visibility":"public","docs":"Returns the greatest item in the binary heap, or `None` if it is empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nassert_eq!(heap.peek(), None);\n\nheap.push(1);\nheap.push(5);\nheap.push(2);\nassert_eq!(heap.peek(), Some(&5));\n\n```\n\n# Time complexity\n\nCost is *O*(1) in the worst case.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:1480:4509":{"id":"b:1:2903-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:727":{"id":"0:727","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1759":{"id":"0:1759","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1739,0],"end":[1743,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1763:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3390":{"id":"0:3390","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1258,0],"end":[1265,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3394:172","0:3395:4175","0:3396:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4011":{"id":"0:4011","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2203,0],"end":[2203,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4181:7003":{"id":"0:4181:7003","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[122,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"NonZero","id":"1:737:189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4516:974":{"id":"0:4516:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1237,4],"end":[1239,5]},"visibility":"public","docs":"Returns the number of elements in the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\nassert_eq!(deque.len(), 0);\ndeque.push_back(1);\nassert_eq!(deque.len(), 1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:4423:264":{"id":"b:1:2898-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7546":{"id":"0:7546","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,16],"end":[80,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:582:108":{"id":"0:582:108","crate_id":0,"name":"CallRefFuture","span":{"filename":"library/alloc/src/boxed.rs","begin":[2048,4],"end":[2048,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"bounds":[],"default":{"qualified_path":{"name":"CallRefFuture","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"AsyncFnMut","id":"1:3187:3005","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}}}}}}},"0:4027:3693":{"id":"0:4027:3693","crate_id":0,"name":"vec_deque","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1,0],"end":[2954,1]},"visibility":"public","docs":"A double-ended queue (deque) implemented with a growable ring buffer.\n\nThis queue has *O*(1) amortized inserts and removals from both ends of the\ncontainer. It also has *O*(1) indexing like a vector. The contained elements\nare not required to be copyable, and the queue will be sendable if the\ncontained type is sendable.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:4059-0:4074:4150","0:4136-0:4149:4509","0:4202-0:7480:4175","0:4296-0:4309:4057","0:4423:264"],"is_stripped":false}}},"b:1:2618-0:1311:4371":{"id":"b:1:2618-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[956,0],"end":[1230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:349:2710","0:350:3225","0:351:3097","0:353:311","0:354:1965","0:356:3091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:636:267":{"id":"0:636:267","crate_id":0,"name":"Yield","span":{"filename":"library/alloc/src/boxed.rs","begin":[2164,4],"end":[2164,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"G"},"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}}}},"0:351:3097":{"id":"0:351:3097","crate_id":0,"name":"into_raw_with_allocator","span":{"filename":"library/alloc/src/boxed.rs","begin":[1112,4],"end":[1119,5]},"visibility":"public","docs":"Consumes the `Box`, returning a wrapped raw pointer and the allocator.\n\nThe pointer will be properly aligned and non-null.\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Box`. In particular, the\ncaller should properly destroy `T` and release the memory, taking\ninto account the [memory layout] used by `Box`. The easiest way to\ndo this is to convert the raw pointer back into a `Box` with the\n[`Box::from_raw_in`] function, allowing the `Box` destructor to perform\nthe cleanup.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::into_raw_with_allocator(b)` instead of `b.into_raw_with_allocator()`. This\nis so that there is no conflict with a method on the inner type.\n\n# Examples\nConverting the raw pointer back into a `Box` with [`Box::from_raw_in`]\nfor automatic cleanup:\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet x = Box::new_in(String::from(\"Hello\"), System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nlet x = unsafe { Box::from_raw_in(ptr, alloc) };\n```\nManual cleanup by explicitly running the destructor and deallocating\nthe memory:\n```\n#![feature(allocator_api)]\n\nuse std::alloc::{Allocator, Layout, System};\nuse std::ptr::{self, NonNull};\n\nlet x = Box::new_in(String::from(\"Hello\"), System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nunsafe {\n    ptr::drop_in_place(ptr);\n    let non_null = NonNull::new_unchecked(ptr);\n    alloc.deallocate(non_null.cast(), Layout::new::<String>());\n}\n```\n\n[memory layout]: self#memory-layout","links":{"self#memory-layout":"0:142:2398","`Box::from_raw_in`":"0:349:2710"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"generic":"Self"}]],"output":{"tuple":[{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},{"generic":"A"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2150,0],"end":[2157,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coroutine_trait\", issue = \"43122\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"G"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:629:267","0:630:227","0:631:1403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2054:780":{"id":"0:2054:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2313,4],"end":[2315,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1645":{"id":"0:1645","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1485,0],"end":[1492,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1650:172","0:1651:4175","0:1652:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:3807:4931":{"id":"b:1:2903-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4822:198":{"id":"0:4822:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1038,4],"end":[1038,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:6517:3429":{"id":"0:6517:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6566":{"id":"0:6566","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[43,0],"end":[137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6570:2428","0:6571:311","0:6572:11524"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1679":{"id":"0:1679","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1560,0],"end":[1567,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1684:172","0:1685:4175","0:1686:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:888:2694":{"id":"0:888:2694","crate_id":0,"name":"with_capacity_in","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[507,4],"end":[509,5]},"visibility":"public","docs":"Creates an empty `BinaryHeap` with at least the specified capacity, using `A` as allocator.\n\nThe binary heap will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the binary heap will not allocate.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::with_capacity_in(10, System);\nheap.push(4);\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3697":{"id":"0:3697","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[434,0],"end":[500,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3699:1153","0:3700:3978"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7597:7097":{"id":"0:7597:7097","crate_id":0,"name":"FromVecWithNulError","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[163,0],"end":[166,1]},"visibility":"public","docs":"An error indicating that a nul byte was not in the expected position.\n\nThe vector used to create a [`CString`] must have one and only one nul byte,\npositioned at the end.\n\nThis error is created by the [`CString::from_vec_with_nul`] method.\nSee its documentation for more.\n\n# Examples\n\n```\nuse std::ffi::{CString, FromVecWithNulError};\n\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"f\\0oo\".to_vec()).unwrap_err();\n```","links":{"`CString::from_vec_with_nul`":"0:4753:7348","`CString`":"0:7553:7100"},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4718","a:1:3146:11953-0:7597:7097","a:1:32053:3459-0:7597:7097","a:1:3111:246-0:7597:7097","a:1:31996:236-0:7597:7097","a:1:41612:4469-0:7597:7097","a:1:41611:4468-0:7597:7097","b:0:5854-0:7597:7097","b:0:727-0:7597:7097","b:1:2888-0:7597:7097","b:1:2618-0:7597:7097","b:1:2615-0:7597:7097","b:1:3727-0:7597:7097","b:1:2892-0:7597:7097","b:1:2903-0:7597:7097","b:1:2898-0:7597:7097","0:7603","0:7600","0:7607","0:4806","0:7605","0:4831","0:7602"]}}},"0:6427":{"id":"0:6427","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/task.rs","begin":[299,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(ineffective_unstable_trait_impl)]","#[unstable(feature = \"local_waker\", issue = \"118959\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LocalWake","id":"0:6421:10507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"core::task::RawWaker","id":"1:44348:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6429:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5031:8273":{"id":"0:5031:8273","crate_id":0,"name":"get_mut_unchecked","span":{"filename":"library/alloc/src/rc.rs","begin":[1696,4],"end":[1700,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Rc`,\nwithout any check.\n\nSee also [`get_mut`], which is safe and does appropriate checks.\n\n[`get_mut`]: Rc::get_mut\n\n# Safety\n\nIf any other `Rc` or [`Weak`] pointers to the same allocation exist, then\nthey must not be dereferenced or have active borrows for the duration\nof the returned borrow, and their inner type must be exactly the same as the\ninner type of this Rc (including lifetimes). This is trivially the case if no\nsuch pointers exist, for example immediately after `Rc::new`.\n\n# Examples\n\n```\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut x = Rc::new(String::new());\nunsafe {\n    Rc::get_mut_unchecked(&mut x).push_str(\"foo\")\n}\nassert_eq!(*x, \"foo\");\n```\nOther `Rc` pointers to the same allocation must be to the same type.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet x: Rc<str> = Rc::from(\"Hello, world!\");\nlet mut y: Rc<[u8]> = x.clone().into();\nunsafe {\n    // this is Undefined Behavior, because x's inner type is str, not [u8]\n    Rc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n}\nprintln!(\"{}\", &*x); // Invalid UTF-8 in a str\n```\nOther `Rc` pointers to the same allocation must be to the exact same type, including lifetimes.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet x: Rc<&str> = Rc::new(\"Hello, world!\");\n{\n    let s = String::from(\"Oh, no!\");\n    let mut y: Rc<&str> = x.clone().into();\n    unsafe {\n        // this is Undefined Behavior, because x's inner type\n        // is &'long str, not &'short str\n        *Rc::get_mut_unchecked(&mut y) = &s;\n    }\n}\nprintln!(\"{}\", &*x); // Use-after-free\n```","links":{"`Weak`":"0:5217:8069","Rc::get_mut":"0:5030:4637"},"attrs":["#[inline]","#[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:6081:3058":{"id":"0:6081:3058","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/sync.rs","begin":[607,4],"end":[616,5]},"visibility":"public","docs":"Constructs a new `Arc<T>`, returning an error if allocation fails.\n\n# Examples\n\n```\n#![feature(allocator_api)]\nuse std::sync::Arc;\n\nlet five = Arc::try_new(5)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7141:974":{"id":"0:7141:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2226,4],"end":[2228,5]},"visibility":"public","docs":"Returns the number of elements in the vector, also referred to\nas its 'length'.\n\n# Examples\n\n```\nlet a = vec![1, 2, 3];\nassert_eq!(a.len(), 3);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7372:4175":{"id":"b:1:2615-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6249:8123":{"id":"0:6249:8123","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[2860,4],"end":[2862,5]},"visibility":"public","docs":"Gets the number of strong (`Arc`) pointers pointing to this allocation.\n\nIf `self` was created using [`Weak::new`], this will return 0.","links":{"`Weak::new`":"0:6226:1153"},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4590:469":{"id":"0:4590:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2747,4],"end":[2749,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:3317":{"id":"0:416:3317","crate_id":0,"name":"write_i32","span":{"filename":"library/alloc/src/boxed.rs","begin":[1426,4],"end":[1428,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:901:3978":{"id":"0:901:3978","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[857,4],"end":[867,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\n\nlet mut a = BinaryHeap::from([-10, 1, 2, 3, 3]);\nlet mut b = BinaryHeap::from([-20, 5, 43]);\n\na.append(&mut b);\n\nassert_eq!(a.into_sorted_vec(), [-20, -10, 1, 2, 3, 3, 5, 43]);\nassert!(b.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"binary_heap_append\", since = \"1.11.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1829:60":{"id":"0:1829:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1867,4],"end":[1869,5]},"visibility":"default","docs":"Creates an empty `btree_map::Values`.\n\n```\n# use std::collections::btree_map;\nlet iter: btree_map::Values<'_, u8, u8> = Default::default();\nassert_eq!(iter.len(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2154:4987":{"id":"0:2154:4987","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3066,4],"end":[3071,5]},"visibility":"public","docs":"Returns a reference to the key and value of the next element without\nmoving the cursor.\n\nIf the cursor is at the end of the map then `None` is returned","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13174:4225":{"id":"1:13174:4225","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12812:2367","`DoubleEndedIterator`":"1:8205:129","prim@char":"1:52078:458","str::split_whitespace":"1:13152:18923","str::rsplit":"1:13180:28435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43379:8711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6698:5451":{"id":"0:6698:5451","crate_id":0,"name":"as_mut_slice","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[101,4],"end":[103,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a mutable slice.\n\n# Examples\n\n```\nlet vec = vec!['a', 'b', 'c'];\nlet mut into_iter = vec.into_iter();\nassert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\ninto_iter.as_mut_slice()[2] = 'z';\nassert_eq!(into_iter.next().unwrap(), 'a');\nassert_eq!(into_iter.next().unwrap(), 'b');\nassert_eq!(into_iter.next().unwrap(), 'z');\n```","links":{},"attrs":["#[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3228:1252":{"id":"0:3228:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[101,4],"end":[103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3575":{"id":"0:3575","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1789,0],"end":[1789,78]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6188":{"id":"0:6188","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2047,0],"end":[2098,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6191:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7944":{"id":"0:7944","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[29,0],"end":[29,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"slice":{"generic":"T"}},"items":["0:7948:678","0:7949:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5372-1:11179:8712":{"id":"0:5372-1:11179:8712","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[61,40],"end":[61,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::SplitMut","name":"SplitMut","id":"1:11179:8712","glob":false}}},"b:1:8171-0:3245:5783":{"id":"b:1:8171-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[906,0],"end":[954,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:345:3190"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2147":{"id":"0:2147","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3010,0],"end":[3099,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2152:1167","0:2153:4981","0:2154:4987","0:2155:4991","0:2156:4997"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7420":{"id":"0:7420","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,31],"end":[3396,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7421:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3903":{"id":"0:3903","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1996,0],"end":[1996,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6755":{"id":"0:6755","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[414,0],"end":[423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6758:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13242:29495":{"id":"1:13242:29495","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12773:135","`FromStr`":"1:12772:8933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12772:8933","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12772:8933","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:7412:5026":{"id":"b:1:2615-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7476":{"id":"0:7476","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[140,9],"end":[140,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7479:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7113:11091":{"id":"0:7113:11091","crate_id":0,"name":"dedup_by_key","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1787,4],"end":[1793,5]},"visibility":"public","docs":"Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.\n\nIf the vector is sorted, this removes all duplicates.\n\n# Examples\n\n```\nlet mut vec = vec![10, 20, 21, 30, 20];\n\nvec.dedup_by_key(|i| *i / 10);\n\nassert_eq!(vec, [10, 20, 30, 20]);\n```","links":{},"attrs":["#[stable(feature = \"dedup_by\", since = \"1.16.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4683:780":{"id":"0:4683:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[132,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::result::Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"core::fmt::Error","id":"1:42530:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4757:248":{"id":"0:4757:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[712,4],"end":[712,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:6321:810":{"id":"0:6321:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3317,4],"end":[3319,5]},"visibility":"default","docs":"Converts a `T` into an `Arc<T>`\n\nThe conversion moves the value into a\nnewly allocated `Arc`. It is equivalent to\ncalling `Arc::new(t)`.\n\n# Example\n```rust\n# use std::sync::Arc;\nlet x = 5;\nlet arc = Arc::new(5);\n\nassert_eq!(Arc::from(x), arc);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:826:101":{"id":"b:0:727-0:826:101","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3457":{"id":"0:3457","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1428,0],"end":[1450,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"1:33625:5741","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3460:198","0:3461:398"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:345:3190":{"id":"0:345:3190","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/boxed.rs","begin":[951,4],"end":[953,5]},"visibility":"public","docs":"Constructs a box from a raw pointer.\n\nAfter calling this function, the raw pointer is owned by the\nresulting `Box`. Specifically, the `Box` destructor will call\nthe destructor of `T` and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the [memory layout] used by `Box` .\n\n# Safety\n\nThis function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.\n\nThe safety conditions are described in the [memory layout] section.\n\n# Examples\n\nRecreate a `Box` which was previously converted to a raw pointer\nusing [`Box::into_raw`]:\n```\nlet x = Box::new(5);\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };\n```\nManually create a `Box` from scratch by using the global allocator:\n```\nuse std::alloc::{alloc, Layout};\n\nunsafe {\n    let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n    // In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    ptr.write(5);\n    let x = Box::from_raw(ptr);\n}\n```\n\n[memory layout]: self#memory-layout\n[`Layout`]: crate::Layout","links":{"self#memory-layout":"0:142:2398","`Box::into_raw`":"0:350:3225"},"attrs":["#[stable(feature = \"box_raw\", since = \"1.4.0\")]","#[inline]","#[must_use =\n\"call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1686:933":{"id":"0:1686:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1564,4],"end":[1566,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1508":{"id":"0:1508","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[446,0],"end":[450,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1512:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4587":{"id":"0:4587","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2745,0],"end":[2750,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4590:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5159:780":{"id":"0:5159:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[2454,4],"end":[2456,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7392:4150":{"id":"b:1:2888-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5456:487":{"id":"0:5456:487","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/slice.rs","begin":[690,4],"end":[690,44]},"visibility":"default","docs":"Implementation of [`[T]::concat`](slice::concat)","links":{"slice::concat":"0:5444:487"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:5453:8837","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:5922:4150":{"id":"0:5922:4150","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/string.rs","begin":[2933,0],"end":[2942,1]},"visibility":"public","docs":"A draining iterator for `String`.\n\nThis struct is created by the [`drain`] method on [`String`]. See its\ndocumentation for more.\n\n[`drain`]: String::drain","links":{"String::drain":"0:5734:4149","`String`":"0:7632:242"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:5934","a:1:3146:11953-0:5922:4150","a:1:32053:3459-0:5922:4150","a:1:41612:4469-0:5922:4150","a:1:41611:4468-0:5922:4150","b:1:8171-0:5922:4150","b:1:2888-0:5922:4150","b:1:2618-0:5922:4150","b:1:2615-0:5922:4150","b:1:3727-0:5922:4150","b:1:2892-0:5922:4150","b:1:2903-0:5922:4150","b:1:2898-0:5922:4150","0:5931","0:5930","0:5943","0:5950","0:5932","0:5940","0:5937","0:5948","0:5928"]}}},"0:6356:1755":{"id":"0:6356:1755","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/sync.rs","begin":[3499,4],"end":[3506,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed_slice",{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2872:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7684:1135":{"id":"0:7684:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2348,0],"end":[2348,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5821":{"id":"0:5821","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2355,0],"end":[2361,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5822:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7655:9289":{"id":"b:1:3727-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5486:3455":{"id":"0:5486:3455","crate_id":0,"name":"borrow_mut","span":{"filename":"library/alloc/src/slice.rs","begin":[780,4],"end":[782,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:1428:99":{"id":"b:1:2892-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7387:462":{"id":"0:7387:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1595,9],"end":[1595,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:3271:5793":{"id":"a:1:3111:246-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3699:1153":{"id":"0:3699:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[448,4],"end":[450,5]},"visibility":"public","docs":"Creates an empty `LinkedList`.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet list: LinkedList<u32> = LinkedList::new();\n```","links":{},"attrs":["#[inline]","#[rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.39.0\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:3305:5807":{"id":"a:1:32053:3459-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5709:9601":{"id":"0:5709:9601","crate_id":0,"name":"remove_matches","span":{"filename":"library/alloc/src/string.rs","begin":[1500,4],"end":[1550,5]},"visibility":"public","docs":"Remove all matches of pattern `pat` in the `String`.\n\n# Examples\n\n```\n#![feature(string_remove_matches)]\nlet mut s = String::from(\"Trees are not green, the sky is not blue.\");\ns.remove_matches(\"not \");\nassert_eq!(\"Trees are green, the sky is blue.\", s);\n```\n\nMatches will be detected and removed iteratively, so in cases where\npatterns overlap, only the first pattern will be removed:\n\n```\n#![feature(string_remove_matches)]\nlet mut s = String::from(\"banana\");\ns.remove_matches(\"ana\");\nassert_eq!(\"bna\", s);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"string_remove_matches\", reason = \"new API\", issue =\n\"72826\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'x"}],"bindings":[]}}},"generic_params":[{"name":"'x","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:3238:4057":{"id":"b:1:2892-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5321":{"id":"0:5321","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3587,0],"end":[3601,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5323:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5457:8847":{"id":"0:5457:8847","crate_id":0,"name":"Join","span":{"filename":"library/alloc/src/slice.rs","begin":[695,0],"end":[703,1]},"visibility":"public","docs":"Helper trait for [`[T]::join`](slice::join)","links":{"slice::join":"0:5446:8844"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:5459:198","0:5460:8844"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:5582","0:5473","0:5467"]}}},"a:1:41611:4468-0:6039:8069":{"id":"a:1:41611:4468-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1405:4498":{"id":"0:1405:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[351,4],"end":[386,5]},"visibility":"public","docs":"Sets the value of the entry with the `VacantEntry`'s key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, u32> = BTreeMap::new();\n\nif let Entry::Vacant(o) = map.entry(\"poneyland\") {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push\", \"put\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:668":{"id":"0:668","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2313,0],"end":[2353,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:670:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:407:2895":{"id":"0:407:2895","crate_id":0,"name":"write","span":{"filename":"library/alloc/src/boxed.rs","begin":[1399,4],"end":[1401,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1886":{"id":"0:1886","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2020,0],"end":[2034,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1890:172","0:1891:1167","0:1893:3429","0:1894:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:7645:9281":{"id":"a:1:41612:4469-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:1527:4528":{"id":"a:1:32053:3459-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7140:4152":{"id":"0:7140:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2199,4],"end":[2212,5]},"visibility":"public","docs":"Clears the vector, removing all values.\n\nNote that this method has no effect on the allocated capacity\nof the vector.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3];\n\nv.clear();\n\nassert!(v.is_empty());\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4093:780":{"id":"0:4093:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[78,4],"end":[85,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6299":{"id":"0:6299","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3255,0],"end":[3259,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6302:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7363:2619":{"id":"b:1:2903-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:7655:9289":{"id":"b:1:2892-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2030,0],"end":[2034,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:32083:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3352:139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Fn","id":"1:3352:139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:570:424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:525:3429":{"id":"0:525:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/boxed.rs","begin":[1954,4],"end":[1956,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3740:651":{"id":"0:3740:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1171,4],"end":[1186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4947":{"id":"0:4947","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[346,0],"end":[346,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3636:3012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:7402:4039":{"id":"a:1:32053:3459-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4265:7005":{"id":"0:4265:7005","crate_id":0,"name":"try_rfold","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[198,4],"end":[235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3554:253","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7655:9289":{"id":"a:1:41611:4468-0:7655:9289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:6554:4150":{"id":"a:1:41611:4468-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3441:60":{"id":"0:3441:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1347,4],"end":[1349,5]},"visibility":"default","docs":"Creates an empty `BTreeSet`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4226:780":{"id":"0:4226:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5204:813":{"id":"0:5204:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/rc.rs","begin":[2714,4],"end":[2716,5]},"visibility":"default","docs":"Takes each element in the `Iterator` and collects it into an `Rc<[T]>`.\n\n# Performance characteristics\n\n## The general case\n\nIn the general case, collecting into `Rc<[T]>` is done by first\ncollecting into a `Vec<T>`. That is, when writing the following:\n\n```rust\n# use std::rc::Rc;\nlet evens: Rc<[u8]> = (0..10).filter(|&x| x % 2 == 0).collect();\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nthis behaves as if we wrote:\n\n```rust\n# use std::rc::Rc;\nlet evens: Rc<[u8]> = (0..10).filter(|&x| x % 2 == 0)\n    .collect::<Vec<_>>() // The first set of allocations happens here.\n    .into(); // A second allocation for `Rc<[T]>` happens here.\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nThis will allocate as many times as needed for constructing the `Vec<T>`\nand then it will allocate once for turning the `Vec<T>` into the `Rc<[T]>`.\n\n## Iterators of known length\n\nWhen your `Iterator` implements `TrustedLen` and is of an exact size,\na single allocation will be made for the `Rc<[T]>`. For example:\n\n```rust\n# use std::rc::Rc;\nlet evens: Rc<[u8]> = (0..10).collect(); // Just a single allocation happens here.\n# assert_eq!(&*evens, &*(0..10).collect::<Vec<_>>());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5827":{"id":"0:5827","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2380,0],"end":[2385,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5828:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7081:311":{"id":"0:7081:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1371,4],"end":[1373,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3842:4919":{"id":"0:3842:4919","crate_id":0,"name":"current","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1562,4],"end":[1564,5]},"visibility":"public","docs":"Returns a reference to the element that the cursor is currently\npointing to.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7484":{"id":"0:7484","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7487:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3381:810":{"id":"0:3381:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1222,4],"end":[1232,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `BTreeSet<T>`.\n\n```\nuse std::collections::BTreeSet;\n\nlet set1 = BTreeSet::from([1, 2, 3, 4]);\nlet set2: BTreeSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1822":{"id":"0:1822","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1852,0],"end":[1856,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1825:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3892:780":{"id":"0:3892:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1967,4],"end":[1969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:3314":{"id":"0:413:3314","crate_id":0,"name":"write_usize","span":{"filename":"library/alloc/src/boxed.rs","begin":[1417,4],"end":[1419,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6235":{"id":"0:6235","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2606,0],"end":[2653,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6237:3190"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3276":{"id":"0:3276","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[239,0],"end":[243,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3278:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7639":{"id":"0:7639","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[362,32],"end":[362,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5751":{"id":"0:5751","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2086,0],"end":[2091,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5752:3494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3439":{"id":"0:3439","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1345,0],"end":[1350,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3441:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3465:780":{"id":"0:3465:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1454,4],"end":[1456,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5940":{"id":"0:5940","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2997,0],"end":[3001,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:5942:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7714:4776":{"id":"b:1:2903-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7351:810":{"id":"0:7351:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3456,4],"end":[3458,5]},"visibility":"default","docs":"Allocate a `Vec<u8>` and fill it with a UTF-8 string.\n\n# Examples\n\n```\nassert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:3209:100":{"id":"a:1:3111:246-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:6007:71":{"id":"b:1:3727-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:394:469":{"id":"0:394:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/boxed.rs","begin":[1380,4],"end":[1382,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1901":{"id":"0:1901","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2044,0],"end":[2048,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1904:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1480:4509":{"id":"0:1480:4509","crate_id":0,"name":"IterMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[387,0],"end":[393,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `BTreeMap`.\n\nThis `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`iter_mut`]: BTreeMap::iter_mut","links":{"BTreeMap::iter_mut":"0:2075:955","`BTreeMap`":"0:1428:99"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1480:4509","a:1:32053:3459-0:1480:4509","a:1:3111:246-0:1480:4509","a:1:31996:236-0:1480:4509","a:1:41612:4469-0:1480:4509","a:1:41611:4468-0:1480:4509","b:1:8171-0:1480:4509","b:1:2888-0:1480:4509","b:1:2618-0:1480:4509","b:1:2615-0:1480:4509","b:1:3727-0:1480:4509","b:1:2892-0:1480:4509","b:1:2903-0:1480:4509","b:1:2898-0:1480:4509","0:1697","0:1706","0:1702","0:1491","0:1687","0:1487"]}}},"0:3806:780":{"id":"0:3806:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1348,4],"end":[1350,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7601:462":{"id":"0:7601:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,9],"end":[161,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4852-1:9924:120":{"id":"0:4852-1:9924:120","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[588,51],"end":[588,62]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::DebugStruct","name":"DebugStruct","id":"1:9924:120","glob":false}}},"0:4994:3113":{"id":"0:4994:3113","crate_id":0,"name":"new_uninit_slice","span":{"filename":"library/alloc/src/rc.rs","begin":[995,4],"end":[997,5]},"visibility":"public","docs":"Constructs a new reference-counted slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut values = Rc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Rc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:295:2399":{"id":"b:0:727-0:295:2399","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6617":{"id":"0:6617","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[250,0],"end":[250,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:8625:3830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:826:101":{"id":"b:1:2898-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:704:2400":{"id":"0:704:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/borrow.rs","begin":[1,0],"end":[494,1]},"visibility":"public","docs":"A module for working with borrowed data.","links":{},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:714-1:2609:102","0:715-1:2612:103","0:723:249","0:732:118"],"is_stripped":false}}},"b:1:2903-0:1557:4545":{"id":"b:1:2903-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2127:780":{"id":"0:2127:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2873,4],"end":[2875,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4610":{"id":"0:4610","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2792,0],"end":[2801,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4613:172","0:4614:4175","0:4615:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:1327:4374":{"id":"a:1:41611:4468-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:3397:4776":{"id":"b:1:2615-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4864-1:10260:7845":{"id":"0:4864-1:10260:7845","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[594,39],"end":[594,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::UpperHex","name":"UpperHex","id":"1:10260:7845","glob":false}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[145,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3332:3010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:247:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5783":{"id":"0:5783","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2207,0],"end":[2221,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"char"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5785:3569","0:5787:2350","0:5788:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7319:810":{"id":"0:7319:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3314,4],"end":[3316,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n\n# Examples\n\n```\nassert_eq!(Vec::from(&mut [1, 2, 3][..]), vec![1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7380:4065":{"id":"a:1:41612:4469-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3730:4049":{"id":"0:3730:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1077,4],"end":[1082,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\n#![feature(linked_list_retain)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nd.retain(|&x| x % 2 == 0);\n\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\n#![feature(linked_list_retain)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nlet keep = [false, true, false];\nlet mut iter = keep.iter();\nd.retain(|_| *iter.next().unwrap());\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```","links":{},"attrs":["#[unstable(feature = \"linked_list_retain\", issue = \"114135\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1327:4374":{"id":"b:1:2898-0:1327:4374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1327:4374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2118,0],"end":[2122,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2859:76","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:621:3458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3803":{"id":"0:3803","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1347,0],"end":[1351,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3806:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[867,0],"end":[904,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:342:359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:483:3409":{"id":"0:483:3409","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/boxed.rs","begin":[1803,4],"end":[1805,5]},"visibility":"public","docs":"Attempt to downcast the box to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:3305:5807":{"id":"b:1:2903-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4514:6597":{"id":"0:4514:6597","crate_id":0,"name":"as_slices","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1182,4],"end":[1187,5]},"visibility":"public","docs":"Returns a pair of slices which contain, in order, the contents of the\ndeque.\n\nIf [`make_contiguous`] was previously called, all elements of the\ndeque will be in the first slice and the second slice will be empty.\n\n[`make_contiguous`]: VecDeque::make_contiguous\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\ndeque.push_back(2);\n\nassert_eq!(deque.as_slices(), (&[0, 1, 2][..], &[][..]));\n\ndeque.push_front(10);\ndeque.push_front(9);\n\nassert_eq!(deque.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));\n```","links":{"VecDeque::make_contiguous":"0:4550:6815"},"attrs":["#[inline]","#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7380:4065":{"id":"a:1:32053:3459-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5759":{"id":"0:5759","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2117,0],"end":[2123,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_from_iter_by_ref\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"char"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5761:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5002:3135":{"id":"0:5002:3135","crate_id":0,"name":"new_zeroed_slice_in","span":{"filename":"library/alloc/src/rc.rs","begin":[1096,4],"end":[1110,5]},"visibility":"public","docs":"Constructs a new reference-counted slice with uninitialized contents, with the memory being\nfilled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(allocator_api)]\n\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet values = Rc::<[u32], _>::new_zeroed_slice_in(3, System);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5948":{"id":"0:5948","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[3023,0],"end":[3028,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5949:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8171-0:1465:4057":{"id":"b:1:8171-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:5548-1:12363:8927":{"id":"0:5548-1:12363:8927","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[38,41],"end":[38,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::from_utf8_unchecked_mut","name":"from_utf8_unchecked_mut","id":"1:12363:8927","glob":false}}},"0:3872:4776":{"id":"0:3872:4776","crate_id":0,"name":"ExtractIf","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1918,0],"end":[1931,1]},"visibility":"public","docs":"An iterator produced by calling `extract_if` on LinkedList.","links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]","#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}}]},"impls":["a:1:3146:11953-0:3872:4776","a:1:32053:3459-0:3872:4776","a:1:3111:246-0:3872:4776","a:1:31996:236-0:3872:4776","a:1:41612:4469-0:3872:4776","a:1:41611:4468-0:3872:4776","b:1:8171-0:3872:4776","b:1:2888-0:3872:4776","b:1:2618-0:3872:4776","b:1:2615-0:3872:4776","b:1:3727-0:3872:4776","b:1:2892-0:3872:4776","b:1:2903-0:3872:4776","b:1:2898-0:3872:4776","0:3882","0:3889"]}}},"0:6125":{"id":"0:6125","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1332,0],"end":[1465,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6127:3190","0:6128:8205","0:6129:8213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7529":{"id":"0:7529","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,9],"end":[59,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7530:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6721:557":{"id":"0:6721:557","crate_id":0,"name":"count","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[251,4],"end":[253,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1557:4545":{"id":"a:1:3146:11953-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:1527:4528":{"id":"a:1:41612:4469-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:1342:4372":{"id":"a:1:41611:4468-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:1536:4534":{"id":"b:1:2618-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4970:3064":{"id":"0:4970:3064","crate_id":0,"name":"try_new_uninit","span":{"filename":"library/alloc/src/rc.rs","begin":[611,4],"end":[619,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, returning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut five = Rc::<u32>::try_new_uninit()?;\n\n// Deferred initialization:\nRc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7527:2620":{"id":"a:1:3111:246-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:326:3118":{"id":"0:326:3118","crate_id":0,"name":"new_zeroed_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet values = Box::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7685":{"id":"0:7685","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2348,0],"end":[2348,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:7688:678","0:7689:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1720:933":{"id":"0:1720:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1641,4],"end":[1658,5]},"visibility":"default","docs":"Gets an owning iterator over the entries of the map, sorted by key.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1846":{"id":"0:1846","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1904,0],"end":[1913,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:1850:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7412:5026":{"id":"b:1:2903-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4616":{"id":"0:4616","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2804,0],"end":[2811,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:4620:172","0:4621:4175","0:4622:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41612:4469-0:7597:7097":{"id":"a:1:41612:4469-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5689:8926":{"id":"0:5689:8926","crate_id":0,"name":"from_utf8_unchecked","span":{"filename":"library/alloc/src/string.rs","begin":[993,4],"end":[995,5]},"visibility":"public","docs":"Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.\n\nSee the safe version, [`from_utf8`], for more details.\n\n[`from_utf8`]: String::from_utf8\n\n# Safety\n\nThis function is unsafe because it does not check that the bytes passed\nto it are valid UTF-8. If this constraint is violated, it may cause\nmemory unsafety issues with future users of the `String`, as the rest of\nthe standard library assumes that `String`s are valid UTF-8.\n\n# Examples\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\nlet sparkle_heart = unsafe {\n    String::from_utf8_unchecked(sparkle_heart)\n};\n\nassert_eq!(\"💖\", sparkle_heart);\n```","links":{"String::from_utf8":"0:5669:7286"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:4825:335":{"id":"0:4825:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1049,4],"end":[1051,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:732:118":{"id":"b:1:2615-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:3872:4776":{"id":"b:1:3727-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1356:4373":{"id":"0:1356:4373","crate_id":0,"name":"OccupiedError","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[103,0],"end":[108,1]},"visibility":"public","docs":"The error returned by [`try_insert`](BTreeMap::try_insert) when the key already exists.\n\nContains the occupied entry, and the value that was not inserted.","links":{"BTreeMap::try_insert":"0:1618:4665"},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1361:4370","0:1362:3158"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1356:4373","a:1:32053:3459-0:1356:4373","a:1:3111:246-0:1356:4373","a:1:31996:236-0:1356:4373","a:1:41612:4469-0:1356:4373","a:1:41611:4468-0:1356:4373","b:0:5854-0:1356:4373","b:1:2888-0:1356:4373","b:1:2618-0:1356:4373","b:1:2615-0:1356:4373","b:1:3727-0:1356:4373","b:1:2892-0:1356:4373","b:1:2903-0:1356:4373","b:1:2898-0:1356:4373","0:1363","0:1374","0:1368"]}}},"0:840":{"id":"0:840","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[310,0],"end":[324,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:843:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[794,0],"end":[865,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:337:359","0:338:2895"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4775:810":{"id":"0:4775:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[793,4],"end":[796,5]},"visibility":"default","docs":"Converts a <code>[Box]<[CStr]></code> into a [`CString`] without copying or allocating.","links":{"CStr":"1:40050:106","`CString`":"0:7553:7100","Box":"0:295:2399"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1341:780":{"id":"0:1341:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7332":{"id":"0:7332","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3355,0],"end":[3372,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_from_array\", since = \"1.44.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7336:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6493:1167":{"id":"0:6493:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[61,4],"end":[83,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:1496:4175":{"id":"b:1:2898-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4495:2768":{"id":"0:4495:2768","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[778,4],"end":[788,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` more elements to be inserted in the\ngiven deque. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it requests. Therefore\ncapacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future\ninsertions are expected.\n\n# Panics\n\nPanics if the new capacity overflows `usize`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = [1].into();\nbuf.reserve_exact(10);\nassert!(buf.capacity() >= 11);\n```\n\n[`reserve`]: VecDeque::reserve","links":{"VecDeque::reserve":"0:4496:2750"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7703:678":{"id":"0:7703:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2352,0],"end":[2352,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6629:810":{"id":"0:6629:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[13,4],"end":[15,5]},"visibility":"default","docs":"Creates a [`Borrowed`] variant of [`Cow`]\nfrom a slice.\n\nThis conversion does not allocate or clone the data.\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed","links":{"crate::borrow::Cow::Borrowed":"0:735:3354","`Cow`":"0:732:118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1959":{"id":"0:1959","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2150,0],"end":[2150,73]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3355:4049":{"id":"0:3355:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1001,4],"end":[1007,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`.\nThe elements are visited in ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n// Keep only the even numbers.\nset.retain(|&k| k % 2 == 0);\nassert!(set.iter().eq([2, 4, 6].iter()));\n```","links":{},"attrs":["#[stable(feature = \"btree_retain\", since = \"1.53.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:7436:4175":{"id":"b:1:2888-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7254:4213":{"id":"0:7254:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2998,4],"end":[3000,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4433:464":{"id":"0:4433:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[116,4],"end":[119,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7480:4175":{"id":"a:1:31996:236-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:3238:4057":{"id":"b:1:8171-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:6237:3190":{"id":"0:6237:3190","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[2650,4],"end":[2652,5]},"visibility":"public","docs":"Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`]\nlater) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`],\nas these don't own anything; the method still works on them).\n\n# Safety\n\nThe pointer must have originated from the [`into_raw`] and must still own its potential\nweak reference.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to [`into_raw`].\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\n\nlet raw_1 = Arc::downgrade(&strong).into_raw();\nlet raw_2 = Arc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Arc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Arc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[`new`]: Weak::new\n[`into_raw`]: Weak::into_raw\n[`upgrade`]: Weak::upgrade","links":{"Weak::new":"0:6226:1153","Weak::into_raw":"0:6242:3225","Weak::upgrade":"0:6247:8595"},"attrs":["#[inline]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:2128":{"id":"0:2128","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2878,0],"end":[2938,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:2132:1167","0:2133:4981","0:2134:4987","0:2135:4991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4327:172":{"id":"0:4327:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[41,4],"end":[41,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"a:1:3111:246-0:7553:7100":{"id":"a:1:3111:246-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103-1:13696:307":{"id":"0:103-1:13696:307","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[13,0],"end":[13,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_module\", since = \"1.28.0\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"core::alloc","name":"alloc","id":"1:13696:307","glob":true}}},"b:1:2888-0:1356:4373":{"id":"b:1:2888-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2144:4991":{"id":"0:2144:4991","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2978,4],"end":[2981,5]},"visibility":"public","docs":"Returns a reference to the key and value of the previous element\nwithout moving the cursor.\n\nIf the cursor is at the start of the map then `None` is returned.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:1557:4545":{"id":"b:1:8171-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:5604:8969":{"id":"0:5604:8969","crate_id":0,"name":"into_boxed_bytes","span":{"filename":"library/alloc/src/str.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:8870":{"id":"1:13248:8870","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:3872:4776":{"id":"b:1:2615-0:3872:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5536-1:43653:8919":{"id":"0:5536-1:43653:8919","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[32,0],"end":[32,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::SplitWhitespace","name":"SplitWhitespace","id":"1:43653:8919","glob":false}}},"b:1:2892-0:3279:5798":{"id":"b:1:2892-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5255:3225":{"id":"0:5255:3225","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[2994,4],"end":[2998,5]},"visibility":"public","docs":"Consumes the `Weak<T>` and turns it into a raw pointer.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the `Weak<T>` with [`from_raw`].\n\nThe same restrictions of accessing the target of the pointer as with\n[`as_ptr`] apply.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet strong = Rc::new(\"hello\".to_owned());\nlet weak = Rc::downgrade(&strong);\nlet raw = weak.into_raw();\n\nassert_eq!(1, Rc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw(raw) });\nassert_eq!(0, Rc::weak_count(&strong));\n```\n\n[`from_raw`]: Weak::from_raw\n[`as_ptr`]: Weak::as_ptr","links":{"Weak::from_raw":"0:5250:3190","Weak::as_ptr":"0:5254:334"},"attrs":["#[must_use = \"losing the pointer will leak memory\"]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1636:4749":{"id":"0:1636:4749","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1336,4],"end":[1359,5]},"visibility":"public","docs":"Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\na.insert(3, \"c\");\na.insert(17, \"d\");\na.insert(41, \"e\");\n\nlet b = a.split_off(&3);\n\nassert_eq!(a.len(), 2);\nassert_eq!(b.len(), 3);\n\nassert_eq!(a[&1], \"a\");\nassert_eq!(a[&2], \"b\");\n\nassert_eq!(b[&3], \"c\");\nassert_eq!(b[&17], \"d\");\nassert_eq!(b[&41], \"e\");\n```","links":{},"attrs":["#[stable(feature = \"btree_split_off\", since = \"1.11.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7632:242":{"id":"b:1:2892-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2888-0:7714:4776":{"id":"b:1:2888-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4483:2679":{"id":"0:4483:2679","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[559,4],"end":[561,5]},"visibility":"public","docs":"Creates an empty deque with space for at least `capacity` elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::with_capacity(10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7730:10536":{"id":"a:1:32053:3459-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3708:6150":{"id":"0:3708:6150","crate_id":0,"name":"cursor_front_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[590,4],"end":[592,5]},"visibility":"public","docs":"Provides a cursor with editing operations at the front element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5809:2350":{"id":"0:5809:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2265,4],"end":[2267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["s",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3588":{"id":"0:3588","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1818,0],"end":[1818,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:7444:209":{"id":"b:1:2618-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3765":{"id":"0:3765","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1238,0],"end":[1238,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:4074:4150":{"id":"b:1:2898-0:4074:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4652:810":{"id":"0:4652:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2875,4],"end":[2878,5]},"visibility":"default","docs":"Turn a [`Vec<T>`] into a [`VecDeque<T>`].\n\n[`Vec<T>`]: crate::vec::Vec\n[`VecDeque<T>`]: crate::collections::VecDeque\n\nThis conversion is guaranteed to run in *O*(1) time\nand to not re-allocate the `Vec`'s buffer or allocate\nany additional memory.","links":{"crate::collections::VecDeque":"0:4423:264","crate::vec::Vec":"0:7048:263"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["other",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:7527:2620":{"id":"b:1:3727-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7609:7098":{"id":"0:7609:7098","crate_id":0,"name":"IntoStringError","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[229,0],"end":[232,1]},"visibility":"public","docs":"An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].\n\n`CString` is just a wrapper over a buffer of bytes with a nul terminator;\n[`CString::into_string`] performs UTF-8 validation on those bytes and may\nreturn this error.\n\nThis `struct` is created by [`CString::into_string()`]. See\nits documentation for more.","links":{"`CString`":"0:7553:7100","`CString::into_string()`":"0:4742:7285","`CString::into_string`":"0:4742:7285","`String`":"0:7632:242"},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4808","a:1:3146:11953-0:7609:7098","a:1:32053:3459-0:7609:7098","a:1:3111:246-0:7609:7098","a:1:31996:236-0:7609:7098","a:1:41612:4469-0:7609:7098","a:1:41611:4468-0:7609:7098","b:0:5854-0:7609:7098","b:0:727-0:7609:7098","b:1:2888-0:7609:7098","b:1:2618-0:7609:7098","b:1:2615-0:7609:7098","b:1:3727-0:7609:7098","b:1:2892-0:7609:7098","b:1:2903-0:7609:7098","b:1:2898-0:7609:7098","0:7614","0:7612","0:7617","0:4813","0:7615","0:7619","0:4832"]}}},"0:5323:651":{"id":"0:5323:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/rc.rs","begin":[3588,4],"end":[3600,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7669:1135":{"id":"0:7669:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2345,0],"end":[2345,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13151:3288":{"id":"1:13151:3288","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43365:8923","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1418:4222":{"id":"0:1418:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[552,4],"end":[554,5]},"visibility":"public","docs":"Takes the value of the entry out of the map, and returns it.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n// If we try to get \"poneyland\"'s value, it'll panic:\n// println!(\"{}\", map[\"poneyland\"]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"delete\", \"take\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:913:2768":{"id":"0:913:2768","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1052,4],"end":[1054,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` elements more than\nthe current length. Unlike [`reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `reserve_exact`, capacity will be greater than or equal to\n`self.len() + additional`. Does nothing if the capacity is already\nsufficient.\n\n[`reserve`]: BinaryHeap::reserve\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.reserve_exact(100);\nassert!(heap.capacity() >= 100);\nheap.push(4);\n```\n\n[`reserve`]: BinaryHeap::reserve","links":{"BinaryHeap::reserve":"0:914:2750","`usize`":"1:52101:1861"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5163:780":{"id":"0:5163:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[2461,4],"end":[2463,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6349:810":{"id":"0:6349:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3489,4],"end":[3492,5]},"visibility":"default","docs":"Converts an atomically reference-counted string slice into a byte slice.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet string: Arc<str> = Arc::from(\"eggplant\");\nlet bytes: Arc<[u8]> = Arc::from(string);\nassert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rc",{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:2114:4932":{"id":"a:1:3146:11953-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:7569:7099":{"id":"b:1:2892-0:7569:7099","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13434:198":{"id":"1:13434:198","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:44290:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:1:2618-0:5217:8069":{"id":"b:1:2618-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6140:8214":{"id":"0:6140:8214","crate_id":0,"name":"decrement_strong_count_in","span":{"filename":"library/alloc/src/sync.rs","begin":[1785,4],"end":[1787,5]},"visibility":"public","docs":"Decrements the strong reference count on the `Arc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Arc::into_raw`,  the\nassociated `Arc` instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method, and `ptr` must point to a block of memory\nallocated by `alloc`. This method can be used to release the final\n`Arc` and backing storage, but **should not** be called after the final `Arc` has been\nreleased.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet five = Arc::new_in(5, System);\n\nunsafe {\n    let ptr = Arc::into_raw(five);\n    Arc::increment_strong_count_in(ptr, System);\n\n    // Those assertions are deterministic because we haven't shared\n    // the `Arc` between threads.\n    let five = Arc::from_raw_in(ptr, System);\n    assert_eq!(2, Arc::strong_count(&five));\n    Arc::decrement_strong_count_in(ptr, System);\n    assert_eq!(1, Arc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1508,0],"end":[1512,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:976:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6591":{"id":"0:6591","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[166,0],"end":[171,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6594:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4345:7004":{"id":"0:4345:7004","crate_id":0,"name":"rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[141,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["accum",{"generic":"Acc"}],["f",{"generic":"F"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5237:1153":{"id":"0:5237:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/rc.rs","begin":[2824,4],"end":[2831,5]},"visibility":"public","docs":"Constructs a new `Weak<T>`, without allocating any memory.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::rc::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","Weak::upgrade":"0:5258:8595"},"attrs":["#[inline]","#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]","#[rustc_const_stable(feature = \"const_weak_new\", since = \"1.73.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:295:2399":{"id":"a:1:41612:4469-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:4925:216":{"id":"b:1:2888-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:943:4057":{"id":"a:1:41612:4469-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:3209:100":{"id":"b:1:2618-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2888-0:7597:7097":{"id":"b:1:2888-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2618-0:4149:4509":{"id":"b:1:2618-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3759:3431":{"id":"0:3759:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1214,4],"end":[1216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4125:3429":{"id":"0:4125:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[252,4],"end":[255,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4863-1:10262:205":{"id":"0:4863-1:10262:205","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[594,30],"end":[594,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Pointer","name":"Pointer","id":"1:10262:205","glob":false}}},"0:3436:3569":{"id":"0:3436:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1334,4],"end":[1336,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1356:4373":{"id":"a:1:3146:11953-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2892-0:7412:5026":{"id":"b:1:2892-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6107:3118":{"id":"0:6107:3118","crate_id":0,"name":"new_zeroed_slice","span":{"filename":"library/alloc/src/sync.rs","begin":[1161,4],"end":[1172,5]},"visibility":"public","docs":"Constructs a new atomically reference-counted slice with uninitialized contents, with the memory being\nfilled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::sync::Arc;\n\nlet values = Arc::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1385:5071":{"id":"0:1385:5071","crate_id":0,"name":"or_insert_with","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, String> = BTreeMap::new();\nlet s = \"hoho\".to_string();\n\nmap.entry(\"poneyland\").or_insert_with(|| s);\n\nassert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3305:5807":{"id":"b:1:2888-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5701:2775":{"id":"0:5701:2775","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/string.rs","begin":[1311,4],"end":[1313,5]},"visibility":"public","docs":"Shrinks the capacity of this `String` to match its length.\n\n# Examples\n\n```\nlet mut s = String::from(\"foo\");\n\ns.reserve(100);\nassert!(s.capacity() >= 100);\n\ns.shrink_to_fit();\nassert_eq!(3, s.capacity());\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3347:4628":{"id":"0:3347:4628","crate_id":0,"name":"pop_last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[869,4],"end":[874,5]},"visibility":"public","docs":"Removes the last element from the set and returns it, if any.\nThe last element is always the maximum element in the set.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(1);\nwhile let Some(n) = set.pop_last() {\n    assert_eq!(n, 1);\n}\nassert!(set.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1271,0],"end":[1281,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"default_box_extra\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:369:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7690":{"id":"0:7690","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2350,0],"end":[2350,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:7693:678","0:7694:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:966:3440":{"id":"0:966:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6393:2404":{"id":"0:6393:2404","crate_id":0,"name":"task","span":{"filename":"library/alloc/src/task.rs","begin":[1,0],"end":[349,1]},"visibility":"public","docs":"Types and Traits for working with asynchronous tasks.\n\n**Note**: Some of the types in this module are only available\non platforms that support atomic loads and stores of pointers.\nThis may be detected at compile time using\n`#[cfg(target_has_atomic = \"ptr\")]`.","links":{},"attrs":["#[cfg(all(not(no_global_oom_handling), not(no_rc), not(no_sync)))]","#![stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:6402:10439","0:6421:10507"],"is_stripped":false}}},"0:6093:3045":{"id":"0:6093:3045","crate_id":0,"name":"new_zeroed_in","span":{"filename":"library/alloc/src/sync.rs","begin":[792,4],"end":[803,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, in the provided allocator.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(allocator_api)]\n\nuse std::sync::Arc;\nuse std::alloc::System;\n\nlet zero = Arc::<u32, _>::new_zeroed_in(System);\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:6039:8069":{"id":"b:1:3727-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:3238:4057":{"id":"a:1:3146:11953-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:1480:4509":{"id":"b:1:8171-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:41611:4468-0:7444:209":{"id":"a:1:41611:4468-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13144:6461":{"id":"1:13144:6461","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13146:18922","str::split_at_mut":"1:13145:8953"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5577-1:44006:8944":{"id":"0:5577-1:44006:8944","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[57,31],"end":[57,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Utf8Chunks","name":"Utf8Chunks","id":"1:44006:8944","glob":false}}},"0:4851-1:9980:7839":{"id":"0:4851-1:9980:7839","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[588,41],"end":[588,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::DebugSet","name":"DebugSet","id":"1:9980:7839","glob":false}}},"0:3840:6241":{"id":"0:3840:6241","crate_id":0,"name":"move_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1540,4],"end":[1553,5]},"visibility":"public","docs":"Moves the cursor to the previous element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7714:4776":{"id":"a:1:41611:4468-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:5765:813":{"id":"0:5765:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2128,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6079:1263":{"id":"0:6079:1263","crate_id":0,"name":"pin","span":{"filename":"library/alloc/src/sync.rs","begin":[583,4],"end":[585,5]},"visibility":"public","docs":"Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n`data` will be pinned in memory and unable to be moved.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"pin\", since = \"1.33.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data",{"generic":"T"}]],"output":{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:7730:10536":{"id":"a:1:3111:246-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2070":{"id":"0:2070","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2359,0],"end":[2775,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2074:954","0:2075:955","0:2076:4872","0:2077:1874","0:2078:4883","0:2079:974","0:2080:3440","0:2081:4916","0:2083:4930","0:2085:4945","0:2087:4953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2171:5036":{"id":"0:2171:5036","crate_id":0,"name":"remove_prev","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3282,4],"end":[3304,5]},"visibility":"public","docs":"Removes the precending element from the `BTreeMap`.\n\nThe element that was removed is returned. The cursor position is\nunchanged (after the removed element).","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:3648:4057":{"id":"b:1:2615-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5005":{"id":"0:5005","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1113,0],"end":[1152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5008:359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5815:9744":{"id":"0:5815:9744","crate_id":0,"name":"is_contained_in","span":{"filename":"library/alloc/src/string.rs","begin":[2290,4],"end":[2292,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:7621:8665":{"id":"a:1:3146:11953-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7931:1135":{"id":"0:7931:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[26,0],"end":[26,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:1577:4553":{"id":"a:1:3146:11953-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:243:248":{"id":"0:243:248","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[134,4],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:958:3429":{"id":"0:958:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1456,4],"end":[1458,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:963:3437":{"id":"0:963:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1469,4],"end":[1471,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:7412:5026":{"id":"b:0:727-0:7412:5026","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7578":{"id":"0:7578","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,27],"end":[136,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:5854-0:1356:4373":{"id":"b:0:5854-0:1356:4373","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:4423:264":{"id":"a:1:32053:3459-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1130":{"id":"0:1130","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1866,0],"end":[1880,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1134:3569","0:1136:2350","0:1137:4213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3772":{"id":"0:3772","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1258,0],"end":[1285,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3775:172","0:3776:1167","0:3778:3429","0:3779:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6522":{"id":"0:6522","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[51,0],"end":[51,73]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13124:9515":{"id":"1:13124:9515","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13157:5864":{"id":"1:13157:5864","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:943:4057":{"id":"a:1:3111:246-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:1311:4371":{"id":"b:1:3727-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:3635:181":{"id":"a:1:41611:4468-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1526:780":{"id":"0:1526:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[483,4],"end":[485,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3333:5864":{"id":"0:3333:5864","crate_id":0,"name":"contains","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[609,4],"end":[615,5]},"visibility":"public","docs":"Returns `true` if the set contains an element equal to the value.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:7363:2619":{"id":"a:1:31996:236-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:3209:100":{"id":"a:1:41611:4468-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:793:295":{"id":"0:793:295","crate_id":0,"name":"add","span":{"filename":"library/alloc/src/borrow.rs","begin":[456,4],"end":[459,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3157:3571","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1869":{"id":"0:1869","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1976,0],"end":[1976,92]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5887:810":{"id":"0:5887:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2732,4],"end":[2734,5]},"visibility":"default","docs":"Converts a `&String` into a [`String`].\n\nThis clones `s` and returns the clone.","links":{"`String`":"0:7632:242"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5754:462":{"id":"0:5754:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/string.rs","begin":[2096,4],"end":[2098,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6047":{"id":"0:6047","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[338,0],"end":[338,80]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:7527:2620":{"id":"a:1:3146:11953-0:7527:2620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7057:2384":{"id":"0:7057:2384","crate_id":0,"name":"try_with_capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[496,4],"end":[498,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T>` with at least the specified capacity.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\n# Errors\n\nReturns an error if the capacity exceeds `isize::MAX` _bytes_,\nor if the allocator reports allocation failure.","links":{},"attrs":["#[inline]","#[unstable(feature = \"try_with_capacity\", issue = \"91913\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5217:8069":{"id":"0:5217:8069","crate_id":0,"name":"Weak","span":{"filename":"library/alloc/src/rc.rs","begin":[2781,0],"end":[2793,1]},"visibility":"public","docs":"`Weak` is a version of [`Rc`] that holds a non-owning reference to the\nmanaged allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\npointer, which returns an <code>[Option]<[Rc]\\<T>></code>.\n\nSince a `Weak` reference does not count towards ownership, it will not\nprevent the value stored in the allocation from being dropped, and `Weak` itself makes no\nguarantees about the value still being present. Thus it may return [`None`]\nwhen [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation\nitself (the backing store) from being deallocated.\n\nA `Weak` pointer is useful for keeping a temporary reference to the allocation\nmanaged by [`Rc`] without preventing its inner value from being dropped. It is also used to\nprevent circular references between [`Rc`] pointers, since mutual owning references\nwould never allow either [`Rc`] to be dropped. For example, a tree could\nhave strong [`Rc`] pointers from parent nodes to children, and `Weak`\npointers from children back to their parents.\n\nThe typical way to obtain a `Weak` pointer is to call [`Rc::downgrade`].\n\n[`upgrade`]: Weak::upgrade","links":{"`Rc::downgrade`":"0:5024:8240","Weak::upgrade":"0:5258:8595","`Rc`":"0:4925:216","Option":"1:41517:193","Rc":"0:4925:216","`None`":"1:41519:190"},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]","#[rustc_diagnostic_item = \"RcWeak\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:5235","0:5238","0:5248","0:5251","a:1:3146:11953-0:5217:8069","a:1:32053:3459-0:5217:8069","a:1:41612:4469-0:5217:8069","a:1:41611:4468-0:5217:8069","b:0:727-0:5217:8069","b:1:2888-0:5217:8069","b:1:2618-0:5217:8069","b:1:2615-0:5217:8069","b:1:3727-0:5217:8069","b:1:2892-0:5217:8069","b:1:2903-0:5217:8069","b:1:2898-0:5217:8069","0:5225","0:5232","0:5267","0:5228","0:5271","0:5263","0:5275","0:5222"]}}},"0:1465:4057":{"id":"0:1465:4057","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[354,0],"end":[357,1]},"visibility":"public","docs":"An iterator over the entries of a `BTreeMap`.\n\nThis `struct` is created by the [`iter`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`iter`]: BTreeMap::iter","links":{"BTreeMap::iter":"0:2074:954","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1465:4057","a:1:32053:3459-0:1465:4057","a:1:3111:246-0:1465:4057","a:1:31996:236-0:1465:4057","a:1:41612:4469-0:1465:4057","a:1:41611:4468-0:1465:4057","b:0:727-0:1465:4057","b:1:8171-0:1465:4057","b:1:2888-0:1465:4057","b:1:2618-0:1465:4057","b:1:2615-0:1465:4057","b:1:3727-0:1465:4057","b:1:2892-0:1465:4057","b:1:2903-0:1465:4057","b:1:2898-0:1465:4057","0:1675","0:1663","0:1471","0:1475","0:1666","0:1653","0:1671"]}}},"b:1:2898-0:7597:7097":{"id":"b:1:2898-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1474:780":{"id":"0:1474:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[361,4],"end":[363,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3888:3429":{"id":"0:3888:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1957,4],"end":[1959,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5538-1:12364:3544":{"id":"0:5538-1:12364:3544","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,20],"end":[34,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"str_from_raw_parts\", issue = \"119206\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::from_raw_parts","name":"from_raw_parts","id":"1:12364:3544","glob":false}}},"0:7083:11040":{"id":"0:7083:11040","crate_id":0,"name":"swap_remove","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1487,4],"end":[1509,5]},"visibility":"public","docs":"Removes an element from the vector and returns it.\n\nThe removed element is replaced by the last element of the vector.\n\nThis does not preserve ordering of the remaining elements, but is *O*(1).\nIf you need to preserve the element order, use [`remove`] instead.\n\n[`remove`]: Vec::remove\n\n# Panics\n\nPanics if `index` is out of bounds.\n\n# Examples\n\n```\nlet mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];\n\nassert_eq!(v.swap_remove(1), \"bar\");\nassert_eq!(v, [\"foo\", \"qux\", \"baz\"]);\n\nassert_eq!(v.swap_remove(0), \"foo\");\nassert_eq!(v, [\"baz\", \"qux\"]);\n```","links":{"Vec::remove":"0:7087:4222"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4738:3190":{"id":"0:4738:3190","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[399,4],"end":[414,5]},"visibility":"public","docs":"Retakes ownership of a `CString` that was transferred to C via\n[`CString::into_raw`].\n\nAdditionally, the length of the string will be recalculated from the pointer.\n\n# Safety\n\nThis should only ever be called with a pointer that was earlier\nobtained by calling [`CString::into_raw`]. Other usage (e.g., trying to take\nownership of a string that was allocated by foreign code) is likely to lead\nto undefined behavior or allocator corruption.\n\nIt should be noted that the length isn't just \"recomputed,\" but that\nthe recomputed length must match the original length from the\n[`CString::into_raw`] call. This means the [`CString::into_raw`]/`from_raw`\nmethods should not be used when passing the string to C functions that can\nmodify the string's length.\n\n> **Note:** If you need to borrow a string that was allocated by\n> foreign code, use [`CStr`]. If you need to take ownership of\n> a string that was allocated by foreign code, you will need to\n> make your own provisions for freeing it appropriately, likely\n> with the foreign code's API to do that.\n\n# Examples\n\nCreates a `CString`, pass ownership to an `extern` function (via raw pointer), then retake\nownership with `from_raw`:\n\n```ignore (extern-declaration)\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" {\n    fn some_extern_function(s: *mut c_char);\n}\n\nlet c_string = CString::new(\"Hello!\").expect(\"CString::new failed\");\nlet raw = c_string.into_raw();\nunsafe {\n    some_extern_function(raw);\n    let c_string = CString::from_raw(raw);\n}\n```","links":{"`CStr`":"1:40050:106","`CString::into_raw`":"0:4741:3225"},"attrs":["#[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]","#[stable(feature = \"cstr_memory\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"c_char","id":"1:40103:7105","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5241:2669":{"id":"0:5241:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/rc.rs","begin":[2851,4],"end":[2858,5]},"visibility":"public","docs":"Constructs a new `Weak<T>`, without allocating any memory, technically in the provided\nallocator.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::rc::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","Weak::upgrade":"0:5258:8595"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1447,0],"end":[1464,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:956:172","0:957:1167","0:958:3429","0:959:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7411:780":{"id":"0:7411:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1700,9],"end":[1700,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:2089:4918":{"id":"a:1:41612:4469-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3270:780":{"id":"0:3270:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[222,4],"end":[224,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:4309:4057":{"id":"b:1:2898-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1018":{"id":"0:1018","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1612,0],"end":[1625,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1021:172","0:1022:1167","0:1023:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3547:4798":{"id":"0:3547:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1688,4],"end":[1690,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4601:917":{"id":"0:4601:917","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2771,4],"end":[2773,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5675:9407":{"id":"0:5675:9407","crate_id":0,"name":"from_utf16le","span":{"filename":"library/alloc/src/string.rs","begin":[752,4],"end":[762,5]},"visibility":"public","docs":"Decode a UTF-16LE–encoded vector `v` into a `String`, returning [`Err`]\nif `v` contains any invalid data.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(str_from_utf16_endian)]\n// 𝄞music\nlet v = &[0x34, 0xD8, 0x1E, 0xDD, 0x6d, 0x00, 0x75, 0x00,\n          0x73, 0x00, 0x69, 0x00, 0x63, 0x00];\nassert_eq!(String::from(\"𝄞music\"),\n           String::from_utf16le(v).unwrap());\n\n// 𝄞mu<invalid>ic\nlet v = &[0x34, 0xD8, 0x1E, 0xDD, 0x6d, 0x00, 0x75, 0x00,\n          0x00, 0xD8, 0x69, 0x00, 0x63, 0x00];\nassert!(String::from_utf16le(v).is_err());\n```","links":{"`Err`":"1:41636:135"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"str_from_utf16_endian\", issue = \"116258\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"FromUtf16Error","id":"0:7655:9289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3397:4776":{"id":"b:1:2888-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:3635:181":{"id":"a:1:41612:4469-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:559:198":{"id":"0:559:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/boxed.rs","begin":[2015,4],"end":[2015,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FnOnce","id":"1:3358:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}}}}}}},"a:1:3111:246-0:7402:4039":{"id":"a:1:3111:246-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4787:810":{"id":"0:4787:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[852,4],"end":[854,5]},"visibility":"default","docs":"Converts a [`CStr`] into a borrowed [`Cow`] without copying or allocating.","links":{"`CStr`":"1:40050:106","`Cow`":"0:732:118"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1663":{"id":"0:1663","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1531,0],"end":[1531,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3539":{"id":"0:3539","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1647,0],"end":[1691,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3543:172","0:3544:1167","0:3546:3429","0:3547:4798"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2898-0:3279:5798":{"id":"b:1:2898-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4123:172":{"id":"0:4123:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[238,4],"end":[238,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7714:4776":{"id":"0:7714:4776","crate_id":0,"name":"ExtractIf","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[23,0],"end":[40,1]},"visibility":"public","docs":"An iterator which uses a closure to determine if an element should be removed.\n\nThis struct is created by [`Vec::extract_if`].\nSee its documentation for more.\n\n# Example\n\n```\n#![feature(extract_if)]\n\nlet mut v = vec![0, 1, 2];\nlet iter: std::vec::ExtractIf<'_, _, _> = v.extract_if(|x| *x % 2 == 0);\n```","links":{"`Vec::extract_if`":"0:7265:4683"},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]","#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:6483","a:1:3146:11953-0:7714:4776","a:1:32053:3459-0:7714:4776","a:1:3111:246-0:7714:4776","a:1:31996:236-0:7714:4776","a:1:41612:4469-0:7714:4776","a:1:41611:4468-0:7714:4776","b:1:8171-0:7714:4776","b:1:2888-0:7714:4776","b:1:2618-0:7714:4776","b:1:2615-0:7714:4776","b:1:3727-0:7714:4776","b:1:2892-0:7714:4776","b:1:2903-0:7714:4776","b:1:2898-0:7714:4776","0:7724","0:6488","0:6495"]}}},"0:5668:2384":{"id":"0:5668:2384","crate_id":0,"name":"try_with_capacity","span":{"filename":"library/alloc/src/string.rs","begin":[504,4],"end":[506,5]},"visibility":"public","docs":"Creates a new empty `String` with at least the specified capacity.\n\n# Errors\n\nReturns [`Err`] if the capacity exceeds `isize::MAX` bytes,\nor if the memory allocator reports failure.\n","links":{"`Err`":"1:41636:135"},"attrs":["#[inline]","#[unstable(feature = \"try_with_capacity\", issue = \"91913\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6584":{"id":"0:6584","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[152,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6587:172","0:6588:1167","0:6590:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6405":{"id":"0:6405","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/task.rs","begin":[109,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Wake","id":"0:6402:10439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"core::task::Waker","id":"1:13644:10393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6407:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4192:3440":{"id":"0:4192:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[156,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5562-1:43547:8937":{"id":"0:5562-1:43547:8937","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[47,34],"end":[47,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::RMatchIndices","name":"RMatchIndices","id":"1:43547:8937","glob":false}}},"a:1:3111:246-0:4149:4509":{"id":"a:1:3111:246-0:4149:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:389:829":{"id":"0:389:829","crate_id":0,"name":"ge","span":{"filename":"library/alloc/src/boxed.rs","begin":[1369,4],"end":[1371,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3425":{"id":"0:3425","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1318,0],"end":[1330,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3428:3569","0:3431:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7073:2775":{"id":"0:7073:2775","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1077,4],"end":[1084,5]},"visibility":"public","docs":"Shrinks the capacity of the vector as much as possible.\n\nThe behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for [`with_capacity`]. See [`Allocator::shrink`] for more details.\n\n[`with_capacity`]: Vec::with_capacity\n\n# Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\nassert!(vec.capacity() >= 10);\nvec.shrink_to_fit();\nassert!(vec.capacity() >= 3);\n```","links":{"Vec::with_capacity":"0:7056:2679","`Allocator::shrink`":"1:13762:2776"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:732:118":{"id":"0:732:118","crate_id":0,"name":"Cow","span":{"filename":"library/alloc/src/borrow.rs","begin":[180,0],"end":[191,1]},"visibility":"public","docs":"A clone-on-write smart pointer.\n\nThe type `Cow` is a smart pointer providing clone-on-write functionality: it\ncan enclose and provide immutable access to borrowed data, and clone the\ndata lazily when mutation or ownership is required. The type is designed to\nwork with general borrowed data via the `Borrow` trait.\n\n`Cow` implements `Deref`, which means that you can call\nnon-mutating methods directly on the data it encloses. If mutation\nis desired, `to_mut` will obtain a mutable reference to an owned\nvalue, cloning if necessary.\n\nIf you need reference-counting pointers, note that\n[`Rc::make_mut`][crate::rc::Rc::make_mut] and\n[`Arc::make_mut`][crate::sync::Arc::make_mut] can provide clone-on-write\nfunctionality as well.\n\n# Examples\n\n```\nuse std::borrow::Cow;\n\nfn abs_all(input: &mut Cow<'_, [i32]>) {\n    for i in 0..input.len() {\n        let v = input[i];\n        if v < 0 {\n            // Clones into a vector if not already owned.\n            input.to_mut()[i] = -v;\n        }\n    }\n}\n\n// No clone occurs because `input` doesn't need to be mutated.\nlet slice = [0, 1, 2];\nlet mut input = Cow::from(&slice[..]);\nabs_all(&mut input);\n\n// Clone occurs because `input` needs to be mutated.\nlet slice = [-1, 0, 1];\nlet mut input = Cow::from(&slice[..]);\nabs_all(&mut input);\n\n// No clone occurs because `input` is already owned.\nlet mut input = Cow::from(vec![-1, 0, 1]);\nabs_all(&mut input);\n```\n\nAnother example showing how to keep `Cow` in a struct:\n\n```\nuse std::borrow::Cow;\n\nstruct Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {\n    values: Cow<'a, [X]>,\n}\n\nimpl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {\n    fn new(v: Cow<'a, [X]>) -> Self {\n        Items { values: v }\n    }\n}\n\n// Creates a container from borrowed values of a slice\nlet readonly = [1, 2];\nlet borrowed = Items::new((&readonly[..]).into());\nmatch borrowed {\n    Items { values: Cow::Borrowed(b) } => println!(\"borrowed {b:?}\"),\n    _ => panic!(\"expect borrowed value\"),\n}\n\nlet mut clone_on_write = borrowed;\n// Mutates the data from slice into owned vec and pushes a new value on top\nclone_on_write.values.to_mut().push(3);\nprintln!(\"clone_on_write = {:?}\", clone_on_write.values);\n\n// The data was mutated. Let's check it out.\nmatch clone_on_write {\n    Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),\n    _ => panic!(\"expect owned data\"),\n}\n```","links":{"crate::sync::Arc::make_mut":"0:6205:8336","crate::rc::Rc::make_mut":"0:5036:8336"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"Cow\"]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:735:3354","0:738:3355"],"impls":["0:745","a:1:3146:11953-0:732:118","a:1:32053:3459-0:732:118","a:1:3111:246-0:732:118","a:1:31996:236-0:732:118","a:1:41612:4469-0:732:118","a:1:41611:4468-0:732:118","b:0:5854-0:732:118","b:0:727-0:732:118","b:1:2888-0:732:118","b:1:2618-0:732:118","b:1:2615-0:732:118","b:1:3727-0:732:118","b:1:2892-0:732:118","b:1:2903-0:732:118","b:1:2898-0:732:118","0:441","0:797","0:4788","0:5189","0:5908","0:773","0:7680","0:5804","0:7700","0:7695","0:5895","0:6641","0:446","0:760","0:689","0:6344","0:7705","0:783","0:4782","0:766","0:7950","0:7690","0:6626","0:5892","0:757","0:5913","0:786","0:7956","0:770","0:5904","0:7338","0:776","0:6630","0:4772","0:6637","0:7685","0:751","0:719","0:5773","0:4767","0:5901","0:741","0:6645","0:779","0:790","0:693","0:4785","0:755","0:7961","0:5898","0:794"]}}},"0:5841:918":{"id":"0:5841:918","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2467,4],"end":[2469,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:10903:238","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5761:813":{"id":"0:5761:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2118,4],"end":[2122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"char"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6307":{"id":"0:6307","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3269,0],"end":[3273,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Pointer","id":"1:10262:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6310:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5178:810":{"id":"0:5178:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2540,4],"end":[2543,5]},"visibility":"default","docs":"Allocate a reference-counted string slice and copy `v` into it.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet shared: Rc<str> = Rc::from(\"statue\");\nassert_eq!(\"statue\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4485":{"id":"0:4485","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[588,0],"end":[2642,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4488:2669","0:4489:2694","0:4491:3917","0:4492:4637","0:4493:3831","0:4494:2680","0:4495:2768","0:4496:2750","0:4497:2769","0:4498:2760","0:4499:2775","0:4500:4123","0:4501:6589","0:4511:311","0:4512:954","0:4513:955","0:4514:6597","0:4515:6420","0:4516:974","0:4517:3440","0:4520:4502","0:4522:4727","0:4524:4149","0:4526:4152","0:4527:5864","0:4528:4780","0:4529:6188","0:4530:5177","0:4531:6196","0:4532:6209","0:4533:6219","0:4534:6200","0:4535:6214","0:4537:6717","0:4538:6722","0:4539:4498","0:4540:4222","0:4541:4749","0:4542:3978","0:4543:4049","0:4546:6255","0:4549:6786","0:4550:6815","0:4551:1415","0:4552:1416","0:4555:6875","0:4557:6876","0:4563:6908","0:4568:6925"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:6554:4150":{"id":"b:1:2903-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4230:172":{"id":"0:4230:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[43,4],"end":[43,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:5602:3595":{"id":"0:5602:3595","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/str.rs","begin":[214,4],"end":[218,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:3271:5793":{"id":"a:1:3146:11953-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2076:4872":{"id":"0:2076:4872","crate_id":0,"name":"keys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2436,4],"end":[2438,5]},"visibility":"public","docs":"Gets an iterator over the keys of the map, in sorted order.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(2, \"b\");\na.insert(1, \"a\");\n\nlet keys: Vec<_> = a.keys().cloned().collect();\nassert_eq!(keys, [1, 2]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3661:4509":{"id":"b:1:2898-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:585":{"id":"0:585","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2056,0],"end":[2060,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"async_fn_traits\", issue = \"none\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:32083:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsyncFn","id":"1:3184:3004","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncFn","id":"1:3184:3004","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:589:361"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:757":{"id":"0:757","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[350,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:759:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5302:335":{"id":"0:5302:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/rc.rs","begin":[3437,4],"end":[3439,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7632:242":{"id":"0:7632:242","crate_id":0,"name":"String","span":{"filename":"library/alloc/src/string.rs","begin":[365,0],"end":[367,1]},"visibility":"public","docs":"A UTF-8–encoded, growable string.\n\nThe `String` type is the most common string type that has ownership over the\ncontents of the string. It has a close relationship with its borrowed\ncounterpart, the primitive [`str`].\n\n# Examples\n\nYou can create a `String` from [a literal string][`&str`] with [`String::from`]:\n\n[`String::from`]: From::from\n\n```\nlet hello = String::from(\"Hello, world!\");\n```\n\nYou can append a [`char`] to a `String` with the [`push`] method, and\nappend a [`&str`] with the [`push_str`] method:\n\n```\nlet mut hello = String::from(\"Hello, \");\n\nhello.push('w');\nhello.push_str(\"orld!\");\n```\n\n[`push`]: String::push\n[`push_str`]: String::push_str\n\nIf you have a vector of UTF-8 bytes, you can create a `String` from it with\nthe [`from_utf8`] method:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\n[`from_utf8`]: String::from_utf8\n\n# UTF-8\n\n`String`s are always valid UTF-8. If you need a non-UTF-8 string, consider\n[`OsString`]. It is similar, but without the UTF-8 constraint. Because UTF-8\nis a variable width encoding, `String`s are typically smaller than an array of\nthe same `chars`:\n\n```\nuse std::mem;\n\n// `s` is ASCII which represents each `char` as one byte\nlet s = \"hello\";\nassert_eq!(s.len(), 5);\n\n// A `char` array with the same contents would be longer because\n// every `char` is four bytes\nlet s = ['h', 'e', 'l', 'l', 'o'];\nlet size: usize = s.into_iter().map(|c| mem::size_of_val(&c)).sum();\nassert_eq!(size, 20);\n\n// However, for non-ASCII strings, the difference will be smaller\n// and sometimes they are the same\nlet s = \"💖💖💖💖💖\";\nassert_eq!(s.len(), 20);\n\nlet s = ['💖', '💖', '💖', '💖', '💖'];\nlet size: usize = s.into_iter().map(|c| mem::size_of_val(&c)).sum();\nassert_eq!(size, 20);\n```\n\nThis raises interesting questions as to how `s[i]` should work.\nWhat should `i` be here? Several options include byte indices and\n`char` indices but, because of UTF-8 encoding, only byte indices\nwould provide constant time indexing. Getting the `i`th `char`, for\nexample, is available using [`chars`]:\n\n```\nlet s = \"hello\";\nlet third_character = s.chars().nth(2);\nassert_eq!(third_character, Some('l'));\n\nlet s = \"💖💖💖💖💖\";\nlet third_character = s.chars().nth(2);\nassert_eq!(third_character, Some('💖'));\n```\n\nNext, what should `s[i]` return? Because indexing returns a reference\nto underlying data it could be `&u8`, `&[u8]`, or something else similar.\nSince we're only providing one index, `&u8` makes the most sense but that\nmight not be what the user expects and can be explicitly achieved with\n[`as_bytes()`]:\n\n```\n// The first byte is 104 - the byte value of `'h'`\nlet s = \"hello\";\nassert_eq!(s.as_bytes()[0], 104);\n// or\nassert_eq!(s.as_bytes()[0], b'h');\n\n// The first byte is 240 which isn't obviously useful\nlet s = \"💖💖💖💖💖\";\nassert_eq!(s.as_bytes()[0], 240);\n```\n\nDue to these ambiguities/restrictions, indexing with a `usize` is simply\nforbidden:\n\n```compile_fail,E0277\nlet s = \"hello\";\n\n// The following will not compile!\nprintln!(\"The first letter of s is {}\", s[0]);\n```\n\nIt is more clear, however, how `&s[i..j]` should work (that is,\nindexing with a range). It should accept byte indices (to be constant-time)\nand return a `&str` which is UTF-8 encoded. This is also called \"string slicing\".\nNote this will panic if the byte indices provided are not character\nboundaries - see [`is_char_boundary`] for more details. See the implementations\nfor [`SliceIndex<str>`] for more details on string slicing. For a non-panicking\nversion of string slicing, see [`get`].\n\n[`OsString`]: ../../std/ffi/struct.OsString.html \"ffi::OsString\"\n[`SliceIndex<str>`]: core::slice::SliceIndex\n[`as_bytes()`]: str::as_bytes\n[`get`]: str::get\n[`is_char_boundary`]: str::is_char_boundary\n\nThe [`bytes`] and [`chars`] methods return iterators over the bytes and\ncodepoints of the string, respectively. To iterate over codepoints along\nwith byte indices, use [`char_indices`].\n\n[`bytes`]: str::bytes\n[`chars`]: str::chars\n[`char_indices`]: str::char_indices\n\n# Deref\n\n`String` implements <code>[Deref]<Target = [str]></code>, and so inherits all of [`str`]'s\nmethods. In addition, this means that you can pass a `String` to a\nfunction which takes a [`&str`] by using an ampersand (`&`):\n\n```\nfn takes_str(s: &str) { }\n\nlet s = String::from(\"Hello\");\n\ntakes_str(&s);\n```\n\nThis will create a [`&str`] from the `String` and pass it in. This\nconversion is very inexpensive, and so generally, functions will accept\n[`&str`]s as arguments unless they need a `String` for some specific\nreason.\n\nIn certain cases Rust doesn't have enough information to make this\nconversion, known as [`Deref`] coercion. In the following example a string\nslice [`&'a str`][`&str`] implements the trait `TraitExample`, and the function\n`example_func` takes anything that implements the trait. In this case Rust\nwould need to make two implicit conversions, which Rust doesn't have the\nmeans to do. For that reason, the following example will not compile.\n\n```compile_fail,E0277\ntrait TraitExample {}\n\nimpl<'a> TraitExample for &'a str {}\n\nfn example_func<A: TraitExample>(example_arg: A) {}\n\nlet example_string = String::from(\"example_string\");\nexample_func(&example_string);\n```\n\nThere are two options that would work instead. The first would be to\nchange the line `example_func(&example_string);` to\n`example_func(example_string.as_str());`, using the method [`as_str()`]\nto explicitly extract the string slice containing the string. The second\nway changes `example_func(&example_string);` to\n`example_func(&*example_string);`. In this case we are dereferencing a\n`String` to a [`str`], then referencing the [`str`] back to\n[`&str`]. The second way is more idiomatic, however both work to do the\nconversion explicitly rather than relying on the implicit conversion.\n\n# Representation\n\nA `String` is made up of three components: a pointer to some bytes, a\nlength, and a capacity. The pointer points to the internal buffer which `String`\nuses to store its data. The length is the number of bytes currently stored\nin the buffer, and the capacity is the size of the buffer in bytes. As such,\nthe length will always be less than or equal to the capacity.\n\nThis buffer is always stored on the heap.\n\nYou can look at these with the [`as_ptr`], [`len`], and [`capacity`]\nmethods:\n\n```\nuse std::mem;\n\nlet story = String::from(\"Once upon a time...\");\n\n// Prevent automatically dropping the String's data\nlet mut story = mem::ManuallyDrop::new(story);\n\nlet ptr = story.as_mut_ptr();\nlet len = story.len();\nlet capacity = story.capacity();\n\n// story has nineteen bytes\nassert_eq!(19, len);\n\n// We can re-build a String out of ptr, len, and capacity. This is all\n// unsafe because we are responsible for making sure the components are\n// valid:\nlet s = unsafe { String::from_raw_parts(ptr, len, capacity) } ;\n\nassert_eq!(String::from(\"Once upon a time...\"), s);\n```\n\n[`as_ptr`]: str::as_ptr\n[`len`]: String::len\n[`capacity`]: String::capacity\n\nIf a `String` has enough capacity, adding elements to it will not\nre-allocate. For example, consider this program:\n\n```\nlet mut s = String::new();\n\nprintln!(\"{}\", s.capacity());\n\nfor _ in 0..5 {\n    s.push_str(\"hello\");\n    println!(\"{}\", s.capacity());\n}\n```\n\nThis will output the following:\n\n```text\n0\n8\n16\n16\n32\n32\n```\n\nAt first, we have no memory allocated at all, but as we append to the\nstring, it increases its capacity appropriately. If we instead use the\n[`with_capacity`] method to allocate the correct capacity initially:\n\n```\nlet mut s = String::with_capacity(25);\n\nprintln!(\"{}\", s.capacity());\n\nfor _ in 0..5 {\n    s.push_str(\"hello\");\n    println!(\"{}\", s.capacity());\n}\n```\n\n[`with_capacity`]: String::with_capacity\n\nWe end up with a different output:\n\n```text\n25\n25\n25\n25\n25\n25\n```\n\nHere, there's no need to allocate more memory inside the loop.\n\n[str]: prim@str \"str\"\n[`str`]: prim@str \"str\"\n[`&str`]: prim@str \"&str\"\n[Deref]: core::ops::Deref \"ops::Deref\"\n[`Deref`]: core::ops::Deref \"ops::Deref\"\n[`as_str()`]: String::as_str","links":{"String::capacity":"0:5696:2680","str::is_char_boundary":"1:13124:9515","String::len":"0:5730:974","String::push_str":"0:5693:3688","str::char_indices":"1:13150:9016","str::as_bytes":"1:13130:3305","core::slice::SliceIndex":"1:10903:238","String::from_utf8":"0:5669:7286","core::ops::Deref":"1:3319:124","From::from":"1:2867:810","str::bytes":"1:13151:3288","`char`":"1:52078:458","String::as_str":"0:5691:336","String::push":"0:5703:3980","prim@str":"1:52084:1672","str::chars":"1:13149:9024","str::get":"1:13134:3917","String::with_capacity":"0:5667:2679","str::as_ptr":"1:13132:334"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[lang = \"String\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:5665","a:1:3146:11953-0:7632:242","a:1:32053:3459-0:7632:242","a:1:3111:246-0:7632:242","a:1:31996:236-0:7632:242","a:1:41612:4469-0:7632:242","a:1:41611:4468-0:7632:242","b:0:5854-0:7632:242","b:0:727-0:7632:242","b:1:2888-0:7632:242","b:1:2618-0:7632:242","b:1:2615-0:7632:242","b:1:3727-0:7632:242","b:1:2892-0:7632:242","b:1:2903-0:7632:242","b:1:2898-0:7632:242","0:5839","0:5597","0:668","0:5804","0:5878","0:5799","0:7700","0:5756","0:7635","0:5845","0:5876","0:680","0:5833","0:5849","0:5890","0:5830","0:5842","0:5827","0:5919","0:5951","0:5888","0:7705","0:5783","0:5789","0:5770","0:5892","0:5917","0:5913","0:5846","0:7675","0:7637","0:5767","0:5825","0:7641","0:5886","0:5795","0:5821","0:7660","0:5884","0:7665","0:5880","0:5759","0:5753","0:6334","0:5777","0:5823","0:5773","0:5763","0:5901","0:5882","0:5835","0:7639","0:7670","0:5595","0:7634","0:5810","0:5898","0:5179"]}}},"0:4644:4213":{"id":"0:4644:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2852,4],"end":[2854,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3340:5897":{"id":"0:3340:5897","crate_id":0,"name":"is_superset","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[767,4],"end":[772,5]},"visibility":"public","docs":"Returns `true` if the set is a superset of another,\ni.e., `self` contains at least all the elements in `other`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet sub = BTreeSet::from([1, 2]);\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6103:3104":{"id":"0:6103:3104","crate_id":0,"name":"into_inner","span":{"filename":"library/alloc/src/sync.rs","begin":[1078,4],"end":[1103,5]},"visibility":"public","docs":"Returns the inner value, if the `Arc` has exactly one strong reference.\n\nOtherwise, [`None`] is returned and the `Arc` is dropped.\n\nThis will succeed even if there are outstanding weak references.\n\nIf `Arc::into_inner` is called on every clone of this `Arc`,\nit is guaranteed that exactly one of the calls returns the inner value.\nThis means in particular that the inner value is not dropped.\n\n[`Arc::try_unwrap`] is conceptually similar to `Arc::into_inner`, but it\nis meant for different use-cases. If used as a direct replacement\nfor `Arc::into_inner` anyway, such as with the expression\n<code>[Arc::try_unwrap]\\(this).[ok][Result::ok]()</code>, then it does\n**not** give the same guarantee as described in the previous paragraph.\nFor more information, see the examples below and read the documentation\nof [`Arc::try_unwrap`].\n\n# Examples\n\nMinimal example demonstrating the guarantee that `Arc::into_inner` gives.\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(3);\nlet y = Arc::clone(&x);\n\n// Two threads calling `Arc::into_inner` on both clones of an `Arc`:\nlet x_thread = std::thread::spawn(|| Arc::into_inner(x));\nlet y_thread = std::thread::spawn(|| Arc::into_inner(y));\n\nlet x_inner_value = x_thread.join().unwrap();\nlet y_inner_value = y_thread.join().unwrap();\n\n// One of the threads is guaranteed to receive the inner value:\nassert!(matches!(\n    (x_inner_value, y_inner_value),\n    (None, Some(3)) | (Some(3), None)\n));\n// The result could also be `(None, None)` if the threads called\n// `Arc::try_unwrap(x).ok()` and `Arc::try_unwrap(y).ok()` instead.\n```\n\nA more practical example demonstrating the need for `Arc::into_inner`:\n```\nuse std::sync::Arc;\n\n// Definition of a simple singly linked list using `Arc`:\n#[derive(Clone)]\nstruct LinkedList<T>(Option<Arc<Node<T>>>);\nstruct Node<T>(T, Option<Arc<Node<T>>>);\n\n// Dropping a long `LinkedList<T>` relying on the destructor of `Arc`\n// can cause a stack overflow. To prevent this, we can provide a\n// manual `Drop` implementation that does the destruction in a loop:\nimpl<T> Drop for LinkedList<T> {\n    fn drop(&mut self) {\n        let mut link = self.0.take();\n        while let Some(arc_node) = link.take() {\n            if let Some(Node(_value, next)) = Arc::into_inner(arc_node) {\n                link = next;\n            }\n        }\n    }\n}\n\n// Implementation of `new` and `push` omitted\nimpl<T> LinkedList<T> {\n    /* ... */\n#   fn new() -> Self {\n#       LinkedList(None)\n#   }\n#   fn push(&mut self, x: T) {\n#       self.0 = Some(Arc::new(Node(x, self.0.take())));\n#   }\n}\n\n// The following code could have still caused a stack overflow\n// despite the manual `Drop` impl if that `Drop` impl had used\n// `Arc::try_unwrap(arc).ok()` instead of `Arc::into_inner(arc)`.\n\n// Create a long list and clone it\nlet mut x = LinkedList::new();\nfor i in 0..100000 {\n    x.push(i); // Adds i to the front of x\n}\nlet y = x.clone();\n\n// Drop the clones in parallel\nlet x_thread = std::thread::spawn(|| drop(x));\nlet y_thread = std::thread::spawn(|| drop(y));\nx_thread.join().unwrap();\ny_thread.join().unwrap();\n```","links":{"Result::ok":"1:9536:4592","Arc::try_unwrap":"0:6102:8122","`None`":"1:41519:190","`Arc::try_unwrap`":"0:6102:8122"},"attrs":["#[inline]","#[stable(feature = \"arc_into_inner\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7472:4175":{"id":"a:1:41611:4468-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4667-0:826:101":{"id":"0:4667-0:826:101","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[33,0],"end":[33,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"binary_heap::BinaryHeap","name":"BinaryHeap","id":"0:826:101","glob":false}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2023,0],"end":[2027,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:32083:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FnMut","id":"1:3355:140","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:565:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5251":{"id":"0:5251","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2922,0],"end":[3232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5254:334","0:5255:3225","0:5256:8583","0:5257:2710","0:5258:8595","0:5259:8123","0:5260:8248","0:5262:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4551:1415":{"id":"0:4551:1415","crate_id":0,"name":"rotate_left","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2348,4],"end":[2356,5]},"visibility":"public","docs":"Rotates the double-ended queue `n` places to the left.\n\nEquivalently,\n- Rotates item `n` into the first position.\n- Pops the first `n` items and pushes them to the end.\n- Rotates `len() - n` places to the right.\n\n# Panics\n\nIf `n` is greater than `len()`. Note that `n == len()`\ndoes _not_ panic and is a no-op rotation.\n\n# Complexity\n\nTakes `*O*(min(n, len() - n))` time and no extra space.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = (0..10).collect();\n\nbuf.rotate_left(3);\nassert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);\n\nfor i in 1..10 {\n    assert_eq!(i * 3 % 10, buf[0]);\n    buf.rotate_left(3);\n}\nassert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```","links":{},"attrs":["#[stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1842,0],"end":[1900,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:489:3409","0:491:3411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[361,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"C"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"generic":"C"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:765:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7964:678":{"id":"0:7964:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[35,0],"end":[35,109]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5738:9706":{"id":"0:5738:9706","crate_id":0,"name":"into_boxed_str","span":{"filename":"library/alloc/src/string.rs","begin":[1960,4],"end":[1963,5]},"visibility":"public","docs":"Converts this `String` into a <code>[Box]<[str]></code>.\n\nThis will drop any excess capacity.\n\n[str]: prim@str \"str\"\n\n# Examples\n\n```\nlet s = String::from(\"hello\");\n\nlet b = s.into_boxed_str();\n```","links":{"prim@str":"1:52084:1672","Box":"0:295:2399"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6357":{"id":"0:6357","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3511,0],"end":[3553,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6359:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7976":{"id":"0:7976","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[37,0],"end":[37,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7982:678","0:7984:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:322:3104":{"id":"0:322:3104","crate_id":0,"name":"into_inner","span":{"filename":"library/alloc/src/boxed.rs","begin":[606,4],"end":[608,5]},"visibility":"public","docs":"Consumes the `Box`, returning the wrapped value.\n\n# Examples\n\n```\n#![feature(box_into_inner)]\n\nlet c = Box::new(5);\n\nassert_eq!(Box::into_inner(c), 5);\n```","links":{},"attrs":["#[unstable(feature = \"box_into_inner\", issue = \"80437\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7651":{"id":"0:7651","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[402,16],"end":[402,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7652:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4602":{"id":"0:4602","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2777,0],"end":[2782,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3387:6395","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4605:918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5164":{"id":"0:5164","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2468,0],"end":[2485,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5166:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1880:4798":{"id":"0:1880:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1990,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6070":{"id":"0:6070","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[379,0],"end":[683,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:6072:1153","0:6073:8067","0:6075:2330","0:6077:3044","0:6079:1263","0:6080:10015","0:6081:3058","0:6082:3064","0:6084:3069"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5551-1:43678:8930":{"id":"0:5551-1:43678:8930","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[40,20],"end":[40,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::EscapeDebug","name":"EscapeDebug","id":"1:43678:8930","glob":false}}},"0:7219":{"id":"0:7219","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2865,0],"end":[2870,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_on_unimplemented(message =\n\"vector indices are of type `usize` or ranges of `usize`\", label =\n\"vector indices are of type `usize` or ranges of `usize`\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3387:6395","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7223:918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3411":{"id":"0:3411","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1297,0],"end":[1312,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3416:172","0:3417:1167","0:3420:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4815":{"id":"0:4815","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1013,0],"end":[1025,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4816:3355","0:4817:3587","0:4818:3595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7665":{"id":"0:7665","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2345,0],"end":[2345,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:7668:678","0:7669:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6089:311":{"id":"0:6089:311","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/sync.rs","begin":[693,4],"end":[695,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.\n\nNote: this is an associated function, which means that you have\nto call it as `Arc::allocator(&a)` instead of `a.allocator()`. This\nis so that there is no conflict with a method on the inner type.","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3397:4776":{"id":"0:3397:4776","crate_id":0,"name":"ExtractIf","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1270,0],"end":[1283,1]},"visibility":"public","docs":"An iterator produced by calling `extract_if` on BTreeSet.","links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]","#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:3146:11953-0:3397:4776","a:1:32053:3459-0:3397:4776","a:1:3111:246-0:3397:4776","a:1:31996:236-0:3397:4776","a:1:41612:4469-0:3397:4776","a:1:41611:4468-0:3397:4776","b:1:8171-0:3397:4776","b:1:2888-0:3397:4776","b:1:2618-0:3397:4776","b:1:2615-0:3397:4776","b:1:3727-0:3397:4776","b:1:2892-0:3397:4776","b:1:2903-0:3397:4776","b:1:2898-0:3397:4776","0:3421","0:3405","0:3411"]}}},"a:1:41611:4468-0:7730:10536":{"id":"a:1:41611:4468-0:7730:10536","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Splice","id":"0:7730:10536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3447":{"id":"0:3447","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1378,0],"end":[1400,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"1:33798:5742","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3450:198","0:3451:401"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:826:101":{"id":"a:1:31996:236-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1724,0],"end":[1781,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:477:3409","0:479:3411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3487":{"id":"0:3487","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1512,0],"end":[1522,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3490:172","0:3491:1167","0:3493:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4321":{"id":"0:4321","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[33,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4323:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6279":{"id":"0:6279","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3098,0],"end":[3141,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6282:678","0:6283:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6291:829":{"id":"0:6291:829","crate_id":0,"name":"ge","span":{"filename":"library/alloc/src/sync.rs","begin":[3227,4],"end":[3229,5]},"visibility":"default","docs":"'Greater than or equal to' comparison for two `Arc`s.\n\nThe two are compared by calling `>=` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five >= Arc::new(5));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6230:2669":{"id":"0:6230:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/sync.rs","begin":[2589,4],"end":[2596,5]},"visibility":"public","docs":"Constructs a new `Weak<T, A>`, without allocating any memory, technically in the provided\nallocator.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Weak;\nuse std::alloc::System;\n\nlet empty: Weak<i64, _> = Weak::new_in(System);\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:41519:190","Weak::upgrade":"0:6247:8595"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7191":{"id":"0:7191","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2783,0],"end":[2790,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7194:248","0:7195:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7553:7100":{"id":"b:1:3727-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4817:3587":{"id":"0:4817:3587","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1016,4],"end":[1018,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3500:3437":{"id":"0:3500:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1540,4],"end":[1542,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:765:678":{"id":"0:765:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/borrow.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"generic":"C"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4771:810":{"id":"0:4771:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[770,4],"end":[773,5]},"visibility":"default","docs":"Converts a `&CStr` into a `Box<CStr>`,\nby copying the contents into a newly allocated [`Box`].","links":{"`Box`":"0:295:2399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6645":{"id":"0:6645","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[58,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6648:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1368":{"id":"0:1368","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[122,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1373:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4260":{"id":"0:4260","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[179,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4263:3437","0:4264:7003","0:4265:7005","0:4282:7004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4796:810":{"id":"0:4796:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[895,4],"end":[898,5]},"visibility":"default","docs":"Converts a [`CString`] into an <code>[Rc]<[CStr]></code> by moving the [`CString`]\ndata into a new [`Rc`] buffer.","links":{"Rc":"0:4925:216","CStr":"1:40050:106","`Rc`":"0:4925:216","`CString`":"0:7553:7100"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4180:3437":{"id":"0:4180:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[107,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5631:2403":{"id":"0:5631:2403","crate_id":0,"name":"string","span":{"filename":"library/alloc/src/string.rs","begin":[1,0],"end":[3048,1]},"visibility":"public","docs":"A UTF-8–encoded, growable string.\n\nThis module contains the [`String`] type, the [`ToString`] trait for\nconverting to strings, and several error types that may result from\nworking with [`String`]s.\n\n# Examples\n\nThere are multiple ways to create a new [`String`] from a string literal:\n\n```\nlet s = \"Hello\".to_string();\n\nlet s = String::from(\"world\");\nlet s: String = \"also this\".into();\n```\n\nYou can create a new [`String`] from an existing one by concatenating with\n`+`:\n\n```\nlet s = \"Hello\".to_string();\n\nlet message = s + \" world!\";\n```\n\nIf you have a vector of valid UTF-8 bytes, you can make a [`String`] out of\nit. You can do the reverse too.\n\n```\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n\nlet bytes = sparkle_heart.into_bytes();\n\nassert_eq!(bytes, [240, 159, 146, 150]);\n```","links":{"`ToString`":"0:5852:250","`String`":"0:7632:242"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:7632:242","0:7645:9281","0:7655:9289","0:5848:9778","0:5852:250","0:5922:4150"],"is_stripped":false}}},"b:1:2898-0:6681:4175":{"id":"b:1:2898-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:7538:2621":{"id":"b:1:2903-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3544:1167":{"id":"0:3544:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1650,4],"end":[1675,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5386-1:11373:8723":{"id":"0:5386-1:11373:8723","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[69,31],"end":[69,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RSplitNMut","name":"RSplitNMut","id":"1:11373:8723","glob":false}}},"0:1881:2785":{"id":"0:1881:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1997,4],"end":[2002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4120":{"id":"0:4120","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[237,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4123:172","0:4124:1167","0:4125:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5946:3429":{"id":"0:5946:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/string.rs","begin":[3012,4],"end":[3014,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6134:334":{"id":"0:6134:334","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/sync.rs","begin":[1510,4],"end":[1517,5]},"visibility":"public","docs":"Provides a raw pointer to the data.\n\nThe counts are not affected in any way and the `Arc` is not consumed. The pointer is valid for\nas long as there are strong counts in the `Arc`.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(\"hello\".to_owned());\nlet y = Arc::clone(&x);\nlet x_ptr = Arc::as_ptr(&x);\nassert_eq!(x_ptr, Arc::as_ptr(&y));\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]","#[rustc_never_returns_null_ptr]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4810:7287":{"id":"0:4810:7287","crate_id":0,"name":"utf8_error","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[993,4],"end":[995,5]},"visibility":"public","docs":"Access the underlying UTF-8 error that was the cause of this error.","links":{},"attrs":["#[must_use]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Utf8Error","id":"1:43325:7107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3711:3440":{"id":"0:3711:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[632,4],"end":[634,5]},"visibility":"public","docs":"Returns `true` if the `LinkedList` is empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert!(dl.is_empty());\n\ndl.push_front(\"foo\");\nassert!(!dl.is_empty());\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:3271:5793":{"id":"b:1:8171-0:3271:5793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:4791":{"id":"0:4791","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[868,0],"end":[876,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::sync::Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4792:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6637":{"id":"0:6637","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[32,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6640:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1490:780":{"id":"0:1490:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[398,4],"end":[401,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3366:3440":{"id":"0:3366:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1183,4],"end":[1185,5]},"visibility":"public","docs":"Returns `true` if the set contains no elements.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7159":{"id":"0:7159","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2603,0],"end":[2646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7164:11314"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13435:163":{"id":"1:13435:163","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"0:7709:1135":{"id":"0:7709:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2352,0],"end":[2352,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:826:101":{"id":"b:1:3727-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:857:3924":{"id":"0:857:3924","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[368,4],"end":[379,5]},"visibility":"public","docs":"Removes the peeked value from the heap and returns it.","links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1997":{"id":"0:1997","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2224,0],"end":[2236,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:2000:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1629:4502":{"id":"0:1629:4502","crate_id":0,"name":"range","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1205,4],"end":[1216,5]},"visibility":"public","docs":"Constructs a double-ended iterator over a sub-range of elements in the map.\nThe simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n`range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\nrange from 4 to 10.\n\n# Panics\n\nPanics if range `start > end`.\nPanics if range `start == end` and both bounds are `Excluded`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::ops::Bound::Included;\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"a\");\nmap.insert(5, \"b\");\nmap.insert(8, \"c\");\nfor (&key, &value) in map.range((Included(&4), Included(&8))) {\n    println!(\"{key}: {value}\");\n}\nassert_eq!(Some((&5, &\"b\")), map.range(4..).next());\n```","links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3481:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:1536:4534":{"id":"b:1:3727-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3755:172":{"id":"0:3755:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1191,4],"end":[1191,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:473:136":{"id":"0:473:136","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/boxed.rs","begin":[1694,4],"end":[1694,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:0:727-0:7472:4175":{"id":"b:0:727-0:7472:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4234:557":{"id":"0:4234:557","crate_id":0,"name":"count","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[70,4],"end":[72,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5106":{"id":"0:5106","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2209,0],"end":[2224,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5108:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6572:11524":{"id":"0:6572:11524","crate_id":0,"name":"keep_rest","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[89,4],"end":[136,5]},"visibility":"public","docs":"Keep unyielded elements in the source `Vec`.\n\n# Examples\n\n```\n#![feature(drain_keep_rest)]\n\nlet mut vec = vec!['a', 'b', 'c'];\nlet mut drain = vec.drain(..);\n\nassert_eq!(drain.next().unwrap(), 'a');\n\n// This call keeps 'b' and 'c' in the vec.\ndrain.keep_rest();\n\n// If we wouldn't call `keep_rest()`,\n// `vec` would be empty.\nassert_eq!(vec, ['b', 'c']);\n```","links":{},"attrs":["#[unstable(feature = \"drain_keep_rest\", issue = \"101122\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6588:1167":{"id":"0:6588:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[156,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13201:11824":{"id":"1:13201:11824","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12812:2367","`DoubleEndedIterator`":"1:8205:129","prim@char":"1:52078:458","str::rmatches":"1:13204:29483"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43583:8938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:3238:4057":{"id":"b:1:2618-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7655:9289":{"id":"0:7655:9289","crate_id":0,"name":"FromUtf16Error","span":{"filename":"library/alloc/src/string.rs","begin":[425,0],"end":[425,30]},"visibility":"public","docs":"A possible error value when converting a `String` from a UTF-16 byte slice.\n\nThis type is the error type for the [`from_utf16`] method on [`String`].\n\n[`from_utf16`]: String::from_utf16\n\n# Examples\n\n```\n// 𝄞mu<invalid>ic\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0xD800, 0x0069, 0x0063];\n\nassert!(String::from_utf16(v).is_err());\n```","links":{"String::from_utf16":"0:5672:9382","`String`":"0:7632:242"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3146:11953-0:7655:9289","a:1:32053:3459-0:7655:9289","a:1:3111:246-0:7655:9289","a:1:31996:236-0:7655:9289","a:1:41612:4469-0:7655:9289","a:1:41611:4468-0:7655:9289","b:0:5854-0:7655:9289","b:1:2888-0:7655:9289","b:1:2618-0:7655:9289","b:1:2615-0:7655:9289","b:1:3727-0:7655:9289","b:1:2892-0:7655:9289","b:1:2903-0:7655:9289","b:1:2898-0:7655:9289","0:5751","0:7658","0:5747"]}}},"0:5763":{"id":"0:5763","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2127,0],"end":[2133,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5765:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:7402:4039":{"id":"b:1:2903-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:1527:4528":{"id":"b:1:2903-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1513":{"id":"0:1513","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[453,0],"end":[467,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1517:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4126":{"id":"0:4126","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[259,0],"end":[269,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4129:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6402:10439":{"id":"0:6402:10439","crate_id":0,"name":"Wake","span":{"filename":"library/alloc/src/task.rs","begin":[90,0],"end":[106,1]},"visibility":"public","docs":"The implementation of waking a task on an executor.\n\nThis trait can be used to create a [`Waker`]. An executor can define an\nimplementation of this trait, and use that to construct a [`Waker`] to pass\nto the tasks that are executed on that executor.\n\nThis trait is a memory-safe and ergonomic alternative to constructing a\n[`RawWaker`]. It supports the common executor design in which the data used\nto wake up a task is stored in an [`Arc`]. Some executors (especially\nthose for embedded systems) cannot use this API, which is why [`RawWaker`]\nexists as an alternative for those systems.\n\nTo construct a [`Waker`] from some type `W` implementing this trait,\nwrap it in an [`Arc<W>`](Arc) and call `Waker::from()` on that.\nIt is also possible to convert to [`RawWaker`] in the same way.\n\n<!-- Ideally we'd link to the `From` impl, but rustdoc doesn't generate any page for it within\n     `alloc` because `alloc` neither defines nor re-exports `From` or `Waker`, and we can't\n     link ../../std/task/struct.Waker.html#impl-From%3CArc%3CW,+Global%3E%3E-for-Waker\n     without getting a link-checking error in CI. -->\n\n# Examples\n\nA basic `block_on` function that takes a future and runs it to completion on\nthe current thread.\n\n**Note:** This example trades correctness for simplicity. In order to prevent\ndeadlocks, production-grade implementations will also need to handle\nintermediate calls to `thread::unpark` as well as nested invocations.\n\n```rust\nuse std::future::Future;\nuse std::sync::Arc;\nuse std::task::{Context, Poll, Wake};\nuse std::thread::{self, Thread};\nuse core::pin::pin;\n\n/// A waker that wakes up the current thread when called.\nstruct ThreadWaker(Thread);\n\nimpl Wake for ThreadWaker {\n    fn wake(self: Arc<Self>) {\n        self.0.unpark();\n    }\n}\n\n/// Run a future to completion on the current thread.\nfn block_on<T>(fut: impl Future<Output = T>) -> T {\n    // Pin the future so it can be polled.\n    let mut fut = pin!(fut);\n\n    // Create a new context to be passed to the future.\n    let t = thread::current();\n    let waker = Arc::new(ThreadWaker(t)).into();\n    let mut cx = Context::from_waker(&waker);\n\n    // Run the future to completion.\n    loop {\n        match fut.as_mut().poll(&mut cx) {\n            Poll::Ready(res) => return res,\n            Poll::Pending => thread::park(),\n        }\n    }\n}\n\nblock_on(async {\n    println!(\"Hi from inside a future!\");\n});\n```","links":{"`RawWaker`":"1:44348:10391","Arc":"0:6007:71","`Waker`":"1:13644:10393","`Arc`":"0:6007:71"},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:6403:10441","0:6404:10447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:0:727-0:732:118":{"id":"b:0:727-0:732:118","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:2089:4918":{"id":"a:1:41611:4468-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5142:829":{"id":"0:5142:829","crate_id":0,"name":"ge","span":{"filename":"library/alloc/src/rc.rs","begin":[2411,4],"end":[2413,5]},"visibility":"default","docs":"'Greater than or equal to' comparison for two `Rc`s.\n\nThe two are compared by calling `>=` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five >= Rc::new(5));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:307":{"id":"0:110:307","crate_id":0,"name":"alloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[94,0],"end":[102,1]},"visibility":"public","docs":"Allocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::alloc`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `alloc` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::alloc`].\n\n# Examples\n\n```\nuse std::alloc::{alloc, dealloc, handle_alloc_error, Layout};\n\nunsafe {\n    let layout = Layout::new::<u16>();\n    let ptr = alloc(layout);\n    if ptr.is_null() {\n        handle_alloc_error(layout);\n    }\n\n    *(ptr as *mut u16) = 42;\n    assert_eq!(*(ptr as *mut u16), 42);\n\n    dealloc(ptr, layout);\n}\n```","links":{"`GlobalAlloc::alloc`":"1:13702:307","`Allocator`":"1:13756:2618","`Global`":"0:7363:2619"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[must_use = \"losing the pointer will leak memory\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["layout",{"resolved_path":{"name":"Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:4191:974":{"id":"0:4191:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[152,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4090":{"id":"0:4090","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[77,0],"end":[86,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4093:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4797":{"id":"0:4797","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[902,0],"end":[910,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::rc::Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::ffi::CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4798:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4759":{"id":"0:4759","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[721,0],"end":[725,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4760:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:7412:5026":{"id":"a:1:31996:236-0:7412:5026","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6528:651":{"id":"0:6528:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[55,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:218:3019":{"id":"b:1:2892-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7577:678":{"id":"0:7577:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,16],"end":[136,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:810":{"id":"0:424:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1462,4],"end":[1464,5]},"visibility":"default","docs":"Converts a `T` into a `Box<T>`\n\nThe conversion allocates on the heap and moves `t`\nfrom the stack into it.\n\n# Examples\n\n```rust\nlet x = 5;\nlet boxed = Box::new(5);\n\nassert_eq!(Box::from(x), boxed);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:7392:4150":{"id":"a:1:41612:4469-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:4423:264":{"id":"b:1:2888-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:1342:4372":{"id":"b:1:3727-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2011":{"id":"0:2011","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2254,0],"end":[2265,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2016:3569","0:2019:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:575:198":{"id":"0:575:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/boxed.rs","begin":[2038,4],"end":[2038,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"AsyncFnOnce","id":"1:3192:3006","args":{"angle_bracketed":{"args":[{"type":{"generic":"Args"}}],"bindings":[]}}}}}}}},"0:1916:3431":{"id":"0:1916:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2065,4],"end":[2067,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4869:2402":{"id":"0:4869:2402","crate_id":0,"name":"rc","span":{"filename":"library/alloc/src/rc.rs","begin":[1,0],"end":[3601,1]},"visibility":"public","docs":"Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\nCounted'.\n\nThe type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,\nallocated in the heap. Invoking [`clone`][clone] on [`Rc`] produces a new\npointer to the same allocation in the heap. When the last [`Rc`] pointer to a\ngiven allocation is destroyed, the value stored in that allocation (often\nreferred to as \"inner value\") is also dropped.\n\nShared references in Rust disallow mutation by default, and [`Rc`]\nis no exception: you cannot generally obtain a mutable reference to\nsomething inside an [`Rc`]. If you need mutability, put a [`Cell`]\nor [`RefCell`] inside the [`Rc`]; see [an example of mutability\ninside an `Rc`][mutability].\n\n[`Rc`] uses non-atomic reference counting. This means that overhead is very\nlow, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\ndoes not implement [`Send`]. As a result, the Rust compiler\nwill check *at compile time* that you are not sending [`Rc`]s between\nthreads. If you need multi-threaded, atomic reference counting, use\n[`sync::Arc`][arc].\n\nThe [`downgrade`][downgrade] method can be used to create a non-owning\n[`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d\nto an [`Rc`], but this will return [`None`] if the value stored in the allocation has\nalready been dropped. In other words, `Weak` pointers do not keep the value\ninside the allocation alive; however, they *do* keep the allocation\n(the backing store for the inner value) alive.\n\nA cycle between [`Rc`] pointers will never be deallocated. For this reason,\n[`Weak`] is used to break cycles. For example, a tree could have strong\n[`Rc`] pointers from parent nodes to children, and [`Weak`] pointers from\nchildren back to their parents.\n\n`Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\nso you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\nclashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated\nfunctions, called using [fully qualified syntax]:\n\n```\nuse std::rc::Rc;\n\nlet my_rc = Rc::new(());\nlet my_weak = Rc::downgrade(&my_rc);\n```\n\n`Rc<T>`'s implementations of traits like `Clone` may also be called using\nfully qualified syntax. Some people prefer to use fully qualified syntax,\nwhile others prefer using method-call syntax.\n\n```\nuse std::rc::Rc;\n\nlet rc = Rc::new(());\n// Method-call syntax\nlet rc2 = rc.clone();\n// Fully qualified syntax\nlet rc3 = Rc::clone(&rc);\n```\n\n[`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the inner value may have\nalready been dropped.\n\n# Cloning references\n\nCreating a new reference to the same allocation as an existing reference counted pointer\nis done using the `Clone` trait implemented for [`Rc<T>`][`Rc`] and [`Weak<T>`][`Weak`].\n\n```\nuse std::rc::Rc;\n\nlet foo = Rc::new(vec![1.0, 2.0, 3.0]);\n// The two syntaxes below are equivalent.\nlet a = foo.clone();\nlet b = Rc::clone(&foo);\n// a and b both point to the same memory location as foo.\n```\n\nThe `Rc::clone(&from)` syntax is the most idiomatic because it conveys more explicitly\nthe meaning of the code. In the example above, this syntax makes it easier to see that\nthis code is creating a new reference rather than copying the whole content of foo.\n\n# Examples\n\nConsider a scenario where a set of `Gadget`s are owned by a given `Owner`.\nWe want to have our `Gadget`s point to their `Owner`. We can't do this with\nunique ownership, because more than one gadget may belong to the same\n`Owner`. [`Rc`] allows us to share an `Owner` between multiple `Gadget`s,\nand have the `Owner` remain allocated as long as any `Gadget` points at it.\n\n```\nuse std::rc::Rc;\n\nstruct Owner {\n    name: String,\n    // ...other fields\n}\n\nstruct Gadget {\n    id: i32,\n    owner: Rc<Owner>,\n    // ...other fields\n}\n\nfn main() {\n    // Create a reference-counted `Owner`.\n    let gadget_owner: Rc<Owner> = Rc::new(\n        Owner {\n            name: \"Gadget Man\".to_string(),\n        }\n    );\n\n    // Create `Gadget`s belonging to `gadget_owner`. Cloning the `Rc<Owner>`\n    // gives us a new pointer to the same `Owner` allocation, incrementing\n    // the reference count in the process.\n    let gadget1 = Gadget {\n        id: 1,\n        owner: Rc::clone(&gadget_owner),\n    };\n    let gadget2 = Gadget {\n        id: 2,\n        owner: Rc::clone(&gadget_owner),\n    };\n\n    // Dispose of our local variable `gadget_owner`.\n    drop(gadget_owner);\n\n    // Despite dropping `gadget_owner`, we're still able to print out the name\n    // of the `Owner` of the `Gadget`s. This is because we've only dropped a\n    // single `Rc<Owner>`, not the `Owner` it points to. As long as there are\n    // other `Rc<Owner>` pointing at the same `Owner` allocation, it will remain\n    // live. The field projection `gadget1.owner.name` works because\n    // `Rc<Owner>` automatically dereferences to `Owner`.\n    println!(\"Gadget {} owned by {}\", gadget1.id, gadget1.owner.name);\n    println!(\"Gadget {} owned by {}\", gadget2.id, gadget2.owner.name);\n\n    // At the end of the function, `gadget1` and `gadget2` are destroyed, and\n    // with them the last counted references to our `Owner`. Gadget Man now\n    // gets destroyed as well.\n}\n```\n\nIf our requirements change, and we also need to be able to traverse from\n`Owner` to `Gadget`, we will run into problems. An [`Rc`] pointer from `Owner`\nto `Gadget` introduces a cycle. This means that their\nreference counts can never reach 0, and the allocation will never be destroyed:\na memory leak. In order to get around this, we can use [`Weak`]\npointers.\n\nRust actually makes it somewhat difficult to produce this loop in the first\nplace. In order to end up with two values that point at each other, one of\nthem needs to be mutable. This is difficult because [`Rc`] enforces\nmemory safety by only giving out shared references to the value it wraps,\nand these don't allow direct mutation. We need to wrap the part of the\nvalue we wish to mutate in a [`RefCell`], which provides *interior\nmutability*: a method to achieve mutability through a shared reference.\n[`RefCell`] enforces Rust's borrowing rules at runtime.\n\n```\nuse std::rc::Rc;\nuse std::rc::Weak;\nuse std::cell::RefCell;\n\nstruct Owner {\n    name: String,\n    gadgets: RefCell<Vec<Weak<Gadget>>>,\n    // ...other fields\n}\n\nstruct Gadget {\n    id: i32,\n    owner: Rc<Owner>,\n    // ...other fields\n}\n\nfn main() {\n    // Create a reference-counted `Owner`. Note that we've put the `Owner`'s\n    // vector of `Gadget`s inside a `RefCell` so that we can mutate it through\n    // a shared reference.\n    let gadget_owner: Rc<Owner> = Rc::new(\n        Owner {\n            name: \"Gadget Man\".to_string(),\n            gadgets: RefCell::new(vec![]),\n        }\n    );\n\n    // Create `Gadget`s belonging to `gadget_owner`, as before.\n    let gadget1 = Rc::new(\n        Gadget {\n            id: 1,\n            owner: Rc::clone(&gadget_owner),\n        }\n    );\n    let gadget2 = Rc::new(\n        Gadget {\n            id: 2,\n            owner: Rc::clone(&gadget_owner),\n        }\n    );\n\n    // Add the `Gadget`s to their `Owner`.\n    {\n        let mut gadgets = gadget_owner.gadgets.borrow_mut();\n        gadgets.push(Rc::downgrade(&gadget1));\n        gadgets.push(Rc::downgrade(&gadget2));\n\n        // `RefCell` dynamic borrow ends here.\n    }\n\n    // Iterate over our `Gadget`s, printing their details out.\n    for gadget_weak in gadget_owner.gadgets.borrow().iter() {\n\n        // `gadget_weak` is a `Weak<Gadget>`. Since `Weak` pointers can't\n        // guarantee the allocation still exists, we need to call\n        // `upgrade`, which returns an `Option<Rc<Gadget>>`.\n        //\n        // In this case we know the allocation still exists, so we simply\n        // `unwrap` the `Option`. In a more complicated program, you might\n        // need graceful error handling for a `None` result.\n\n        let gadget = gadget_weak.upgrade().unwrap();\n        println!(\"Gadget {} owned by {}\", gadget.id, gadget.owner.name);\n    }\n\n    // At the end of the function, `gadget_owner`, `gadget1`, and `gadget2`\n    // are destroyed. There are now no strong (`Rc`) pointers to the\n    // gadgets, so they are destroyed. This zeroes the reference count on\n    // Gadget Man, so he gets destroyed as well.\n}\n```\n\n[clone]: Clone::clone\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n[arc]: crate::sync::Arc\n[`Deref`]: core::ops::Deref\n[downgrade]: Rc::downgrade\n[upgrade]: Weak::upgrade\n[mutability]: core::cell#introducing-mutability-inside-of-something-immutable\n[fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name","links":{"core::cell::RefCell":"1:4613:220","`None`":"1:41519:190","core::ops::Deref":"1:3319:124","Clone::clone":"1:2632:462","core::cell#introducing-mutability-inside-of-something-immutable":"1:4432:8011","Rc::downgrade":"0:5024:8240","`Weak`":"0:5217:8069","Weak::upgrade":"0:5258:8595","crate::sync::Arc":"0:6007:71","`Rc`":"0:4925:216","`Send`":"1:31996:236","core::cell::Cell":"1:4543:8012"},"attrs":["#[cfg(not(no_rc))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:4925:216","0:5217:8069","0:7621:8665"],"is_stripped":false}}},"0:5699:2760":{"id":"0:5699:2760","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/string.rs","begin":[1250,4],"end":[1252,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` bytes more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &str) -> Result<String, TryReserveError> {\n    let mut output = String::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.push_str(data);\n\n    Ok(output)\n}\n# process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7444:209":{"id":"b:1:2898-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:7714:4776":{"id":"a:1:41612:4469-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:1577:4553":{"id":"b:1:3727-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7226:813":{"id":"0:7226:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2920,4],"end":[2922,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5317:610":{"id":"0:5317:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/rc.rs","begin":[3570,4],"end":[3573,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3733:6255":{"id":"0:3733:6255","crate_id":0,"name":"retain_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1112,4],"end":[1124,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\n#![feature(linked_list_retain)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nd.retain_mut(|x| if *x % 2 == 0 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(d.pop_front(), Some(3));\nassert_eq!(d.pop_front(), None);\n```","links":{},"attrs":["#[unstable(feature = \"linked_list_retain\", issue = \"114135\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:5217:8069":{"id":"b:1:3727-0:5217:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1601:3917":{"id":"0:1601:3917","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[696,4],"end":[706,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:647:1272":{"id":"0:647:1272","crate_id":0,"name":"poll_next","span":{"filename":"library/alloc/src/boxed.rs","begin":[2185,4],"end":[2187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"1:13626:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"1:44315:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:4383:2999","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1417:4498":{"id":"0:1417:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[529,4],"end":[531,5]},"visibility":"public","docs":"Sets the value of the entry with the `OccupiedEntry`'s key,\nand returns the entry's old value.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\nassert_eq!(map[\"poneyland\"], 15);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push\", \"put\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7700":{"id":"0:7700","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2352,0],"end":[2352,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:7703:678","0:7704:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5622:8862":{"id":"0:5622:8862","crate_id":0,"name":"to_ascii_uppercase","span":{"filename":"library/alloc/src/str.rs","begin":[559,4],"end":[563,5]},"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13247:8863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4539:4498":{"id":"0:4539:4498","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1794,4],"end":[1820,5]},"visibility":"public","docs":"Inserts an element at `index` within the deque, shifting all elements\nwith indices greater than or equal to `index` towards the back.\n\nElement at index 0 is the front of the queue.\n\n# Panics\n\nPanics if `index` is greater than deque's length\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut vec_deque = VecDeque::new();\nvec_deque.push_back('a');\nvec_deque.push_back('b');\nvec_deque.push_back('c');\nassert_eq!(vec_deque, &['a', 'b', 'c']);\n\nvec_deque.insert(1, 'd');\nassert_eq!(vec_deque, &['a', 'd', 'b', 'c']);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7679:1135":{"id":"0:7679:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2346,0],"end":[2346,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5906:813":{"id":"0:5906:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2870,4],"end":[2872,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["it",{"generic":"I"}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3729:4222":{"id":"0:3729:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1011,4],"end":[1031,5]},"visibility":"public","docs":"Removes the element at the given index and returns it.\n\nThis operation should compute in *O*(*n*) time.\n\n# Panics\nPanics if at >= len\n\n# Examples\n\n```\n#![feature(linked_list_remove)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nassert_eq!(d.remove(1), 2);\nassert_eq!(d.remove(0), 3);\nassert_eq!(d.remove(0), 1);\n```","links":{},"attrs":["#[unstable(feature = \"linked_list_remove\", issue = \"69210\")]","#[rustc_confusables(\"delete\", \"take\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13247:8863":{"id":"1:13247:8863","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3394:172":{"id":"0:3394:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1259,4],"end":[1259,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:0:727-0:7538:2621":{"id":"b:0:727-0:7538:2621","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:7538:2621":{"id":"a:1:32053:3459-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[133,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:243:248","0:244:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3817:780":{"id":"0:3817:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1376,4],"end":[1378,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5324:1638":{"id":"0:5324:1638","crate_id":0,"name":"slice","span":{"filename":"library/alloc/src/slice.rs","begin":[1,0],"end":[888,1]},"visibility":"public","docs":"Utilities for the slice primitive type.\n\n*[See also the slice primitive type](slice).*\n\nMost of the structs in this module are iterator types which can only be created\nusing a certain function. For example, `slice.iter()` yields an [`Iter`].\n\nA few functions are provided to create a slice from a value reference\nor from a raw pointer.","links":{"`Iter`":"1:11048:4057","slice":"1:52083:1638"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:5343-1:43251:8686","0:5344-1:43264:8687","0:5345-1:43225:8689","0:5346-1:42970:8691","0:5347-1:10903:238","0:5349-1:11940:8694","0:5350-1:11938:8693","0:5352-1:11945:8696","0:5353-1:11942:8697","0:5355-1:11932:3544","0:5356-1:11935:3545","0:5358-1:10984:4502","0:5359-1:10988:8699","0:5361-1:11858:8702","0:5362-1:11891:8703","0:5364-1:43185:8704","0:5365-1:43176:8705","0:5367-1:43204:8708","0:5368-1:43214:8709","0:5370-1:43194:8710","0:5371-1:11097:8711","0:5372-1:11179:8712","0:5374-1:11048:4057","0:5375-1:11072:4509","0:5377-1:43277:8714","0:5378-1:43296:8715","0:5379-1:43306:8716","0:5380-1:43286:8717","0:5382-1:11252:8720","0:5383-1:11290:8721","0:5385-1:11345:8722","0:5386-1:11373:8723","0:5387-1:11331:8724","0:5388-1:11359:8725","0:5390-1:11140:8727","0:5391-1:11217:8728","0:5453:8837","0:5457:8847"],"is_stripped":false}}},"0:6129:8213":{"id":"0:6129:8213","crate_id":0,"name":"decrement_strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1462,4],"end":[1464,5]},"visibility":"public","docs":"Decrements the strong reference count on the `Arc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Arc::into_raw`, and the\nassociated `Arc` instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method. This method can be used to release the final\n`Arc` and backing storage, but **should not** be called after the final `Arc` has been\nreleased.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nunsafe {\n    let ptr = Arc::into_raw(five);\n    Arc::increment_strong_count(ptr);\n\n    // Those assertions are deterministic because we haven't shared\n    // the `Arc` between threads.\n    let five = Arc::from_raw(ptr);\n    assert_eq!(2, Arc::strong_count(&five));\n    Arc::decrement_strong_count(ptr);\n    assert_eq!(1, Arc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:3123":{"id":"0:327:3123","crate_id":0,"name":"try_new_uninit_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[686,4],"end":[697,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents. Returns an error if\nthe allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet mut values = Box::<[u32]>::try_new_uninit_slice(3)?;\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3]);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1661:4798":{"id":"0:1661:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1515,4],"end":[1520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3359:4749":{"id":"0:3359:4749","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1076,4],"end":[1082,5]},"visibility":"public","docs":"Splits the collection into two at the value. Returns a new collection\nwith all elements greater than or equal to the value.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\na.insert(3);\na.insert(17);\na.insert(41);\n\nlet b = a.split_off(&3);\n\nassert_eq!(a.len(), 2);\nassert_eq!(b.len(), 3);\n\nassert!(a.contains(&1));\nassert!(a.contains(&2));\n\nassert!(b.contains(&3));\nassert!(b.contains(&17));\nassert!(b.contains(&41));\n```","links":{},"attrs":["#[stable(feature = \"btree_split_off\", since = \"1.11.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:3245:5783":{"id":"a:1:32053:3459-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4853-1:9946:7840":{"id":"0:4853-1:9946:7840","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[588,64],"end":[588,74]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::DebugTuple","name":"DebugTuple","id":"1:9946:7840","glob":false}}},"0:5370-1:43194:8710":{"id":"0:5370-1:43194:8710","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[61,22],"end":[61,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ChunksMut","name":"ChunksMut","id":"1:43194:8710","glob":false}}},"a:1:32053:3459-0:3209:100":{"id":"a:1:32053:3459-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7147:1965":{"id":"0:7147:1965","crate_id":0,"name":"leak","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2367,4],"end":[2373,5]},"visibility":"public","docs":"Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n`&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n`'a`. If the type has only static references, or none at all, then this\nmay be chosen to be `'static`.\n\nAs of Rust 1.57, this method does not reallocate or shrink the `Vec`,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.\n\nThis function is mainly useful for data that lives for the remainder of\nthe program's life. Dropping the returned reference will cause a memory\nleak.\n\n# Examples\n\nSimple usage:\n\n```\nlet x = vec![1, 2, 3];\nlet static_ref: &'static mut [usize] = x.leak();\nstatic_ref[0] += 1;\nassert_eq!(static_ref, &[2, 2, 3]);\n```","links":{},"attrs":["#[stable(feature = \"vec_leak\", since = \"1.47.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5744:7287":{"id":"0:5744:7287","crate_id":0,"name":"utf8_error","span":{"filename":"library/alloc/src/string.rs","begin":[2058,4],"end":[2060,5]},"visibility":"public","docs":"Fetch a `Utf8Error` to get more details about the conversion failure.\n\nThe [`Utf8Error`] type provided by [`std::str`] represents an error that may\noccur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\nan analogue to `FromUtf8Error`. See its documentation for more details\non using it.\n\n[`std::str`]: core::str \"std::str\"\n[`&str`]: prim@str \"&str\"\n\n# Examples\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet error = String::from_utf8(bytes).unwrap_err().utf8_error();\n\n// the first byte is invalid here\nassert_eq!(1, error.valid_up_to());\n```","links":{"`Utf8Error`":"1:43325:7107","prim@str":"1:52084:1672","core::str":"1:12353:1672","`u8`":"1:52095:1800"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Utf8Error","id":"1:43325:7107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4800:60":{"id":"0:4800:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[915,4],"end":[918,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2891:2716":{"id":"1:2891:2716","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2865:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:836":{"id":"0:836","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[303,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:839:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:667:810":{"id":"0:667:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2306,4],"end":[2308,5]},"visibility":"default","docs":"Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\ndyn [`Error`] + [`Send`] + [`Sync`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\nuse std::mem;\n\n#[derive(Debug)]\nstruct AnError;\n\nimpl fmt::Display for AnError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"An error\")\n    }\n}\n\nimpl Error for AnError {}\n\nunsafe impl Send for AnError {}\n\nunsafe impl Sync for AnError {}\n\nlet an_error = AnError;\nassert!(0 == mem::size_of_val(&an_error));\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Sync`":"1:3111:246","`Send`":"1:31996:236","`Error`":"1:2951:136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["err",{"generic":"E"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1595:4152":{"id":"0:1595:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[648,4],"end":[656,5]},"visibility":"public","docs":"Clears the map, removing all elements.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.clear();\nassert!(a.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4480":{"id":"0:4480","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[528,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4482:1153","0:4483:2679","0:4484:2384"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5193":{"id":"0:5193","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2642,0],"end":[2658,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_str\", since = \"1.62.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"items":["0:5194:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4834:3301":{"id":"0:4834:3301","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1141,4],"end":[1143,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6313:60":{"id":"0:6313:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/sync.rs","begin":[3288,4],"end":[3290,5]},"visibility":"default","docs":"Creates a new `Arc<T>`, with the `Default` value for `T`.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x: Arc<i32> = Default::default();\nassert_eq!(*x, 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1666":{"id":"0:1666","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1534,0],"end":[1543,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1670:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:7392:4150":{"id":"b:1:2618-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5729:9648":{"id":"0:5729:9648","crate_id":0,"name":"as_mut_vec","span":{"filename":"library/alloc/src/string.rs","begin":[1736,4],"end":[1738,5]},"visibility":"public","docs":"Returns a mutable reference to the contents of this `String`.\n\n# Safety\n\nThis function is unsafe because the returned `&mut Vec` allows writing\nbytes which are not valid UTF-8. If this constraint is violated, using\nthe original `String` after dropping the `&mut Vec` may violate memory\nsafety, as the rest of the standard library assumes that `String`s are\nvalid UTF-8.\n\n# Examples\n\n```\nlet mut s = String::from(\"hello\");\n\nunsafe {\n    let vec = s.as_mut_vec();\n    assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);\n\n    vec.reverse();\n}\nassert_eq!(s, \"olleh\");\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3173:3698":{"id":"0:3173:3698","crate_id":0,"name":"set","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1,0],"end":[1821,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:3209:100","0:3238:4057","0:7436:4175","0:7444:209","0:3245:5783","0:3271:5793","0:3279:5798","0:3305:5807","0:3397:4776"],"is_stripped":false}}},"0:5318":{"id":"0:5318","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3577,0],"end":[3584,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"unique_rc_arc\", issue = \"112566\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3332:3010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5320:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6202":{"id":"0:6202","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2116,0],"end":[2256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6205:8336","0:6206:8356"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6408":{"id":"0:6408","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/task.rs","begin":[121,0],"end":[128,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Wake","id":"0:6402:10439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"core::task::RawWaker","id":"1:44348:10391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6410:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4165:1167":{"id":"0:4165:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[36,4],"end":[49,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:29488":{"id":"1:13219:29488","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:577:363":{"id":"0:577:363","crate_id":0,"name":"async_call_once","span":{"filename":"library/alloc/src/boxed.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["args",{"generic":"Args"}]],"output":{"qualified_path":{"name":"CallOnceFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3192:3006","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}}},"0:3365:974":{"id":"0:3365:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1160,4],"end":[1162,5]},"visibility":"public","docs":"Returns the number of elements in the set.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4594:850":{"id":"0:4594:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2754,4],"end":[2763,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:826:101":{"id":"a:1:41611:4468-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:295:2399":{"id":"b:1:2618-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5368-1:43214:8709":{"id":"0:5368-1:43214:8709","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[59,35],"end":[59,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ChunksExactMut","name":"ChunksExactMut","id":"1:43214:8709","glob":false}}},"a:1:41611:4468-0:3792:4918":{"id":"a:1:41611:4468-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6690":{"id":"0:6690","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[64,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"vec_intoiter_debug\", since = \"1.13.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6693:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:7436:4175":{"id":"b:1:3727-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5441:2574":{"id":"0:5441:2574","crate_id":0,"name":"into_vec","span":{"filename":"library/alloc/src/slice.rs","begin":[461,4],"end":[464,5]},"visibility":"public","docs":"Converts `self` into a vector without clones or allocation.\n\nThe resulting vector can be converted back into a box via\n`Vec<T>`'s `into_boxed_slice` method.\n\n# Examples\n\n```\nlet s: Box<[i32]> = Box::new([10, 40, 30]);\nlet x = s.into_vec();\n// `s` cannot be used anymore because it has been converted into `x`.\n\nassert_eq!(x, vec![10, 40, 30]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1693,0],"end":[1722,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"boxed_array_try_from_vec\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:473:136","0:474:1755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:943:4057":{"id":"b:1:2888-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:7553:7100":{"id":"a:1:41611:4468-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:924:4149":{"id":"0:924:4149","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1322,4],"end":[1324,5]},"visibility":"public","docs":"Clears the binary heap, returning an iterator over the removed elements\nin arbitrary order. If the iterator is dropped before being fully\nconsumed, it drops the remaining elements in arbitrary order.\n\nThe returned iterator keeps a mutable borrow on the heap to optimize\nits implementation.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::from([1, 3]);\n\nassert!(!heap.is_empty());\n\nfor x in heap.drain() {\n    println!(\"{x}\");\n}\n\nassert!(heap.is_empty());\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:6039:8069":{"id":"b:1:2903-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:3635:181":{"id":"b:1:2898-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:43921:9744":{"id":"1:43921:9744","crate_id":1,"name":"is_contained_in","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7597:7097":{"id":"a:1:41611:4468-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7407":{"id":"0:7407","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1700,9],"end":[1700,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7411:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3960:678":{"id":"0:3960:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2094,4],"end":[2096,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411:3312":{"id":"0:411:3312","crate_id":0,"name":"write_u64","span":{"filename":"library/alloc/src/boxed.rs","begin":[1411,4],"end":[1413,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:2114:4932":{"id":"b:1:2888-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:3279:5798":{"id":"b:1:2615-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:967":{"id":"0:967","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1482,0],"end":[1482,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3442":{"id":"0:3442","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1353,0],"end":[1375,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"1:3162:5743","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:3445:198","0:3446:1689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:892:3980":{"id":"0:892:3980","crate_id":0,"name":"push","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[611,4],"end":[617,5]},"visibility":"public","docs":"Pushes an item onto the binary heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.push(3);\nheap.push(5);\nheap.push(1);\n\nassert_eq!(heap.len(), 3);\nassert_eq!(heap.peek(), Some(&5));\n```\n\n# Time complexity\n\nThe expected cost of `push`, averaged over every possible ordering of\nthe elements being pushed, and over a sufficiently large number of\npushes, is *O*(1). This is the most meaningful cost metric when pushing\nelements that are *not* already in any sorted pattern.\n\nThe time complexity degrades if elements are pushed in predominantly\nascending order. In the worst case, elements are pushed in ascending\nsorted order and the amortized cost per push is *O*(log(*n*)) against a heap\ncontaining *n* elements.\n\nThe worst case cost of a *single* call to `push` is *O*(*n*). The worst case\noccurs when capacity is exhausted and needs a resize. The resize cost\nhas been amortized in the previous figures.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"append\", \"put\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["item",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3482":{"id":"0:3482","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1502,0],"end":[1506,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8258:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3484:974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:7569:7099":{"id":"b:0:727-0:7569:7099","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5362-1:11891:8703":{"id":"0:5362-1:11891:8703","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[55,31],"end":[55,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_group_by\", since = \"1.77.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ChunkByMut","name":"ChunkByMut","id":"1:11891:8703","glob":false}}},"b:1:2618-0:732:118":{"id":"b:1:2618-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:1557:4545":{"id":"b:1:2892-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:406:2422":{"id":"0:406:2422","crate_id":0,"name":"finish","span":{"filename":"library/alloc/src/boxed.rs","begin":[1396,4],"end":[1398,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546:3438":{"id":"0:546:3438","crate_id":0,"name":"nth_back","span":{"filename":"library/alloc/src/boxed.rs","begin":[1996,4],"end":[1998,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:3209:100":{"id":"a:1:31996:236-0:3209:100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:3238:4057":{"id":"b:1:2898-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:826:101":{"id":"a:1:3146:11953-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3720:5177":{"id":"0:3720:5177","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[797,4],"end":[799,5]},"visibility":"public","docs":"Provides a reference to the back element, or `None` if the list is\nempty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2081,0],"end":[2094,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:604:462","0:605:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:3661:4509":{"id":"b:1:2903-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3146:11953-0:830:3912":{"id":"a:1:3146:11953-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:1527:4528":{"id":"b:1:2615-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1576:780":{"id":"0:1576:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[582,4],"end":[584,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6128:8205":{"id":"0:6128:8205","crate_id":0,"name":"increment_strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1426,4],"end":[1428,5]},"visibility":"public","docs":"Increments the strong reference count on the `Arc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Arc::into_raw`, and the\nassociated `Arc` instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nunsafe {\n    let ptr = Arc::into_raw(five);\n    Arc::increment_strong_count(ptr);\n\n    // This assertion is deterministic because we haven't shared\n    // the `Arc` between threads.\n    let five = Arc::from_raw(ptr);\n    assert_eq!(2, Arc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1311:4371":{"id":"b:1:2615-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:830:3912":{"id":"a:1:31996:236-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3886:172":{"id":"0:3886:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1938,4],"end":[1938,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:5828:850":{"id":"0:5828:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/string.rs","begin":[2382,4],"end":[2384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hasher",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7621:8665":{"id":"a:1:32053:3459-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:7436:4175":{"id":"b:1:2898-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3671":{"id":"0:3671","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[150,0],"end":[154,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3674:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6500-0:7730:10536":{"id":"0:6500-0:7730:10536","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[82,0],"end":[82,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::splice::Splice","name":"Splice","id":"0:7730:10536","glob":false}}},"b:1:8171-0:4309:4057":{"id":"b:1:8171-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:7542:2714":{"id":"0:7542:2714","crate_id":0,"name":"layout","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[94,8],"end":[94,22]},"visibility":"default","docs":"The layout of allocation request that failed","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::alloc::Layout","id":"1:44378:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:3472:172":{"id":"0:3472:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1467,4],"end":[1467,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:3882":{"id":"0:3882","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1934,0],"end":[1960,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3872:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3886:172","0:3887:1167","0:3888:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3111:246-0:7480:4175":{"id":"a:1:3111:246-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4324":{"id":"0:4324","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[40,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4327:172","0:4328:1167","0:4329:6996","0:4330:3429","0:4331:3434","0:4334:6999","0:4338:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2888-0:3648:4057":{"id":"b:1:2888-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7196":{"id":"0:7196","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2793,0],"end":[2798,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3332:3010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7199:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:1356:4373":{"id":"b:1:2618-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2615-0:1518:4524":{"id":"b:1:2615-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7527:2620":{"id":"0:7527:2620","crate_id":0,"name":"TryReserveError","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[61,0],"end":[63,1]},"visibility":"public","docs":"The error type for `try_reserve` methods.","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4676","a:1:3146:11953-0:7527:2620","a:1:32053:3459-0:7527:2620","a:1:3111:246-0:7527:2620","a:1:31996:236-0:7527:2620","a:1:41612:4469-0:7527:2620","a:1:41611:4468-0:7527:2620","b:0:5854-0:7527:2620","b:0:727-0:7527:2620","b:1:2888-0:7527:2620","b:1:2618-0:7527:2620","b:1:2615-0:7527:2620","b:1:3727-0:7527:2620","b:1:2892-0:7527:2620","b:1:2903-0:7527:2620","b:1:2898-0:7527:2620","0:7531","0:7534","0:7532","0:7536","0:4687","0:4678","0:4682","0:7529"]}}},"0:738:3355":{"id":"0:738:3355","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[190,4],"end":[190,78]},"visibility":"default","docs":"Owned data.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:740:1923"]},"discriminant":null}}},"0:5854":{"id":"0:5854","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":"# Panics\n\nIn this implementation, the `to_string` method panics\nif the `Display` implementation returns an error.\nThis indicates an incorrect `Display` implementation\nsince `fmt::Write for String` never returns an error itself.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:5854-0:732:118":{"id":"b:0:5854-0:732:118","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:732:118":{"id":"b:1:2903-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:830:3912":{"id":"0:830:3912","crate_id":0,"name":"PeekMut","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[291,0],"end":[300,1]},"visibility":"public","docs":"Structure wrapping a mutable reference to the greatest item on a\n`BinaryHeap`.\n\nThis `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See\nits documentation for more.\n\n[`peek_mut`]: BinaryHeap::peek_mut","links":{"`BinaryHeap`":"0:826:101","BinaryHeap::peek_mut":"0:889:3958"},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:853","a:1:3146:11953-0:830:3912","a:1:32053:3459-0:830:3912","a:1:3111:246-0:830:3912","a:1:31996:236-0:830:3912","a:1:41612:4469-0:830:3912","a:1:41611:4468-0:830:3912","b:1:2888-0:830:3912","b:1:2618-0:830:3912","b:1:2615-0:830:3912","b:1:3727-0:830:3912","b:1:2892-0:830:3912","b:1:2903-0:830:3912","b:1:2898-0:830:3912","0:844","0:849","0:840","0:836"]}}},"a:1:3146:11953-0:3807:4931":{"id":"a:1:3146:11953-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1422-0:1311:4371":{"id":"0:1422-0:1311:4371","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[25,16],"end":[25,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"entry::Entry","name":"Entry","id":"0:1311:4371","glob":false}}},"0:7683:678":{"id":"0:7683:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2348,0],"end":[2348,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4482:1153":{"id":"0:4482:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[542,4],"end":[545,5]},"visibility":"public","docs":"Creates an empty deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::new();\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_vec_deque_new\", since = \"1.68.0\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:3807:4931":{"id":"b:1:3727-0:3807:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:3807:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1050:3440":{"id":"0:1050:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1685,4],"end":[1687,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4766:2400":{"id":"0:4766:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[750,4],"end":[752,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4529:6188":{"id":"0:4529:6188","crate_id":0,"name":"front_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1544,4],"end":[1546,5]},"visibility":"public","docs":"Provides a mutable reference to the front element, or `None` if the\ndeque is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front_mut(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.front_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.front(), Some(&9));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1701:3437":{"id":"0:1701:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1607,4],"end":[1614,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:2089:4918":{"id":"a:1:32053:3459-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8171-0:7714:4776":{"id":"b:1:8171-0:7714:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:7714:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:41612:4469-0:732:118":{"id":"a:1:41612:4469-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:727-0:3245:5783":{"id":"b:0:727-0:3245:5783","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:3305:5807":{"id":"a:1:31996:236-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7062:2669":{"id":"0:7062:2669","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[625,4],"end":[627,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T, A>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\n# #[allow(unused_mut)]\nlet mut vec: Vec<i32, _> = Vec::new_in(System);\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3397:4776":{"id":"b:1:2898-0:3397:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13121":{"id":"1:13121","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13122:974","1:13123:3440","1:13124:9515","1:13125:29474","1:13127:29475","1:13130:3305","1:13131:29476","1:13132:334","1:13133:2855","1:13134:3917","1:13136:4637","1:13138:3919","1:13140:3920","1:13142:29477","1:13143:29478","1:13144:6461","1:13145:8953","1:13146:18922","1:13147:28432","1:13149:9024","1:13150:9016","1:13151:3288","1:13152:18923","1:13153:8917","1:13154:29479","1:13155:29480","1:13156:8915","1:13157:5864","1:13160:28443","1:13163:28444","1:13166:12749","1:13170:12728","1:13174:4225","1:13177:8726","1:13180:28435","1:13183:29481","1:13186:29482","1:13189:28437","1:13192:28439","1:13195:28441","1:13198:28442","1:13201:11824","1:13204:29483","1:13207:8983","1:13210:29484","1:13213:29485","1:13215:29486","1:13217:29487","1:13219:29488","1:13220:29489","1:13221:29490","1:13224:29491","1:13227:28445","1:13230:28446","1:13233:29492","1:13236:29493","1:13239:29494","1:13242:29495","1:13244:28316","1:13245:28317","1:13246:28319","1:13247:8863","1:13248:8870","1:13249:28321","1:13250:28322","1:13251:28323","1:13252:29496","1:13254:14061","1:13255:29497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41611:4468-0:1480:4509":{"id":"a:1:41611:4468-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:5138:1252":{"id":"0:5138:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/rc.rs","begin":[2339,4],"end":[2341,5]},"visibility":"default","docs":"Partial comparison for two `Rc`s.\n\nThe two are compared by calling `partial_cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\nuse std::cmp::Ordering;\n\nlet five = Rc::new(5);\n\nassert_eq!(Some(Ordering::Less), five.partial_cmp(&Rc::new(6)));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:43920:9605":{"id":"1:43920:9605","crate_id":1,"name":"into_searcher","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["haystack",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"CharPredicateSearcher","id":"1:43903:12224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5752:3494":{"id":"0:5752:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/string.rs","begin":[2088,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:3279:5798":{"id":"a:1:41612:4469-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3713:4152":{"id":"0:3713:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[686,4],"end":[696,5]},"visibility":"public","docs":"Removes all elements from the `LinkedList`.\n\nThis operation should compute in *O*(*n*) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\nassert_eq!(dl.front(), Some(&1));\n\ndl.clear();\nassert_eq!(dl.len(), 0);\nassert_eq!(dl.front(), None);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:3648:4057":{"id":"b:1:8171-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:6535-0:6554:4150":{"id":"0:6535-0:6554:4150","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[88,0],"end":[88,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::drain::Drain","name":"Drain","id":"0:6554:4150","glob":false}}},"0:1658:1167":{"id":"0:1658:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1498,4],"end":[1505,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3326:5843":{"id":"0:3326:5843","crate_id":0,"name":"symmetric_difference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[484,4],"end":[492,5]},"visibility":"public","docs":"Visits the elements representing the symmetric difference,\ni.e., the elements that are in `self` or in `other` but not in both,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();\nassert_eq!(sym_diff, [1, 3]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5733:4152":{"id":"0:5733:4152","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/string.rs","begin":[1831,4],"end":[1833,5]},"visibility":"public","docs":"Truncates this `String`, removing all contents.\n\nWhile this means the `String` will have a length of zero, it does not\ntouch its capacity.\n\n# Examples\n\n```\nlet mut s = String::from(\"foo\");\n\ns.clear();\n\nassert!(s.is_empty());\nassert_eq!(0, s.len());\nassert_eq!(3, s.capacity());\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:3792:4918":{"id":"b:1:2888-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5451:8862":{"id":"0:5451:8862","crate_id":0,"name":"to_ascii_uppercase","span":{"filename":"library/alloc/src/slice.rs","begin":[621,4],"end":[625,5]},"visibility":"public","docs":"Returns a vector containing a copy of this slice where each byte\nis mapped to its ASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\n[`make_ascii_uppercase`]: slice::make_ascii_uppercase","links":{"slice::make_ascii_uppercase":"1:10767:8863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the uppercase bytes as a new Vec, \\\n                  without modifying the original\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3864:6200":{"id":"0:3864:6200","crate_id":0,"name":"push_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1784,4],"end":[1790,5]},"visibility":"public","docs":"Appends an element to the front of the cursor's parent list. The node\nthat the cursor points to is unchanged, even if it is the \"ghost\" node.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elt",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1611,0],"end":[1633,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:450:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3954:3569":{"id":"0:3954:3569","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2082,4],"end":[2084,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4627:172":{"id":"0:4627:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2815,4],"end":[2815,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"b:1:2888-0:1568:209":{"id":"b:1:2888-0:1568:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3438:2350":{"id":"0:3438:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1339,4],"end":[1341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elem",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4097":{"id":"0:4097","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[91,0],"end":[91,69]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:4074:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7358:1755":{"id":"0:7358:1755","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3491,4],"end":[3506,5]},"visibility":"default","docs":"Gets the entire contents of the `Vec<T>` as an array,\nif its size exactly matches that of the requested array.\n\n# Examples\n\n```\nassert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\nassert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n```\n\nIf the length doesn't match, the input comes back in `Err`:\n```\nlet r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\nassert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n```\n\nIf you're fine with just getting a prefix of the `Vec<T>`,\nyou can call [`.truncate(N)`](Vec::truncate) first.\n```\nlet mut v = String::from(\"hello world\").into_bytes();\nv.sort();\nv.truncate(2);\nlet [a, b]: [_; 2] = v.try_into().unwrap();\nassert_eq!(a, b' ');\nassert_eq!(b, b'd');\n```","links":{"Vec::truncate":"0:7076:6589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1757:3437":{"id":"0:1757:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1732,4],"end":[1735,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4550:6815":{"id":"0:4550:6815","crate_id":0,"name":"make_contiguous","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2189,4],"end":[2313,5]},"visibility":"public","docs":"Rearranges the internal storage of this deque so it is one contiguous\nslice, which is then returned.\n\nThis method does not allocate and does not change the order of the\ninserted elements. As it returns a mutable slice, this can be used to\nsort a deque.\n\nOnce the internal storage is contiguous, the [`as_slices`] and\n[`as_mut_slices`] methods will return the entire contents of the\ndeque in a single slice.\n\n[`as_slices`]: VecDeque::as_slices\n[`as_mut_slices`]: VecDeque::as_mut_slices\n\n# Examples\n\nSorting the content of a deque.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\n\nbuf.push_back(2);\nbuf.push_back(1);\nbuf.push_front(3);\n\n// sorting the deque\nbuf.make_contiguous().sort();\nassert_eq!(buf.as_slices(), (&[1, 2, 3] as &[_], &[] as &[_]));\n\n// sorting it in reverse order\nbuf.make_contiguous().sort_by(|a, b| b.cmp(a));\nassert_eq!(buf.as_slices(), (&[3, 2, 1] as &[_], &[] as &[_]));\n```\n\nGetting immutable access to the contiguous slice.\n\n```rust\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\n\nbuf.push_back(2);\nbuf.push_back(1);\nbuf.push_front(3);\n\nbuf.make_contiguous();\nif let (slice, &[]) = buf.as_slices() {\n    // we can now be sure that `slice` contains all elements of the deque,\n    // while still having immutable access to `buf`.\n    assert_eq!(buf.len(), slice.len());\n    assert_eq!(slice, &[3, 2, 1] as &[_]);\n}\n```","links":{"VecDeque::as_mut_slices":"0:4515:6420","VecDeque::as_slices":"0:4514:6597"},"attrs":["#[stable(feature = \"deque_make_contiguous\", since = \"1.48.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:6007:71":{"id":"b:1:2888-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31996:236-0:1465:4057":{"id":"a:1:31996:236-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:7609:7098":{"id":"b:1:2888-0:7609:7098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:3238:4057":{"id":"a:1:32053:3459-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:7380:4065":{"id":"b:1:2615-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:7048:263":{"id":"b:1:2903-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:830:3912":{"id":"a:1:41612:4469-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:7538:2621":{"id":"b:1:2615-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:5854-0:4925:216":{"id":"b:0:5854-0:4925:216","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7372:4175":{"id":"0:7372:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1492,0],"end":[1497,1]},"visibility":"public","docs":"An owning iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::into_iter()`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: BinaryHeap::into_iter","links":{"`BinaryHeap::into_iter()`":"0:1115:933","`IntoIterator`":"1:8167:164"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:969","a:1:3146:11953-0:7372:4175","a:1:32053:3459-0:7372:4175","a:1:3111:246-0:7372:4175","a:1:31996:236-0:7372:4175","a:1:41612:4469-0:7372:4175","a:1:41611:4468-0:7372:4175","b:0:727-0:7372:4175","b:1:8171-0:7372:4175","b:1:2888-0:7372:4175","b:1:2618-0:7372:4175","b:1:2615-0:7372:4175","b:1:3727-0:7372:4175","b:1:2892-0:7372:4175","b:1:2903-0:7372:4175","b:1:2898-0:7372:4175","0:987","0:7376","0:991","0:973","0:997","0:983","0:977"]}}},"0:5833":{"id":"0:5833","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2441,0],"end":[2446,1]},"visibility":"default","docs":"Implements the `+=` operator for appending to a `String`.\n\nThis has the same behavior as the [`push_str`][String::push_str] method.","links":{"String::push_str":"0:5693:3688"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"stringaddassign\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"1:33079:3572","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5834:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:3635:181":{"id":"a:1:3146:11953-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:1465:4057":{"id":"a:1:3146:11953-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3674:780":{"id":"0:3674:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[151,4],"end":[153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7255":{"id":"0:7255","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3003,0],"end":[3173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7262:9700","0:7265:4683"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7960:1135":{"id":"0:7960:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[33,0],"end":[33,105]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5380-1:43286:8717":{"id":"0:5380-1:43286:8717","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[65,62],"end":[65,72]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RChunksMut","name":"RChunksMut","id":"1:43286:8717","glob":false}}},"0:6133:3225":{"id":"0:6133:3225","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[1485,4],"end":[1489,5]},"visibility":"public","docs":"Consumes the `Arc`, returning the wrapped pointer.\n\nTo avoid a memory leak the pointer must be converted back to an `Arc` using\n[`Arc::from_raw`].\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(\"hello\".to_owned());\nlet x_ptr = Arc::into_raw(x);\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{"`Arc::from_raw`":"0:6127:3190"},"attrs":["#[must_use = \"losing the pointer will leak memory\"]","#[stable(feature = \"rc_raw\", since = \"1.17.0\")]","#[rustc_never_returns_null_ptr]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:7048:263":{"id":"b:1:2618-0:7048:263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1389:4229":{"id":"0:1389:4229","crate_id":0,"name":"key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[232,4],"end":[237,5]},"visibility":"public","docs":"Returns a reference to this entry's key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:3279:5798":{"id":"b:0:727-0:3279:5798","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5673:9395":{"id":"0:5673:9395","crate_id":0,"name":"from_utf16_lossy","span":{"filename":"library/alloc/src/string.rs","begin":[724,4],"end":[728,5]},"visibility":"public","docs":"Decode a UTF-16–encoded slice `v` into a `String`, replacing\ninvalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n\nUnlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n`from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8\nconversion requires a memory allocation.\n\n[`from_utf8_lossy`]: String::from_utf8_lossy\n[`Cow<'a, str>`]: crate::borrow::Cow \"borrow::Cow\"\n[U+FFFD]: core::char::REPLACEMENT_CHARACTER\n\n# Examples\n\n```\n// 𝄞mus<invalid>ic<invalid>\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0x0073, 0xDD1E, 0x0069, 0x0063,\n          0xD834];\n\nassert_eq!(String::from(\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"),\n           String::from_utf16_lossy(v));\n```","links":{"core::char::REPLACEMENT_CHARACTER":"1:4973:9397","String::from_utf8_lossy":"0:5670:7436","crate::borrow::Cow":"0:732:118"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7087:4222":{"id":"0:7087:4222","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1597,4],"end":[1625,5]},"visibility":"public","docs":"Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.\n\nNote: Because this shifts over the remaining elements, it has a\nworst-case performance of *O*(*n*). If you don't need the order of elements\nto be preserved, use [`swap_remove`] instead. If you'd like to remove\nelements from the beginning of the `Vec`, consider using\n[`VecDeque::pop_front`] instead.\n\n[`swap_remove`]: Vec::swap_remove\n[`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n\n# Panics\n\nPanics if `index` is out of bounds.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3];\nassert_eq!(v.remove(1), 2);\nassert_eq!(v, [1, 3]);\n```","links":{"Vec::swap_remove":"0:7083:11040","crate::collections::VecDeque::pop_front":"0:4532:6209"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[track_caller]","#[rustc_confusables(\"delete\", \"take\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:1568:209":{"id":"b:0:727-0:1568:209","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:1568:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:2103:4931":{"id":"a:1:32053:3459-0:2103:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMut","id":"0:2103:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2888-0:1830:4776":{"id":"b:1:2888-0:1830:4776","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1830:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:7480:4175":{"id":"a:1:32053:3459-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2903-0:7436:4175":{"id":"b:1:2903-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5132":{"id":"0:5132","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2320,0],"end":[2320,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5839":{"id":"0:5839","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2462,0],"end":[2470,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"slice::SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3387:6395","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5841:918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7287":{"id":"0:7287","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3226,0],"end":[3236,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7290:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2180:5025":{"id":"0:2180:5025","crate_id":0,"name":"insert_after","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3355,4],"end":[3357,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap before the\nnewly inserted element.\n\nIf the inserted key is not greater than the key before the cursor\n(if any), or if it not less than the key after the cursor (if any),\nthen an [`UnorderedKeyError`] is returned since this would\ninvalidate the [`Ord`] invariant between the keys of the map.","links":{"`Ord`":"1:2701:194","`UnorderedKeyError`":"0:7412:5026"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:3305:5807":{"id":"a:1:41612:4469-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2044:1252":{"id":"0:2044:1252","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2298,4],"end":[2300,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:4309:4057":{"id":"b:1:2615-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7443:780":{"id":"0:7443:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[150,9],"end":[150,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4330:3429":{"id":"0:4330:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[71,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7615":{"id":"0:7615","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,16],"end":[227,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7616:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1693:3429":{"id":"0:1693:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1582,4],"end":[1584,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13156:8915":{"id":"1:13156:8915","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43671:8916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:3792:4918":{"id":"b:1:3727-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3559:3429":{"id":"0:3559:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1715,4],"end":[1721,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2111,0],"end":[2115,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:617:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:849":{"id":"0:849","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[337,0],"end":[363,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3332:3010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:852:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4537:6717":{"id":"0:4537:6717","crate_id":0,"name":"swap_remove_front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1725,4],"end":[1733,5]},"visibility":"public","docs":"Removes an element from anywhere in the deque and returns it,\nreplacing it with the first element.\n\nThis does not preserve ordering, but is *O*(1).\n\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_front(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_front(2), Some(3));\nassert_eq!(buf, [2, 1]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1496:4175":{"id":"0:1496:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[426,0],"end":[435,1]},"visibility":"public","docs":"An owning iterator over the entries of a `BTreeMap`, sorted by key.\n\nThis `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: IntoIterator::into_iter","links":{"IntoIterator::into_iter":"1:8170:933","`BTreeMap`":"0:1428:99","`IntoIterator`":"1:8167:164"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1496:4175","a:1:32053:3459-0:1496:4175","a:1:3111:246-0:1496:4175","a:1:31996:236-0:1496:4175","a:1:41612:4469-0:1496:4175","a:1:41611:4468-0:1496:4175","b:1:8171-0:1496:4175","b:1:2888-0:1496:4175","b:1:2618-0:1496:4175","b:1:2615-0:1496:4175","b:1:3727-0:1496:4175","b:1:2892-0:1496:4175","b:1:2903-0:1496:4175","b:1:2898-0:1496:4175","0:1508","0:1759","0:1764","0:1513","0:1721","0:1753","0:1745"]}}},"0:5271":{"id":"0:5271","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3297,0],"end":[3301,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:5217:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5274:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4850-1:10018:7838":{"id":"0:4850-1:10018:7838","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[588,31],"end":[588,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::DebugMap","name":"DebugMap","id":"1:10018:7838","glob":false}}},"0:749:3671":{"id":"0:749:3671","crate_id":0,"name":"to_mut","span":{"filename":"library/alloc/src/borrow.rs","begin":[275,4],"end":[286,5]},"visibility":"public","docs":"Acquires a mutable reference to the owned form of the data.\n\nClones the data if it is not already owned.\n\n# Examples\n\n```\nuse std::borrow::Cow;\n\nlet mut cow = Cow::Borrowed(\"foo\");\ncow.to_mut().make_ascii_uppercase();\n\nassert_eq!(\n  cow,\n  Cow::Owned(String::from(\"FOO\")) as Cow<'_, str>\n);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5908":{"id":"0:5908","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2877,0],"end":[2881,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5911:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1100:810":{"id":"0:1100:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1785,4],"end":[1787,5]},"visibility":"default","docs":"```\nuse std::collections::BinaryHeap;\n\nlet mut h1 = BinaryHeap::from([1, 4, 2, 3]);\nlet mut h2: BinaryHeap<_> = [1, 4, 2, 3].into();\nwhile let Some((a, b)) = h1.pop().zip(h2.pop()) {\n    assert_eq!(a, b);\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3528:3437":{"id":"0:3528:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1607,4],"end":[1609,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:1536:4534":{"id":"a:1:32053:3459-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4856-1:10202:225":{"id":"0:4856-1:10202:225","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[590,31],"end":[590,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Result","name":"Result","id":"1:10202:225","glob":false}}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[383,0],"end":[391,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:861:462","0:862:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2102:780":{"id":"0:2102:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2802,4],"end":[2804,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4670-0:3635:181":{"id":"0:4670-0:3635:181","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[48,0],"end":[48,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"linked_list::LinkedList","name":"LinkedList","id":"0:3635:181","glob":false}}},"a:1:41612:4469-0:6554:4150":{"id":"a:1:41612:4469-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:660":{"id":"0:660","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2241,0],"end":[2270,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:663:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5743:7197":{"id":"0:5743:7197","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[2031,4],"end":[2033,5]},"visibility":"public","docs":"Returns the bytes that were attempted to convert to a `String`.\n\nThis method is carefully constructed to avoid allocation. It will\nconsume the error, moving out the bytes, so that a copy of the bytes\ndoes not need to be made.\n\n# Examples\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6039:8069":{"id":"0:6039:8069","crate_id":0,"name":"Weak","span":{"filename":"library/alloc/src/sync.rs","begin":[321,0],"end":[333,1]},"visibility":"public","docs":"`Weak` is a version of [`Arc`] that holds a non-owning reference to the\nmanaged allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\npointer, which returns an <code>[Option]<[Arc]\\<T>></code>.\n\nSince a `Weak` reference does not count towards ownership, it will not\nprevent the value stored in the allocation from being dropped, and `Weak` itself makes no\nguarantees about the value still being present. Thus it may return [`None`]\nwhen [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation\nitself (the backing store) from being deallocated.\n\nA `Weak` pointer is useful for keeping a temporary reference to the allocation\nmanaged by [`Arc`] without preventing its inner value from being dropped. It is also used to\nprevent circular references between [`Arc`] pointers, since mutual owning references\nwould never allow either [`Arc`] to be dropped. For example, a tree could\nhave strong [`Arc`] pointers from parent nodes to children, and `Weak`\npointers from children back to their parents.\n\nThe typical way to obtain a `Weak` pointer is to call [`Arc::downgrade`].\n\n[`upgrade`]: Weak::upgrade","links":{"`Arc::downgrade`":"0:6136:8240","Weak::upgrade":"0:6247:8595","Option":"1:41517:193","Arc":"0:6007:71","`None`":"1:41519:190","`Arc`":"0:6007:71"},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]","#[rustc_diagnostic_item = \"ArcWeak\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:6224","0:6227","0:6235","0:6238","0:6244","a:1:3146:11953-0:6039:8069","a:1:32053:3459-0:6039:8069","a:1:41612:4469-0:6039:8069","a:1:41611:4468-0:6039:8069","b:0:727-0:6039:8069","b:1:2888-0:6039:8069","b:1:2618-0:6039:8069","b:1:2615-0:6039:8069","b:1:3727-0:6039:8069","b:1:2892-0:6039:8069","b:1:2903-0:6039:8069","b:1:2898-0:6039:8069","0:6047","0:6257","0:6253","0:6044","0:6260","0:6057","0:6050","0:6054"]}}},"0:309:3069":{"id":"0:309:3069","crate_id":0,"name":"try_new_zeroed","span":{"filename":"library/alloc/src/boxed.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes on the heap\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet zero = Box::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1591":{"id":"0:1591","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[634,0],"end":[677,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1595:4152","0:1596:2669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3586:3429":{"id":"0:3586:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1806,4],"end":[1810,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3245:5783":{"id":"0:3245:5783","crate_id":0,"name":"Difference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[180,0],"end":[186,1]},"visibility":"public","docs":"A lazy iterator producing elements in the difference of `BTreeSet`s.\n\nThis `struct` is created by the [`difference`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`difference`]: BTreeSet::difference","links":{"`BTreeSet`":"0:3209:100","BTreeSet::difference":"0:3324:5833"},"attrs":["#[must_use =\n\"this returns the difference as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:3245:5783","a:1:32053:3459-0:3245:5783","a:1:3111:246-0:3245:5783","a:1:31996:236-0:3245:5783","a:1:41612:4469-0:3245:5783","a:1:41611:4468-0:3245:5783","b:0:727-0:3245:5783","b:1:8171-0:3245:5783","b:1:2888-0:3245:5783","b:1:2618-0:3245:5783","b:1:2615-0:3245:5783","b:1:3727-0:3245:5783","b:1:2892-0:3245:5783","b:1:2903-0:3245:5783","b:1:2898-0:3245:5783","0:3535","0:3267","0:3539","0:3548"]}}},"a:1:41611:4468-0:943:4057":{"id":"a:1:41611:4468-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3572:1167":{"id":"0:3572:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1751,4],"end":[1772,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:844":{"id":"0:844","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[327,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3319:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:847:248","0:848:610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1825:462":{"id":"0:1825:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1853,4],"end":[1855,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3807:4931":{"id":"0:3807:4931","crate_id":0,"name":"CursorMut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1364,0],"end":[1372,1]},"visibility":"public","docs":"A cursor over a `LinkedList` with editing operations.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the list during iteration. This is because the lifetime of its yielded\nreferences is tied to its own lifetime, instead of just the underlying list. This means\ncursors cannot yield multiple elements at once.\n\nCursors always rest between two elements in the list, and index in a logically circular way.\nTo accommodate this, there is a \"ghost\" non-element that yields `None` between the head and\ntail of the list.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:3834","0:3849","0:3854","a:1:3146:11953-0:3807:4931","a:1:32053:3459-0:3807:4931","a:1:41612:4469-0:3807:4931","a:1:41611:4468-0:3807:4931","b:1:2888-0:3807:4931","b:1:2618-0:3807:4931","b:1:2615-0:3807:4931","b:1:3727-0:3807:4931","b:1:2892-0:3807:4931","b:1:2903-0:3807:4931","b:1:2898-0:3807:4931","0:4024","0:3814","0:4021"]}}},"a:1:32053:3459-0:4309:4057":{"id":"a:1:32053:3459-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13166:12749":{"id":"1:13166:12749","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41519:190","prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1607:4609":{"id":"0:1607:4609","crate_id":0,"name":"pop_first","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[813,4],"end":[818,5]},"visibility":"public","docs":"Removes and returns the first element in the map.\nThe key of this element is the minimum key that was in the map.\n\n# Examples\n\nDraining elements in ascending order, while keeping a usable map each iteration.\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nwhile let Some((key, _val)) = map.pop_first() {\n    assert!(map.iter().all(|(k, _v)| *k > key));\n}\nassert!(map.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13142:29477":{"id":"1:13142:29477","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:52084:1672","str::slice_mut_unchecked":"1:13143:29478","crate::ops::Index":"1:39126:4364"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:1527:4528":{"id":"a:1:3111:246-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1963":{"id":"0:1963","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2153,0],"end":[2167,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1967:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5482:2400":{"id":"0:5482:2400","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/slice.rs","begin":[773,4],"end":[775,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6073:8067":{"id":"0:6073:8067","crate_id":0,"name":"new_cyclic","span":{"filename":"library/alloc/src/sync.rs","begin":[457,4],"end":[509,5]},"visibility":"public","docs":"Constructs a new `Arc<T>` while giving you a `Weak<T>` to the allocation,\nto allow you to construct a `T` which holds a weak pointer to itself.\n\nGenerally, a structure circularly referencing itself, either directly or\nindirectly, should not hold a strong reference to itself to prevent a memory leak.\nUsing this function, you get access to the weak pointer during the\ninitialization of `T`, before the `Arc<T>` is created, such that you can\nclone and store it inside the `T`.\n\n`new_cyclic` first allocates the managed allocation for the `Arc<T>`,\nthen calls your closure, giving it a `Weak<T>` to this allocation,\nand only afterwards completes the construction of the `Arc<T>` by placing\nthe `T` returned from your closure into the allocation.\n\nSince the new `Arc<T>` is not fully-constructed until `Arc<T>::new_cyclic`\nreturns, calling [`upgrade`] on the weak reference inside your closure will\nfail and result in a `None` value.\n\n# Panics\n\nIf `data_fn` panics, the panic is propagated to the caller, and the\ntemporary [`Weak<T>`] is dropped normally.\n\n# Example\n\n```\n# #![allow(dead_code)]\nuse std::sync::{Arc, Weak};\n\nstruct Gadget {\n    me: Weak<Gadget>,\n}\n\nimpl Gadget {\n    /// Construct a reference counted Gadget.\n    fn new() -> Arc<Self> {\n        // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n        // `Arc` we're constructing.\n        Arc::new_cyclic(|me| {\n            // Create the actual struct here.\n            Gadget { me: me.clone() }\n        })\n    }\n\n    /// Return a reference counted pointer to Self.\n    fn me(&self) -> Arc<Self> {\n        self.me.upgrade().unwrap()\n    }\n}\n```\n[`upgrade`]: Weak::upgrade","links":{"`Weak<T>`":"0:6039:8069","Weak::upgrade":"0:6247:8595"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_fn",{"generic":"F"}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:727-0:6007:71":{"id":"b:0:727-0:6007:71","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3965":{"id":"0:3965","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2107,0],"end":[2111,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2707:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3968:1252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1919":{"id":"0:1919","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2085,0],"end":[2089,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1923:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:7632:242":{"id":"b:1:2618-0:7632:242","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2903-0:7645:9281":{"id":"b:1:2903-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6735":{"id":"0:6735","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[364,0],"end":[364,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:218:3019":{"id":"a:1:3146:11953-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:1577:4553":{"id":"a:1:41611:4468-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:6475-0:7714:4776":{"id":"0:6475-0:7714:4776","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[76,0],"end":[76,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"extract_if\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"inner":{"import":{"source":"self::extract_if::ExtractIf","name":"ExtractIf","id":"0:7714:4776","glob":false}}},"b:1:2898-0:7380:4065":{"id":"b:1:2898-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4289:3440":{"id":"0:4289:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[252,4],"end":[254,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7663:678":{"id":"0:7663:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2345,0],"end":[2345,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5367-1:43204:8708":{"id":"0:5367-1:43204:8708","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[59,22],"end":[59,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::ChunksExact","name":"ChunksExact","id":"1:43204:8708","glob":false}}},"0:6282:678":{"id":"0:6282:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/sync.rs","begin":[3117,4],"end":[3119,5]},"visibility":"default","docs":"Equality for two `Arc`s.\n\nTwo `Arc`s are equal if their inner values are equal, even if they are\nstored in different allocation.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Arc`s that point to the same allocation are always equal.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five == Arc::new(5));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7207:464":{"id":"0:7207:464","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2822,4],"end":[2824,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[520,0],"end":[524,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1544:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5578":{"id":"0:5578","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[63,0],"end":[69,1]},"visibility":"default","docs":"Note: `str` in `Concat<str>` is not meaningful here.\nThis type parameter of the trait only exists to enable another impl.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Concat","id":"0:5453:8837","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"slice":{"generic":"S"}},"items":["0:5580:198","0:5581:487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5624:3015":{"id":"0:5624:3015","crate_id":0,"name":"from_boxed_utf8_unchecked","span":{"filename":"library/alloc/src/str.rs","begin":[612,0],"end":[614,1]},"visibility":"public","docs":"Converts a boxed slice of bytes to a boxed string slice without checking\nthat the string contains valid UTF-8.\n\n# Examples\n\n```\nlet smile_utf8 = Box::new([226, 152, 186]);\nlet smile = unsafe { std::str::from_boxed_utf8_unchecked(smile_utf8) };\n\nassert_eq!(\"☺\", &*smile);\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::boxed::Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5256:8583":{"id":"0:5256:8583","crate_id":0,"name":"into_raw_and_alloc","span":{"filename":"library/alloc/src/rc.rs","begin":[3029,4],"end":[3037,5]},"visibility":"public","docs":"Consumes the `Weak<T>` and turns it into a raw pointer.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the `Weak<T>` with [`from_raw`].\n\nThe same restrictions of accessing the target of the pointer as with\n[`as_ptr`] apply.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet strong = Rc::new(\"hello\".to_owned());\nlet weak = Rc::downgrade(&strong);\nlet raw = weak.into_raw();\n\nassert_eq!(1, Rc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw(raw) });\nassert_eq!(0, Rc::weak_count(&strong));\n```\n\n[`from_raw`]: Weak::from_raw\n[`as_ptr`]: Weak::as_ptr","links":{"Weak::from_raw":"0:5250:3190","Weak::as_ptr":"0:5254:334"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},{"generic":"A"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4334:6999":{"id":"0:4334:6999","crate_id":0,"name":"try_fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[84,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3554:253","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2165:5020":{"id":"0:2165:5020","crate_id":0,"name":"insert_before_unchecked","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3160,4],"end":[3190,5]},"visibility":"public","docs":"Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the\nnewly inserted element.\n\n# Safety\n\nYou must ensure that the `BTreeMap` invariants are maintained.\nSpecifically:\n\n* The key of the newly inserted element must be unique in the tree.\n* All keys in the tree must remain in sorted order.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7574:462":{"id":"0:7574:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,9],"end":[136,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:4423:264":{"id":"b:1:2892-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1597":{"id":"0:1597","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[679,0],"end":[1482,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1601:3917","0:1603:4582","0:1605:4590","0:1606:4601","0:1607:4609","0:1609:4614","0:1610:4622","0:1611:4628","0:1613:4632","0:1615:4637","0:1617:4498","0:1618:4665","0:1619:4222","0:1622:4610","0:1624:4049","0:1627:3978","0:1629:4502","0:1632:4727","0:1635:4370","0:1636:4749","0:1638:4683","0:1641:4787","0:1642:4794"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2618-0:3635:181":{"id":"b:1:2618-0:3635:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5349-1:11940:8694":{"id":"0:5349-1:11940:8694","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[47,22],"end":[47,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"from_ref\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::from_mut","name":"from_mut","id":"1:11940:8694","glob":false}}},"a:1:32053:3459-0:7363:2619":{"id":"a:1:32053:3459-0:7363:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1344,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:381:678","0:382:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3896:172":{"id":"0:3896:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1974,4],"end":[1974,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:7642:469":{"id":"0:7642:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/string.rs","begin":[362,36],"end":[362,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13122:974":{"id":"1:13122:974","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:52078:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7156:8897":{"id":"0:7156:8897","crate_id":0,"name":"extend_from_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2561,4],"end":[2563,5]},"visibility":"public","docs":"Clones and appends all elements in a slice to the `Vec`.\n\nIterates over the slice `other`, clones each element, and then appends\nit to this `Vec`. The `other` slice is traversed in-order.\n\nNote that this function is same as [`extend`] except that it is\nspecialized to work with slices instead. If and when Rust gets\nspecialization this function will likely be deprecated (but still\navailable).\n\n# Examples\n\n```\nlet mut vec = vec![1];\nvec.extend_from_slice(&[2, 3, 4]);\nassert_eq!(vec, [1, 2, 3, 4]);\n```\n\n[`extend`]: Vec::extend","links":{"Vec::extend":"0:7251:3569"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:1577:4553":{"id":"b:1:2892-0:1577:4553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RangeMut","id":"0:1577:4553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6640:810":{"id":"0:6640:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[39,4],"end":[41,5]},"visibility":"default","docs":"Creates an [`Owned`] variant of [`Cow`]\nfrom an owned instance of [`Vec`].\n\nThis conversion does not allocate or clone the data.\n\n[`Owned`]: crate::borrow::Cow::Owned","links":{"crate::borrow::Cow::Owned":"0:738:3355","`Cow`":"0:732:118","`Vec`":"0:7048:263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3395:4175":{"id":"0:3395:4175","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1260,4],"end":[1260,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:0:727-0:7527:2620":{"id":"b:0:727-0:7527:2620","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3902:3437":{"id":"0:3902:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1990,4],"end":[1992,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13252:29496":{"id":"1:13252:29496","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4906:29496"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43678:8930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5741":{"id":"0:5741","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1994,0],"end":[2061,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5742:3305","0:5743:7197","0:5744:7287"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5852:250":{"id":"0:5852:250","crate_id":0,"name":"ToString","span":{"filename":"library/alloc/src/string.rs","begin":[2521,0],"end":[2536,1]},"visibility":"public","docs":"A trait for converting a value to a `String`.\n\nThis trait is automatically implemented for any type which implements the\n[`Display`] trait. As such, `ToString` shouldn't be implemented directly:\n[`Display`] should be implemented instead, and you get the `ToString`\nimplementation for free.\n\n[`Display`]: fmt::Display","links":{"fmt::Display":"1:10252:128"},"attrs":["#[rustc_diagnostic_item = \"ToString\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:5853:1730"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:5854"]}}},"1:8173:172":{"id":"1:8173:172","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:1807:3429":{"id":"0:1807:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1825,4],"end":[1827,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41612:4469-0:4423:264":{"id":"a:1:41612:4469-0:4423:264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7954:678":{"id":"0:7954:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[31,0],"end":[31,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2095":{"id":"0:2095","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2793,0],"end":[2798,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:2098:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2055":{"id":"0:2055","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2319,0],"end":[2335,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:39126:4364","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2060:198","0:2061:917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7077:2428":{"id":"0:7077:2428","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1227,4],"end":[1229,5]},"visibility":"public","docs":"Extracts a slice containing the entire vector.\n\nEquivalent to `&s[..]`.\n\n# Examples\n\n```\nuse std::io::{self, Write};\nlet buffer = vec![1, 2, 3, 5, 8];\nio::sink().write(buffer.as_slice()).unwrap();\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"vec_as_slice\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:3238:4057":{"id":"a:1:41611:4468-0:3238:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7531":{"id":"0:7531","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,16],"end":[59,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4761":{"id":"0:4761","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[728,0],"end":[736,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::vec::Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:4762:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:682:810":{"id":"0:682:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2370,4],"end":[2374,5]},"visibility":"default","docs":"Converts a [`String`] into a box of dyn [`Error`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_string_error = \"a string error\".to_string();\nlet a_boxed_error = Box::<dyn Error>::from(a_string_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Error`":"1:2951:136","`String`":"0:7632:242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["str_err",{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7314":{"id":"0:7314","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3285,0],"end":[3301,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:7316:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6250:8248":{"id":"0:6250:8248","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/sync.rs","begin":[2877,4],"end":[2894,5]},"visibility":"public","docs":"Gets an approximation of the number of `Weak` pointers pointing to this\nallocation.\n\nIf `self` was created using [`Weak::new`], or if there are no remaining\nstrong pointers, this will return 0.\n\n# Accuracy\n\nDue to implementation details, the returned value can be off by 1 in\neither direction when other threads are manipulating any `Arc`s or\n`Weak`s pointing to the same allocation.","links":{"`Weak::new`":"0:6226:1153"},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:4309:4057":{"id":"b:1:2903-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5299":{"id":"0:5299","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3436,0],"end":[3440,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2856:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5302:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:338:2895":{"id":"0:338:2895","crate_id":0,"name":"write","span":{"filename":"library/alloc/src/boxed.rs","begin":[859,4],"end":[864,5]},"visibility":"public","docs":"Writes the value and converts to `Box<T, A>`.\n\nThis method converts the box similarly to [`Box::assume_init`] but\nwrites `value` into it before conversion thus guaranteeing safety.\nIn some scenarios use of this method may improve performance because\nthe compiler may be able to optimize copying from stack.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet big_box = Box::<[usize; 1024]>::new_uninit();\n\nlet mut array = [0; 1024];\nfor (i, place) in array.iter_mut().enumerate() {\n    *place = i;\n}\n\n// The optimizer may be able to elide this copy, so previous code writes\n// to heap directly.\nlet big_box = Box::write(big_box, array);\n\nfor (i, x) in big_box.iter().enumerate() {\n    assert_eq!(*x, i);\n}\n```","links":{"`Box::assume_init`":"0:337:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed",{"generic":"Self"}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7961":{"id":"0:7961","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[35,0],"end":[35,109]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:7964:678","0:7965:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:990:3440":{"id":"0:990:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1539,4],"end":[1541,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6340":{"id":"0:6340","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3421,0],"end":[3447,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6343:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3146:11953-0:4309:4057":{"id":"a:1:3146:11953-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7324:810":{"id":"0:7324:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3333,4],"end":[3335,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n\n# Examples\n\n```\nassert_eq!(Vec::from(&[1, 2, 3]), vec![1, 2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"T"},"len":"N"}}}}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4844-1:10254:7836":{"id":"0:4844-1:10254:7836","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[584,28],"end":[584,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Octal","name":"Octal","id":"1:10254:7836","glob":false}}},"0:1891:1167":{"id":"0:1891:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2023,4],"end":[2025,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7413":{"id":"0:7413","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,9],"end":[3396,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7414:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5036:8336":{"id":"0:5036:8336","crate_id":0,"name":"make_mut","span":{"filename":"library/alloc/src/rc.rs","begin":[1778,4],"end":[1808,5]},"visibility":"public","docs":"Makes a mutable reference into the given `Rc`.\n\nIf there are other `Rc` pointers to the same allocation, then `make_mut` will\n[`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\nreferred to as clone-on-write.\n\nHowever, if there are no other `Rc` pointers to this allocation, but some [`Weak`]\npointers, then the [`Weak`] pointers will be disassociated and the inner value will not\nbe cloned.\n\nSee also [`get_mut`], which will fail rather than cloning the inner value\nor disassociating [`Weak`] pointers.\n\n[`clone`]: Clone::clone\n[`get_mut`]: Rc::get_mut\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet mut data = Rc::new(5);\n\n*Rc::make_mut(&mut data) += 1;         // Won't clone anything\nlet mut other_data = Rc::clone(&data); // Won't clone inner data\n*Rc::make_mut(&mut data) += 1;         // Clones inner data\n*Rc::make_mut(&mut data) += 1;         // Won't clone anything\n*Rc::make_mut(&mut other_data) *= 2;   // Won't clone anything\n\n// Now `data` and `other_data` point to different allocations.\nassert_eq!(*data, 8);\nassert_eq!(*other_data, 12);\n```\n\n[`Weak`] pointers will be disassociated:\n\n```\nuse std::rc::Rc;\n\nlet mut data = Rc::new(75);\nlet weak = Rc::downgrade(&data);\n\nassert!(75 == *data);\nassert!(75 == *weak.upgrade().unwrap());\n\n*Rc::make_mut(&mut data) += 1;\n\nassert!(76 == *data);\nassert!(weak.upgrade().is_none());\n```","links":{"`Weak`":"0:5217:8069","Rc::get_mut":"0:5030:4637","Clone::clone":"1:2632:462"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rc_unique\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5576-1:43988:8943":{"id":"0:5576-1:43988:8943","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[57,20],"end":[57,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Utf8Chunk","name":"Utf8Chunk","id":"1:43988:8943","glob":false}}},"0:5707:3924":{"id":"0:5707:3924","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/string.rs","begin":[1432,4],"end":[1439,5]},"visibility":"public","docs":"Removes the last character from the string buffer and returns it.\n\nReturns [`None`] if this `String` is empty.\n\n# Examples\n\n```\nlet mut s = String::from(\"abč\");\n\nassert_eq!(s.pop(), Some('č'));\nassert_eq!(s.pop(), Some('b'));\nassert_eq!(s.pop(), Some('a'));\n\nassert_eq!(s.pop(), None);\n```","links":{"`None`":"1:41519:190"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1311:4371":{"id":"0:1311:4371","crate_id":0,"name":"Entry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[20,0],"end":[33,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`BTreeMap`].\n\n[`entry`]: BTreeMap::entry","links":{"BTreeMap::entry":"0:1635:4370","`BTreeMap`":"0:1428:99"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BTreeEntry\"]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:1316:4652","0:1319:4651"],"impls":["0:1379","0:1392","a:1:3146:11953-0:1311:4371","a:1:32053:3459-0:1311:4371","a:1:3111:246-0:1311:4371","a:1:31996:236-0:1311:4371","a:1:41612:4469-0:1311:4371","a:1:41611:4468-0:1311:4371","b:1:2888-0:1311:4371","b:1:2618-0:1311:4371","b:1:2615-0:1311:4371","b:1:3727-0:1311:4371","b:1:2892-0:1311:4371","b:1:2903-0:1311:4371","b:1:2898-0:1311:4371","0:1322"]}}},"0:1603:4582":{"id":"0:1603:4582","crate_id":0,"name":"get_key_value","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[724,4],"end":[734,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{},"attrs":["#[stable(feature = \"map_get_key_value\", since = \"1.40.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2145:4997":{"id":"0:2145:4997","crate_id":0,"name":"as_cursor","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2990,4],"end":[2992,5]},"visibility":"public","docs":"Returns a read-only cursor pointing to the same location as the\n`CursorMut`.\n\nThe lifetime of the returned `Cursor` is bound to that of the\n`CursorMut`, which means it cannot outlive the `CursorMut` and that the\n`CursorMut` is frozen for the lifetime of the `Cursor`.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:2710":{"id":"0:349:2710","crate_id":0,"name":"from_raw_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[1007,4],"end":[1009,5]},"visibility":"public","docs":"Constructs a box from a raw pointer in the given allocator.\n\nAfter calling this function, the raw pointer is owned by the\nresulting `Box`. Specifically, the `Box` destructor will call\nthe destructor of `T` and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the [memory layout] used by `Box` .\n\n# Safety\n\nThis function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.\n\n\n# Examples\n\nRecreate a `Box` which was previously converted to a raw pointer\nusing [`Box::into_raw_with_allocator`]:\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet x = Box::new_in(5, System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nlet x = unsafe { Box::from_raw_in(ptr, alloc) };\n```\nManually create a `Box` from scratch by using the system allocator:\n```\n#![feature(allocator_api, slice_ptr_get)]\n\nuse std::alloc::{Allocator, Layout, System};\n\nunsafe {\n    let ptr = System.allocate(Layout::new::<i32>())?.as_mut_ptr() as *mut i32;\n    // In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    ptr.write(5);\n    let x = Box::from_raw_in(ptr, System);\n}\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[memory layout]: self#memory-layout\n[`Layout`]: crate::Layout","links":{"`Box::into_raw_with_allocator`":"0:351:3097","self#memory-layout":"0:142:2398"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:590":{"id":"0:590","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2063,0],"end":[2063,94]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:3104:3002","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3599:3007","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:869:780":{"id":"0:869:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[404,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:943:4057":{"id":"b:1:2892-0:943:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:943:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4158":{"id":"0:4158","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[25,0],"end":[29,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:4149:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4160:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7557:678":{"id":"0:7557:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,9],"end":[111,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5749":{"id":"0:5749","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2078,0],"end":[2083,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"1:2951:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5750:3494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:732:118":{"id":"a:1:32053:3459-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41611:4468-0:2114:4932":{"id":"a:1:41611:4468-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:1342:4372":{"id":"b:1:2618-0:1342:4372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1342:4372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:527:3431":{"id":"0:527:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/boxed.rs","begin":[1960,4],"end":[1962,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:8313:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1714":{"id":"0:1714","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1636,0],"end":[1659,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1718:172","0:1719:4175","0:1720:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7366":{"id":"0:7366","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[51,15],"end":[51,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7367:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3450:198":{"id":"0:3450:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1379,4],"end":[1379,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:4576":{"id":"0:4576","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2689,0],"end":[2725,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:4579:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5018":{"id":"0:5018","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1332,0],"end":[1722,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5021:3225","0:5022:334","0:5023:2710","0:5024:8240","0:5025:8248","0:5026:8123","0:5027:8206","0:5028:8214","0:5030:4637","0:5031:8273","0:5032:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5450":{"id":"0:5450","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[605,0],"end":[647,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"slice":{"primitive":"u8"}},"items":["0:5451:8862","0:5452:8869"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13224:29491":{"id":"1:13224:29491","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5581:487":{"id":"0:5581:487","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/str.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:5922:4150":{"id":"b:1:2888-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:7380:4065":{"id":"b:1:3727-0:7380:4065","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIterSorted","id":"0:7380:4065","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4722:1153":{"id":"0:4722:1153","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[263,4],"end":[319,5]},"visibility":"public","docs":"Creates a new C-compatible string from a container of bytes.\n\nThis function will consume the provided data and use the\nunderlying bytes to construct a new string, ensuring that\nthere is a trailing 0 byte. This trailing 0 byte will be\nappended by this function; the provided data should *not*\ncontain any 0 bytes in it.\n\n# Examples\n\n```ignore (extern-declaration)\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" { fn puts(s: *const c_char); }\n\nlet to_print = CString::new(\"Hello!\").expect(\"CString::new failed\");\nunsafe {\n    puts(to_print.as_ptr());\n}\n```\n\n# Errors\n\nThis function will return an error if the supplied bytes contain an\ninternal 0 byte. The [`NulError`] returned will contain the bytes as well as\nthe position of the nul byte.","links":{"`NulError`":"0:7569:7099"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3554":{"id":"0:3554","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1703,0],"end":[1726,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:3271:5793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3557:172","0:3558:1167","0:3559:3429","0:3560:4798"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:428:810":{"id":"0:428:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1483,4],"end":[1485,5]},"visibility":"default","docs":"Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n`*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`Box::into_pin`].\n\nConstructing and pinning a `Box` with <code><Pin<Box\\<T>>>::from([Box::new]\\(x))</code>\ncan also be written more concisely using <code>[Box::pin]\\(x)</code>.\nThis `From` implementation is useful if you already have a `Box<T>`, or you are\nconstructing a (pinned) `Box` in a different way than with [`Box::new`].","links":{"`Unpin`":"1:32053:3459","Box::new":"0:303:1153","`Box::into_pin`":"0:356:3091","Box::pin":"0:306:1263","`Box::new`":"0:303:1153"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["boxed",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4656:810":{"id":"0:4656:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2912,4],"end":[2927,5]},"visibility":"default","docs":"Turn a [`VecDeque<T>`] into a [`Vec<T>`].\n\n[`Vec<T>`]: crate::vec::Vec\n[`VecDeque<T>`]: crate::collections::VecDeque\n\nThis never needs to re-allocate, but does need to do *O*(*n*) data movement if\nthe circular buffer doesn't happen to be at the beginning of the allocation.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\n// This one is *O*(1).\nlet deque: VecDeque<_> = (1..5).collect();\nlet ptr = deque.as_slices().0.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n\n// This one needs data rearranging.\nlet mut deque: VecDeque<_> = (1..5).collect();\ndeque.push_front(9);\ndeque.push_front(8);\nlet ptr = deque.as_slices().1.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [8, 9, 1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n```","links":{"crate::collections::VecDeque":"0:4423:264","crate::vec::Vec":"0:7048:263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["other",{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3727-0:295:2399":{"id":"b:1:3727-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6404:10447":{"id":"0:6404:10447","crate_id":0,"name":"wake_by_ref","span":{"filename":"library/alloc/src/task.rs","begin":[103,4],"end":[105,5]},"visibility":"default","docs":"Wake this task without consuming the waker.\n\nIf an executor supports a cheaper way to wake without consuming the\nwaker, it should override this method. By default, it clones the\n[`Arc`] and calls [`wake`] on the clone.\n\n[`wake`]: Wake::wake","links":{"Wake::wake":"0:6403:10441","`Arc`":"0:6007:71"},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6758:462":{"id":"0:6758:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[416,4],"end":[418,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7982:678":{"id":"0:7982:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[37,0],"end":[37,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"N"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:5922:4150":{"id":"b:1:2898-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:792:198":{"id":"0:792:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/borrow.rs","begin":[453,4],"end":[453,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"b:1:2903-0:826:101":{"id":"b:1:2903-0:826:101","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3789":{"id":"0:3789","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1312,0],"end":[1316,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"default_iters\", since = \"1.70.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3791:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6651-0:6681:4175":{"id":"0:6651-0:6681:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[98,0],"end":[98,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::into_iter::IntoIter","name":"IntoIter","id":"0:6681:4175","glob":false}}},"1:13136:4637":{"id":"1:13136:4637","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41519:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:732:118":{"id":"b:1:2892-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1749:172":{"id":"0:1749:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1718,4],"end":[1718,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"1:13189:28437":{"id":"1:13189:28437","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367","str::rsplitn":"1:13192:28439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43483:8724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5601:3587":{"id":"0:5601:3587","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/str.rs","begin":[210,4],"end":[212,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1480:4509":{"id":"b:1:2888-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:830:3912":{"id":"a:1:41611:4468-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:7444:209":{"id":"b:1:3727-0:7444:209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Range","id":"0:7444:209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:237:780":{"id":"0:237:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[120,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467:136":{"id":"0:467:136","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/boxed.rs","begin":[1671,4],"end":[1671,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}}}}},"0:5901":{"id":"0:5901","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2847,0],"end":[2865,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5903:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:982:3429":{"id":"0:982:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1524,4],"end":[1526,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1051":{"id":"0:1051","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1691,0],"end":[1691,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:727-0:2089:4918":{"id":"b:0:727-0:2089:4918","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[83,0],"end":[95,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:729:3355","0:730:3587","0:731:3595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5688:3544":{"id":"0:5688:3544","crate_id":0,"name":"from_raw_parts","span":{"filename":"library/alloc/src/string.rs","begin":[960,4],"end":[962,5]},"visibility":"public","docs":"Creates a new `String` from a pointer, a length and a capacity.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* The memory at `buf` needs to have been previously allocated by the\n  same allocator the standard library uses, with a required alignment of exactly 1.\n* `length` needs to be less than or equal to `capacity`.\n* `capacity` needs to be the correct value.\n* The first `length` bytes at `buf` need to be valid UTF-8.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures. For example, it is normally **not** safe to\nbuild a `String` from a pointer to a C `char` array containing UTF-8\n_unless_ you are certain that array was originally allocated by the\nRust standard library's allocator.\n\nThe ownership of `buf` is effectively transferred to the\n`String` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n# Examples\n\n```\nuse std::mem;\n\nunsafe {\n    let s = String::from(\"hello\");\n\n    // Prevent automatically dropping the String's data\n    let mut s = mem::ManuallyDrop::new(s);\n\n    let ptr = s.as_mut_ptr();\n    let len = s.len();\n    let capacity = s.capacity();\n\n    let s = String::from_raw_parts(ptr, len, capacity);\n\n    assert_eq!(String::from(\"hello\"), s);\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:5922:4150":{"id":"b:1:2615-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2892-0:1546:4541":{"id":"b:1:2892-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[119,0],"end":[123,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:237:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6322":{"id":"0:6322","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3324,0],"end":[3341,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_array\", since = \"1.74.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6326:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3317":{"id":"0:3317","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[346,0],"end":[1186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3320:2669","0:3321:4502","0:3324:5833","0:3326:5843","0:3328:5848","0:3330:65","0:3332:4152","0:3333:5864","0:3335:3917","0:3337:5878","0:3338:5886","0:3340:5897","0:3341:5836","0:3343:3431","0:3345:4609","0:3347:4628","0:3349:4498","0:3350:4230","0:3351:4222","0:3353:3926","0:3355:4049","0:3358:3978","0:3359:4749","0:3361:4683","0:3364:954","0:3365:974","0:3366:3440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5448:8852":{"id":"0:5448:8852","crate_id":0,"name":"connect","span":{"filename":"library/alloc/src/slice.rs","begin":[596,4],"end":[601,5]},"visibility":"public","docs":"Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.\n\n# Examples\n\n```\n# #![allow(deprecated)]\nassert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.3.0\", note = \"renamed to join\", suggestion = \"join\")]"],"deprecation":{"since":"1.3.0","note":"renamed to join"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sep",{"generic":"Separator"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Join","id":"0:5457:8847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Separator"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3506":{"id":"0:3506","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1552,0],"end":[1552,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8622:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:599:813":{"id":"0:599:813","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/boxed.rs","begin":[2074,4],"end":[2076,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"I"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7059":{"id":"0:7059","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[608,0],"end":[2502,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:7062:2669","0:7063:2694","0:7064:2696","0:7065:2729","0:7066:7372","0:7067:6959","0:7068:2680","0:7069:2750","0:7070:2768","0:7071:2760","0:7072:2769","0:7073:2775","0:7074:4123","0:7075:3096","0:7076:6589","0:7077:2428","0:7078:5451","0:7079:334","0:7080:2855","0:7081:311","0:7082:3916","0:7083:11040","0:7085:4498","0:7087:4222","0:7089:4049","0:7092:6255","0:7113:11091","0:7117:11090","0:7131:3980","0:7132:11137","0:7133:3924","0:7134:11148","0:7136:3978","0:7138:4149","0:7140:4152","0:7141:974","0:7142:3440","0:7143:4749","0:7145:6786","0:7147:1965","0:7149:8732","0:7150:11264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2152:1167":{"id":"0:2152:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3017,4],"end":[3034,5]},"visibility":"public","docs":"Advances the cursor to the next gap, returning the key and value of the\nelement that it moved over.\n\nIf the cursor is already at the end of the map then `None` is returned\nand the cursor is not moved.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1387:5079":{"id":"0:1387:5079","crate_id":0,"name":"or_insert_with_key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[211,4],"end":[219,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting, if empty, the result of the default function.\nThis method allows for generating key-derived values for insertion by providing the default\nfunction a reference to the key that was moved during the `.entry(key)` method call.\n\nThe reference to the moved key is provided so that cloning or copying the key is\nunnecessary, unlike with `.or_insert_with(|| ... )`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nmap.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n\nassert_eq!(map[\"poneyland\"], 9);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"or_insert_with_key\", since = \"1.50.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3358:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6263:651":{"id":"0:6263:651","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/sync.rs","begin":[3039,4],"end":[3056,5]},"visibility":"default","docs":"Drops the `Weak` pointer.\n\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo = Arc::new(Foo);\nlet weak_foo = Arc::downgrade(&foo);\nlet other_weak_foo = Weak::clone(&weak_foo);\n\ndrop(weak_foo);   // Doesn't print anything\ndrop(foo);        // Prints \"dropped!\"\n\nassert!(other_weak_foo.upgrade().is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7238:172":{"id":"0:7238:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2966,4],"end":[2966,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:5881:335":{"id":"0:5881:335","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2696,4],"end":[2698,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6391:3516":{"id":"0:6391:3516","crate_id":0,"name":"provide","span":{"filename":"library/alloc/src/sync.rs","begin":[3650,4],"end":[3652,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["req",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::error::Request","id":"1:2992:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4574:6933":{"id":"0:4574:6933","crate_id":0,"name":"resize","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2667,4],"end":[2674,5]},"visibility":"public","docs":"Modifies the deque in-place so that `len()` is equal to new_len,\neither by removing excess elements from the back or by appending clones of `value`\nto the back.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize(2, 0);\nassert_eq!(buf, [5, 10]);\n\nbuf.resize(5, 20);\nassert_eq!(buf, [5, 10, 20, 20, 20]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras\", since = \"1.16.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4235:6999":{"id":"0:4235:6999","crate_id":0,"name":"try_fold","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[74,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3554:253","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31996:236-0:1428:99":{"id":"a:1:31996:236-0:1428:99","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:4309:4057":{"id":"b:1:2618-0:4309:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:702:3516":{"id":"0:702:3516","crate_id":0,"name":"provide","span":{"filename":"library/alloc/src/boxed.rs","begin":[2482,4],"end":[2484,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Self"}}}],["request",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::error::Request","id":"1:2992:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:7372:4175":{"id":"b:1:2903-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1059":{"id":"0:1059","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1718,0],"end":[1735,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1063:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4318":{"id":"0:4318","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[25,0],"end":[29,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:4309:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4320:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5202":{"id":"0:5202","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2675,0],"end":[2717,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:5204:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3776:1167":{"id":"0:3776:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1262,4],"end":[1274,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6372":{"id":"0:6372","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3596,0],"end":[3600,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6375:2400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:307":{"id":"0:0:307","crate_id":0,"name":"alloc","span":{"filename":"library/alloc/src/lib.rs","begin":[1,0],"end":[290,1]},"visibility":"public","docs":"# The Rust core allocation and collections library\n\nThis library provides smart pointers and collections for managing\nheap-allocated values.\n\nThis library, like core, normally doesn’t need to be used directly\nsince its contents are re-exported in the [`std` crate](../std/index.html).\nCrates that use the `#![no_std]` attribute however will typically\nnot depend on `std`, so they’d use this crate instead.\n\n## Boxed values\n\nThe [`Box`] type is a smart pointer type. There can only be one owner of a\n[`Box`], and the owner can decide to mutate the contents, which live on the\nheap.\n\nThis type can be sent among threads efficiently as the size of a `Box` value\nis the same as that of a pointer. Tree-like data structures are often built\nwith boxes because each node often has only one owner, the parent.\n\n## Reference counted pointers\n\nThe [`Rc`] type is a non-threadsafe reference-counted pointer type intended\nfor sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and\nonly allows access to `&T`, a shared reference.\n\nThis type is useful when inherited mutability (such as using [`Box`]) is too\nconstraining for an application, and is often paired with the [`Cell`] or\n[`RefCell`] types in order to allow mutation.\n\n## Atomically reference counted pointers\n\nThe [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It\nprovides all the same functionality of [`Rc`], except it requires that the\ncontained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself\nsendable while [`Rc<T>`][`Rc`] is not.\n\nThis type allows for shared access to the contained data, and is often\npaired with synchronization primitives such as mutexes to allow mutation of\nshared resources.\n\n## Collections\n\nImplementations of the most common general purpose data structures are\ndefined in this library. They are re-exported through the\n[standard collections library](../std/collections/index.html).\n\n## Heap interfaces\n\nThe [`alloc`](alloc/index.html) module defines the low-level interface to the\ndefault global allocator. It is not compatible with the libc allocator API.\n\n[`Arc`]: sync\n[`Box`]: boxed\n[`Cell`]: core::cell\n[`Rc`]: rc\n[`RefCell`]: core::cell","links":{"sync":"0:5953:1694","boxed":"0:142:2398","rc":"0:4869:2402","core::cell":"1:4432:8011"},"attrs":["#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]","#![allow(unused_attributes)]","#![stable(feature = \"alloc\", since = \"1.36.0\")]","#![doc(html_playground_url = \"https://play.rust-lang.org/\",\nissue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\ntest(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]","#![doc(cfg_hide(not(test), not(any(test, bootstrap)),\nany(not(feature = \"miri-test-libstd\"), test, doctest), no_global_oom_handling,\nnot(no_global_oom_handling), not(no_rc), not(no_sync), target_has_atomic =\n\"ptr\"))]","#![doc(rust_logo)]","#![feature(rustdoc_internals)]","#![no_std]","#![needs_allocator]","#![deny(unsafe_op_in_unsafe_fn)]","#![deny(fuzzy_provenance_casts)]","#![warn(deprecated_in_future)]","#![warn(missing_debug_implementations)]","#![warn(missing_docs)]","#![allow(explicit_outlives_requirements)]","#![warn(multiple_supertrait_upcastable)]","#![allow(internal_features)]","#![allow(rustdoc::redundant_explicit_links)]","#![deny(ffi_unwind_calls)]","#![feature(const_alloc_error)]","#![feature(const_btree_len)]","#![feature(alloc_layout_extra)]","#![feature(allocator_api)]","#![feature(array_chunks)]","#![feature(array_into_iter_constructors)]","#![feature(array_windows)]","#![feature(ascii_char)]","#![feature(assert_matches)]","#![feature(async_fn_traits)]","#![feature(async_iterator)]","#![feature(coerce_unsized)]","#![feature(const_align_of_val)]","#![feature(const_box)]","#![feature(const_cow_is_borrowed)]","#![feature(const_eval_select)]","#![feature(const_maybe_uninit_as_mut_ptr)]","#![feature(const_maybe_uninit_write)]","#![feature(const_pin)]","#![feature(const_refs_to_cell)]","#![feature(const_size_of_val)]","#![feature(const_waker)]","#![feature(core_intrinsics)]","#![feature(deprecated_suggestion)]","#![feature(deref_pure_trait)]","#![feature(dispatch_from_dyn)]","#![feature(error_generic_member_access)]","#![feature(error_in_core)]","#![feature(exact_size_is_empty)]","#![feature(extend_one)]","#![feature(fmt_internals)]","#![feature(fn_traits)]","#![feature(generic_nonzero)]","#![feature(hasher_prefixfree_extras)]","#![feature(hint_assert_unchecked)]","#![feature(inline_const)]","#![feature(inplace_iteration)]","#![feature(iter_advance_by)]","#![feature(iter_next_chunk)]","#![feature(iter_repeat_n)]","#![feature(layout_for_ptr)]","#![feature(local_waker)]","#![feature(maybe_uninit_slice)]","#![feature(maybe_uninit_uninit_array)]","#![feature(maybe_uninit_uninit_array_transpose)]","#![feature(non_null_convenience)]","#![feature(panic_internals)]","#![feature(pattern)]","#![feature(ptr_internals)]","#![feature(ptr_metadata)]","#![feature(ptr_sub_ptr)]","#![feature(receiver_trait)]","#![feature(set_ptr_value)]","#![feature(sized_type_properties)]","#![feature(slice_from_ptr_range)]","#![feature(slice_index_methods)]","#![feature(slice_ptr_get)]","#![feature(slice_ptr_len)]","#![feature(slice_range)]","#![feature(std_internals)]","#![feature(str_internals)]","#![feature(strict_provenance)]","#![feature(trusted_fused)]","#![feature(trusted_len)]","#![feature(trusted_random_access)]","#![feature(try_trait_v2)]","#![feature(try_with_capacity)]","#![feature(tuple_trait)]","#![feature(unchecked_math)]","#![feature(unicode_internals)]","#![feature(unsize)]","#![feature(utf8_chunks)]","#![feature(vec_pop_if)]","#![feature(coroutine_trait)]","#![feature(allocator_internals)]","#![feature(allow_internal_unstable)]","#![feature(c_unwind)]","#![feature(cfg_sanitize)]","#![feature(const_mut_refs)]","#![feature(const_precise_live_drops)]","#![feature(const_ptr_write)]","#![feature(const_trait_impl)]","#![feature(const_try)]","#![feature(decl_macro)]","#![feature(dropck_eyepatch)]","#![feature(exclusive_range_pattern)]","#![feature(fundamental)]","#![feature(hashmap_internals)]","#![feature(lang_items)]","#![feature(min_specialization)]","#![feature(multiple_supertrait_upcastable)]","#![feature(negative_impls)]","#![feature(never_type)]","#![feature(pointer_is_aligned)]","#![feature(rustc_allow_const_fn_unstable)]","#![feature(rustc_attrs)]","#![feature(slice_internals)]","#![feature(staged_api)]","#![feature(stmt_expr_attributes)]","#![feature(unboxed_closures)]","#![feature(unsized_fn_params)]","#![feature(with_negative_coherence)]","#![feature(doc_cfg)]","#![feature(doc_cfg_hide)]","#![feature(intra_doc_pointers)]","#![doc(html_root_url=\"https://doc.rust-lang.org/nightly/\")]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:98:307","0:142:2398","0:704:2400","0:800:2401","0:4688:763","0:4835:780","0:4869:2402","0:5324:1638","0:5511:1672","0:5631:2403","0:5953:1694","0:6393:2404","0:6440:1877","0:5:1877","0:6:793"],"is_stripped":false}}},"1:13170:12728":{"id":"1:13170:12728","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41519:190","prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1373:780":{"id":"0:1373:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[125,4],"end":[133,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5886":{"id":"0:5886","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2727,0],"end":[2735,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_ref_string\", since = \"1.35.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5887:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1487":{"id":"0:1487","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[397,0],"end":[402,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1490:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2132:1167":{"id":"0:2132:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2885,4],"end":[2898,5]},"visibility":"public","docs":"Advances the cursor to the next gap, returning the key and value of the\nelement that it moved over.\n\nIf the cursor is already at the end of the map then `None` is returned\nand the cursor is not moved.","links":{},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3534:60":{"id":"0:3534:60","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1624,4],"end":[1626,5]},"visibility":"default","docs":"Creates an empty `btree_set::Range`.\n\n```\n# use std::collections::btree_set;\nlet iter: btree_set::Range<'_, u8> = Default::default();\nassert_eq!(iter.count(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3574:4798":{"id":"0:3574:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1783,4],"end":[1785,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5143":{"id":"0:5143","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2417,0],"end":[2436,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5146:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5846":{"id":"0:5846","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2486,0],"end":[2491,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3332:3010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5847:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7234":{"id":"0:7234","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2965,0],"end":[2972,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:7238:172","0:7239:4175","0:7240:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3727-0:1356:4373":{"id":"b:1:3727-0:1356:4373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1356:4373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3712:974":{"id":"0:3712:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Returns the length of the `LinkedList`.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.len(), 1);\n\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\n\ndl.push_back(3);\nassert_eq!(dl.len(), 3);\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"length\", \"size\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2903-0:5922:4150":{"id":"b:1:2903-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1657:172":{"id":"0:1657:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1496,4],"end":[1496,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"0:4657":{"id":"0:4657","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2931,0],"end":[2954,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VecDeque","id":"0:4423:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:4661:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7541:2720":{"id":"0:7541:2720","crate_id":0,"name":"AllocError","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[92,4],"end":[106,5]},"visibility":"default","docs":"The memory allocator returned an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:7542:2714"],"fields_stripped":true}},"discriminant":null}}},"0:7553:7100":{"id":"0:7553:7100","crate_id":0,"name":"CString","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[114,0],"end":[119,1]},"visibility":"public","docs":"A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\nmiddle.\n\nThis type serves the purpose of being able to safely generate a\nC-compatible string from a Rust byte slice or vector. An instance of this\ntype is a static guarantee that the underlying bytes contain no interior 0\nbytes (\"nul characters\") and that the final byte is 0 (\"nul terminator\").\n\n`CString` is to <code>&[CStr]</code> as [`String`] is to <code>&[str]</code>: the former\nin each pair are owned strings; the latter are borrowed\nreferences.\n\n# Creating a `CString`\n\nA `CString` is created from either a byte slice or a byte vector,\nor anything that implements <code>[Into]<[Vec]<[u8]>></code> (for\nexample, you can build a `CString` straight out of a [`String`] or\na <code>&[str]</code>, since both implement that trait).\n\nThe [`CString::new`] method will actually check that the provided <code>&[[u8]]</code>\ndoes not have 0 bytes in the middle, and return an error if it\nfinds one.\n\n# Extracting a raw pointer to the whole C string\n\n`CString` implements an [`as_ptr`][`CStr::as_ptr`] method through the [`Deref`]\ntrait. This method will give you a `*const c_char` which you can\nfeed directly to extern functions that expect a nul-terminated\nstring, like C's `strdup()`. Notice that [`as_ptr`][`CStr::as_ptr`] returns a\nread-only pointer; if the C code writes to it, that causes\nundefined behavior.\n\n# Extracting a slice of the whole C string\n\nAlternatively, you can obtain a <code>&[[u8]]</code> slice from a\n`CString` with the [`CString::as_bytes`] method. Slices produced in this\nway do *not* contain the trailing nul terminator. This is useful\nwhen you will be calling an extern function that takes a `*const\nu8` argument which is not necessarily nul-terminated, plus another\nargument with the length of the string — like C's `strndup()`.\nYou can of course get the slice's length with its\n[`len`][slice::len] method.\n\nIf you need a <code>&[[u8]]</code> slice *with* the nul terminator, you\ncan use [`CString::as_bytes_with_nul`] instead.\n\nOnce you have the kind of slice you need (with or without a nul\nterminator), you can call the slice's own\n[`as_ptr`][slice::as_ptr] method to get a read-only raw pointer to pass to\nextern functions. See the documentation for that function for a\ndiscussion on ensuring the lifetime of the raw pointer.\n\n[str]: prim@str \"str\"\n[`Deref`]: ops::Deref\n\n# Examples\n\n```ignore (extern-declaration)\n# fn main() {\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" {\n    fn my_printer(s: *const c_char);\n}\n\n// We are certain that our string doesn't have 0 bytes in the middle,\n// so we can .expect()\nlet c_to_print = CString::new(\"Hello, world!\").expect(\"CString::new failed\");\nunsafe {\n    my_printer(c_to_print.as_ptr());\n}\n# }\n```\n\n# Safety\n\n`CString` is intended for working with traditional C-style strings\n(a sequence of non-nul bytes terminated by a single nul byte); the\nprimary use case for these kinds of strings is interoperating with C-like\ncode. Often you will need to transfer ownership to/from that external\ncode. It is strongly recommended that you thoroughly read through the\ndocumentation of `CString` before use, as improper ownership management\nof `CString` instances can lead to invalid memory accesses, memory leaks,\nand other memory errors.","links":{"`CStr::as_ptr`":"1:5105:334","`CString::new`":"0:4722:1153","slice::len":"1:12072:974","`CString::as_bytes_with_nul`":"0:4747:7310","prim@str":"1:52084:1672","u8":"1:52095:1800","Into":"1:2862:162","`String`":"0:7632:242","ops::Deref":"1:3319:124","`CString::as_bytes`":"0:4746:3305","slice::as_ptr":"1:12122:334","CStr":"1:40050:106","Vec":"0:7048:263"},"attrs":["#[rustc_diagnostic_item = \"cstring_type\"]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4721","a:1:3146:11953-0:7553:7100","a:1:32053:3459-0:7553:7100","a:1:3111:246-0:7553:7100","a:1:31996:236-0:7553:7100","a:1:41612:4469-0:7553:7100","a:1:41611:4468-0:7553:7100","b:0:727-0:7553:7100","b:1:2888-0:7553:7100","b:1:2618-0:7553:7100","b:1:2615-0:7553:7100","b:1:3727-0:7553:7100","b:1:2892-0:7553:7100","b:1:2903-0:7553:7100","b:1:2898-0:7553:7100","0:4788","0:4791","0:7562","0:7564","0:4754","0:7567","0:4761","0:7556","0:4774","0:4782","0:7558","0:4821","0:4765","0:4780","0:4795","0:7560","0:4819","0:7555","0:4763","0:4767","0:4776","0:4824","0:4759","0:4756"]}}},"0:5952:810":{"id":"0:5952:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[3045,4],"end":[3047,5]},"visibility":"default","docs":"Allocates an owned [`String`] from a single character.\n\n# Example\n```rust\nlet c: char = 'a';\nlet s: String = String::from(c);\nassert_eq!(\"a\", &s[..]);\n```","links":{"`String`":"0:7632:242"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["c",{"primitive":"char"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6214":{"id":"0:6214","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2396,0],"end":[2465,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3348:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6217:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5770":{"id":"0:5770","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2156,0],"end":[2162,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_str2\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5771:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2903-0:830:3912":{"id":"b:1:2903-0:830:3912","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PeekMut","id":"0:830:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2906:136","1:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3870:5177":{"id":"0:3870:5177","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1883,4],"end":[1885,5]},"visibility":"public","docs":"Provides a reference to the back element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]","#[rustc_confusables(\"last\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3477:2785":{"id":"0:3477:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1488,4],"end":[1493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3709:6152":{"id":"0:3709:6152","crate_id":0,"name":"cursor_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[600,4],"end":[602,5]},"visibility":"public","docs":"Provides a cursor at the back element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5371-1:11097:8711":{"id":"0:5371-1:11097:8711","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[61,33],"end":[61,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::Split","name":"Split","id":"1:11097:8711","glob":false}}},"a:1:32053:3459-0:7553:7100":{"id":"a:1:32053:3459-0:7553:7100","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:920:2574":{"id":"0:920:2574","crate_id":0,"name":"into_vec","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1243,4],"end":[1245,5]},"visibility":"public","docs":"Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4, 5, 6, 7]);\nlet vec = heap.into_vec();\n\n// Will print in some order\nfor x in vec {\n    println!(\"{x}\");\n}\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1778:2785":{"id":"0:1778:2785","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1771,4],"end":[1776,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4749:7322":{"id":"0:4749:7322","crate_id":0,"name":"into_boxed_c_str","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[600,4],"end":[602,5]},"visibility":"public","docs":"Converts this `CString` into a boxed [`CStr`].\n\n# Examples\n\n```\nuse std::ffi::{CString, CStr};\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet boxed = c_string.into_boxed_c_str();\nassert_eq!(&*boxed,\n           CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n```","links":{"`CStr`":"1:40050:106"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7580":{"id":"0:7580","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,31],"end":[136,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NulError","id":"0:7569:7099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7581:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6206:8356":{"id":"0:6206:8356","crate_id":0,"name":"unwrap_or_clone","span":{"filename":"library/alloc/src/sync.rs","begin":[2253,4],"end":[2255,5]},"visibility":"public","docs":"If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\nclone.\n\nAssuming `arc_t` is of type `Arc<T>`, this function is functionally equivalent to\n`(*arc_t).clone()`, but will avoid cloning the inner value where possible.\n\n# Examples\n\n```\n# use std::{ptr, sync::Arc};\nlet inner = String::from(\"test\");\nlet ptr = inner.as_ptr();\n\nlet arc = Arc::new(inner);\nlet inner = Arc::unwrap_or_clone(arc);\n// The inner value was not cloned\nassert!(ptr::eq(ptr, inner.as_ptr()));\n\nlet arc = Arc::new(inner);\nlet arc2 = arc.clone();\nlet inner = Arc::unwrap_or_clone(arc);\n// Because there were 2 references, we had to clone the inner value.\nassert!(!ptr::eq(ptr, inner.as_ptr()));\n// `arc2` is the last reference, so when we unwrap it we get back\n// the original `String`.\nlet inner = Arc::unwrap_or_clone(arc2);\nassert!(ptr::eq(ptr, inner.as_ptr()));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"arc_unwrap_or_clone\", since = \"1.76.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:1465:4057":{"id":"b:1:2615-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:1311:4371":{"id":"b:1:2898-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2024:850":{"id":"0:2024:850","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2269,4],"end":[2274,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5844:610":{"id":"0:5844:610","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/string.rs","begin":[2477,4],"end":[2479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:2089:4918":{"id":"b:1:2615-0:2089:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:2089:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1917,0],"end":[1924,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Pointer","id":"1:10262:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:504:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5189":{"id":"0:5189","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2615,0],"end":[2639,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"B"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"","id":"0:723:249","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["0:5192:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3233":{"id":"0:3233","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[114,0],"end":[122,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3236:462","0:3237:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3936":{"id":"0:3936","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2057,0],"end":[2066,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8176:4212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LinkedList","id":"0:3635:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3939:3569","0:3941:2350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7563:469":{"id":"0:7563:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,36],"end":[111,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6343:810":{"id":"0:6343:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[3433,4],"end":[3446,5]},"visibility":"default","docs":"Allocate a reference-counted slice and move `v`'s items into it.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet unique: Vec<i32> = vec![1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(unique);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7131:3980":{"id":"0:7131:3980","crate_id":0,"name":"push","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1966,4],"end":[1977,5]},"visibility":"public","docs":"Appends an element to the back of a collection.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2];\nvec.push(3);\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Time complexity\n\nTakes amortized *O*(1) time. If the vector's length would exceed its\ncapacity after the push, *O*(*capacity*) time is taken to copy the\nvector's elements to a larger allocation. This expensive operation is\noffset by the *capacity* *O*(1) insertions it allows.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_confusables(\"push_back\", \"put\", \"append\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:6681:4175":{"id":"b:1:2892-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1818:974":{"id":"0:1818:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1843,4],"end":[1845,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1929:974":{"id":"0:1929:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2093,4],"end":[2095,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1106":{"id":"0:1106","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1802,0],"end":[1806,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BinaryHeap","id":"0:826:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1108:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2020":{"id":"0:2020","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2268,0],"end":[2275,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeMap","id":"0:1428:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2024:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4543:4049":{"id":"0:4543:4049","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2018,4],"end":[2023,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain(|&x| x % 2 == 0);\nassert_eq!(buf, [2, 4]);\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..6);\n\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\nbuf.retain(|_| *iter.next().unwrap());\nassert_eq!(buf, [2, 3, 5]);\n```","links":{},"attrs":["#[stable(feature = \"vec_deque_retain\", since = \"1.4.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6295:469":{"id":"0:6295:469","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/sync.rs","begin":[3247,4],"end":[3249,5]},"visibility":"default","docs":"Comparison for two `Arc`s.\n\nThe two are compared by calling `cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\nuse std::cmp::Ordering;\n\nlet five = Arc::new(5);\n\nassert_eq!(Ordering::Less, five.cmp(&Arc::new(6)));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"1:30836:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6244":{"id":"0:6244","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2797,0],"end":[2958,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:6247:8595","0:6249:8123","0:6250:8248","0:6252:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3350:4230":{"id":"0:3350:4230","crate_id":0,"name":"replace","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[926,4],"end":[931,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing element, if any, that is\nequal to the value. Returns the replaced element.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```","links":{},"attrs":["#[stable(feature = \"set_recovery\", since = \"1.9.0\")]","#[rustc_confusables(\"swap\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7372:4175":{"id":"b:1:2892-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1379":{"id":"0:1379","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[146,0],"end":[272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1384:5063","0:1385:5071","0:1387:5079","0:1389:4229","0:1390:5092"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5585:8844":{"id":"0:5585:8844","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/str.rs","begin":[76,4],"end":[78,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sep",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:3409":{"id":"0:489:3409","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/boxed.rs","begin":[1862,4],"end":[1864,5]},"visibility":"public","docs":"Attempt to downcast the box to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send + Sync>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1694:3431":{"id":"0:1694:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1586,4],"end":[1588,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:6039:8069":{"id":"b:1:2898-0:6039:8069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weak","id":"0:6039:8069","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3818":{"id":"0:3818","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1381,0],"end":[1498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3822:917","0:3823:6239","0:3824:6241","0:3826:4919","0:3828:4987","0:3830:4991","0:3832:4780","0:3833:5177"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5949:3437":{"id":"0:5949:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/string.rs","begin":[3025,4],"end":[3027,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:3661:4509":{"id":"a:1:3146:11953-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1878:1167":{"id":"0:1878:1167","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1982,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3111:246-0:1536:4534":{"id":"a:1:3111:246-0:1536:4534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:1536:4534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41612:4469-0:1546:4541":{"id":"a:1:41612:4469-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:328:3128":{"id":"0:328:3128","crate_id":0,"name":"try_new_zeroed_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[720,4],"end":[731,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents, with the memory\nbeing filled with `0` bytes. Returns an error if the allocation fails\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet values = Box::<[u32]>::try_new_zeroed_slice(3)?;\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0]);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1817:2850"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"resolved_path":{"name":"mem::MaybeUninit","id":"1:30461:2614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:976:780":{"id":"0:976:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1509,4],"end":[1511,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3919:172":{"id":"0:3919:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2026,4],"end":[2026,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:32053:3459-0:3661:4509":{"id":"a:1:32053:3459-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32053:3459-0:1480:4509":{"id":"a:1:32053:3459-0:1480:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1984:172":{"id":"0:1984:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2188,4],"end":[2188,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"0:4808":{"id":"0:4808","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[981,0],"end":[996,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoStringError","id":"0:7609:7098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4809:7407","0:4810:7287"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4984:3059":{"id":"0:4984:3059","crate_id":0,"name":"try_new_in","span":{"filename":"library/alloc/src/rc.rs","begin":[791,4],"end":[801,5]},"visibility":"public","docs":"Constructs a new `Rc<T>` in the provided allocator, returning an error if the allocation\nfails\n\n# Examples\n\n```\n#![feature(allocator_api)]\nuse std::rc::Rc;\nuse std::alloc::System;\n\nlet five = Rc::try_new_in(5, System);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}],["alloc",{"generic":"A"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"AllocError","id":"1:44405:2720","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1605:4590":{"id":"0:1605:4590","crate_id":0,"name":"first_key_value","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[751,4],"end":[757,5]},"visibility":"public","docs":"Returns the first key-value pair in the map.\nThe key in this pair is the minimum key in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.first_key_value(), None);\nmap.insert(1, \"b\");\nmap.insert(2, \"a\");\nassert_eq!(map.first_key_value(), Some((&1, &\"b\")));\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8171-0:6681:4175":{"id":"b:1:8171-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1695:4798":{"id":"0:1695:4798","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1590,4],"end":[1595,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2618-0:1546:4541":{"id":"b:1:2618-0:1546:4541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:1546:4541","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2898-0:3792:4918":{"id":"b:1:2898-0:3792:4918","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cursor","id":"0:3792:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4492:4637":{"id":"0:4492:4637","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[697,4],"end":[704,5]},"visibility":"public","docs":"Provides a mutable reference to the element at the given index.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nbuf.push_back(6);\nassert_eq!(buf[1], 4);\nif let Some(elem) = buf.get_mut(1) {\n    *elem = 7;\n}\nassert_eq!(buf[1], 7);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:639":{"id":"0:639","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2173,0],"end":[2179,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"futures_api\", since = \"1.36.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Future","id":"1:44290:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:44290:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:642:198","0:643:1271"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5141:847":{"id":"0:5141:847","crate_id":0,"name":"gt","span":{"filename":"library/alloc/src/rc.rs","begin":[2393,4],"end":[2395,5]},"visibility":"default","docs":"Greater-than comparison for two `Rc`s.\n\nThe two are compared by calling `>` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five > Rc::new(4));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5731:3440":{"id":"0:5731:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/string.rs","begin":[1776,4],"end":[1778,5]},"visibility":"public","docs":"Returns `true` if this `String` has a length of zero, and `false` otherwise.\n\n# Examples\n\n```\nlet mut v = String::new();\nassert!(v.is_empty());\n\nv.push('a');\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3146:11953-0:5922:4150":{"id":"a:1:3146:11953-0:5922:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:5922:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:218:3019":{"id":"b:1:2615-0:218:3019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThinBox","id":"0:218:3019","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7564":{"id":"0:7564","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[111,41],"end":[111,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7565:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5598:3455":{"id":"0:5598:3455","crate_id":0,"name":"borrow_mut","span":{"filename":"library/alloc/src/str.rs","begin":[200,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1779":{"id":"0:1779","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1780,0],"end":[1784,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1783:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13230:28446":{"id":"1:13230:28446","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5692:9496":{"id":"0:5692:9496","crate_id":0,"name":"as_mut_str","span":{"filename":"library/alloc/src/string.rs","begin":[1047,4],"end":[1049,5]},"visibility":"public","docs":"Converts a `String` into a mutable string slice.\n\n# Examples\n\n```\nlet mut s = String::from(\"foobar\");\nlet s_mut_str = s.as_mut_str();\n\ns_mut_str.make_ascii_uppercase();\n\nassert_eq!(\"FOOBAR\", s_mut_str);\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"string_as_str\", since = \"1.7.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3563":{"id":"0:3563","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1732,0],"end":[1746,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3566:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6494:3429":{"id":"0:6494:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:1465:4057":{"id":"a:1:41611:4468-0:1465:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1465:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2898-0:7538:2621":{"id":"b:1:2898-0:7538:2621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveErrorKind","id":"0:7538:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3752":{"id":"0:3752","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1190,0],"end":[1217,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3755:172","0:3756:1167","0:3758:3429","0:3759:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13251:28323":{"id":"1:13251:28323","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:980:33075"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:354:1965":{"id":"0:354:1965","crate_id":0,"name":"leak","span":{"filename":"library/alloc/src/boxed.rs","begin":[1182,4],"end":[1187,5]},"visibility":"public","docs":"Consumes and leaks the `Box`, returning a mutable reference,\n`&'a mut T`. Note that the type `T` must outlive the chosen lifetime\n`'a`. If the type has only static references, or none at all, then this\nmay be chosen to be `'static`.\n\nThis function is mainly useful for data that lives for the remainder of\nthe program's life. Dropping the returned reference will cause a memory\nleak. If this is not acceptable, the reference should first be wrapped\nwith the [`Box::from_raw`] function producing a `Box`. This `Box` can\nthen be dropped which will properly destroy `T` and release the\nallocated memory.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::leak(b)` instead of `b.leak()`. This\nis so that there is no conflict with a method on the inner type.\n\n# Examples\n\nSimple usage:\n\n```\nlet x = Box::new(41);\nlet static_ref: &'static mut usize = Box::leak(x);\n*static_ref += 1;\nassert_eq!(*static_ref, 42);\n```\n\nUnsized data:\n\n```\nlet x = vec![1, 2, 3].into_boxed_slice();\nlet static_ref = Box::leak(x);\nstatic_ref[0] = 4;\nassert_eq!(*static_ref, [4, 2, 3]);\n```","links":{"`Box::from_raw`":"0:345:3190"},"attrs":["#[stable(feature = \"box_leak\", since = \"1.26.0\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550:974":{"id":"0:550:974","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/boxed.rs","begin":[2002,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1496:4175":{"id":"b:1:2888-0:1496:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41611:4468-0:3279:5798":{"id":"a:1:41611:4468-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3146:11953-0:7480:4175":{"id":"a:1:3146:11953-0:7480:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3146:11953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7480:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3361:4683":{"id":"0:3361:4683","crate_id":0,"name":"extract_if","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1111,4],"end":[1118,5]},"visibility":"public","docs":"Creates an iterator that visits all elements in ascending order and\nuses a closure to determine if an element should be removed.\n\nIf the closure returns `true`, the element is removed from the set and\nyielded. If the closure returns `false`, or panics, the element remains\nin the set and will not be yielded.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse [`retain`] with a negated predicate if you do not need the returned iterator.\n\n[`retain`]: BTreeSet::retain\n# Examples\n\nSplitting a set into even and odd values, reusing the original set:\n\n```\n#![feature(btree_extract_if)]\nuse std::collections::BTreeSet;\n\nlet mut set: BTreeSet<i32> = (0..8).collect();\nlet evens: BTreeSet<_> = set.extract_if(|v| v % 2 == 0).collect();\nlet odds = set;\nassert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![0, 2, 4, 6]);\nassert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 7]);\n```","links":{"BTreeSet::retain":"0:3355:4049"},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"Self"}}}],["pred",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:632":{"id":"0:632","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2160,0],"end":[2170,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"coroutine_trait\", issue = \"43122\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Coroutine","id":"1:3301:3008","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"core::pin::Pin","id":"1:41622:3013","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"G"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:636:267","0:637:227","0:638:1403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31996:236-0:295:2399":{"id":"a:1:31996:236-0:295:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7365":{"id":"0:7365","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[51,9],"end":[51,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2075:955":{"id":"0:2075:955","crate_id":0,"name":"iter_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2411,4],"end":[2419,5]},"visibility":"public","docs":"Gets a mutable iterator over the entries of the map, sorted by key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::from([\n   (\"a\", 1),\n   (\"b\", 2),\n   (\"c\", 3),\n]);\n\n// add 10 to the value if the key isn't \"a\"\nfor (key, value) in map.iter_mut() {\n    if key != &\"a\" {\n        *value += 10;\n    }\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3305:5807":{"id":"b:1:2898-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:4320:780":{"id":"0:4320:780","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4820:810":{"id":"0:4820:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1031,4],"end":[1033,5]},"visibility":"default","docs":"Converts a <code>&[CStr]</code> into a [`CString`]\nby copying the contents into a new allocation.","links":{"CStr":"1:40050:106","`CString`":"0:7553:7100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"CString","id":"0:7553:7100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2615-0:3305:5807":{"id":"b:1:2615-0:3305:5807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:3305:5807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7534":{"id":"0:7534","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,27],"end":[59,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:7536":{"id":"0:7536","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,31],"end":[59,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7537:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5574-1:43429:8941":{"id":"0:5574-1:43429:8941","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[55,38],"end":[55,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::SplitTerminator","name":"SplitTerminator","id":"1:43429:8941","glob":false}}},"a:1:41611:4468-0:7402:4039":{"id":"a:1:41611:4468-0:7402:4039","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:7372:4175":{"id":"b:1:2618-0:7372:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7372:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13221:29490":{"id":"1:13221:29490","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:52078:458","self::pattern":"1:12812:2367"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12838:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3660:462":{"id":"0:3660:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3343:3431":{"id":"0:3343:3431","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[821,4],"end":[826,5]},"visibility":"public","docs":"Returns a reference to the last element in the set, if any.\nThis element is always the maximum of all elements in the set.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nassert_eq!(set.last(), None);\nset.insert(1);\nassert_eq!(set.last(), Some(&1));\nset.insert(2);\nassert_eq!(set.last(), Some(&2));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"map_first_last\", since = \"1.66.0\")]","#[rustc_confusables(\"back\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:6681:4175":{"id":"a:1:32053:3459-0:6681:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:6681:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:4833:3494":{"id":"0:4833:3494","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1137,4],"end":[1139,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:7472:4175":{"id":"b:1:2892-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2147,0],"end":[2147,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377:462":{"id":"0:377:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/boxed.rs","begin":[1336,4],"end":[1340,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:732:118":{"id":"b:1:2888-0:732:118","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"B"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5355-1:11932:3544":{"id":"0:5355-1:11932:3544","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[51,22],"end":[51,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::from_raw_parts","name":"from_raw_parts","id":"1:11932:3544","glob":false}}},"0:4692-0:7569:7099":{"id":"0:4692-0:7569:7099","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[85,60],"end":[85,68]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"inner":{"import":{"source":"self::c_str::NulError","name":"NulError","id":"0:7569:7099","glob":false}}},"0:7416":{"id":"0:7416","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3396,16],"end":[3396,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"UnorderedKeyError","id":"0:7412:5026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7417:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32053:3459-0:6554:4150":{"id":"a:1:32053:3459-0:6554:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:6554:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3727-0:7472:4175":{"id":"b:1:3727-0:7472:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7472:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1745":{"id":"0:1745","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1717,0],"end":[1728,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1496:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1749:172","0:1750:1167","0:1752:3429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1949,0],"end":[1963,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take_while","collect","ge","enumerate","max_by","is_sorted","take","partial_cmp_by","position","try_for_each","map","filter","inspect","map_while","min","all","zip","ne","max_by_key","eq","try_fold","eq_by","rposition","reduce","try_collect","any","scan","step_by","count","fold","next_chunk","partial_cmp","is_sorted_by","unzip","try_reduce","for_each","collect_into","skip_while","flat_map","sum","intersperse","by_ref","size_hint","skip","array_chunks","is_sorted_by_key","__iterator_get_unchecked","cycle","find","le","partition","flatten","rev","intersperse_with","cloned","lt","nth","min_by","advance_by","product","find_map","partition_in_place","map_windows","filter_map","chain","copied","last","min_by_key","max","cmp","cmp_by","try_find","gt","is_partitioned","peekable","fuse"],"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:523:172","0:524:1167","0:525:3429","0:526:3430","0:527:3431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6492:172":{"id":"0:6492:172","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/extract_if.rs","begin":[59,4],"end":[59,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:8171-0:7392:4150":{"id":"b:1:8171-0:7392:4150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8313:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:7392:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8173:172","1:8174:4175","1:8175:933"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:7698:678":{"id":"0:7698:678","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2350,0],"end":[2350,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5008:359":{"id":"0:5008:359","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/rc.rs","begin":[1145,4],"end":[1151,5]},"visibility":"public","docs":"Converts to `Rc<T>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut five = Rc::<u32>::new_uninit();\n\n// Deferred initialization:\nRc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{"mem::MaybeUninit::assume_init":"1:1821:359"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2892-0:4925:216":{"id":"b:1:2892-0:4925:216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:3661:4509":{"id":"a:1:41612:4469-0:3661:4509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:3661:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2618-0:1518:4524":{"id":"b:1:2618-0:1518:4524","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:1518:4524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2620:3455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3396:933":{"id":"0:3396:933","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1262,4],"end":[1264,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:3238:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7313:3458":{"id":"0:7313:3458","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3278,4],"end":[3280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4843-1:10256:7835":{"id":"0:4843-1:10256:7835","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[584,20],"end":[584,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Binary","name":"Binary","id":"1:10256:7835","glob":false}}},"0:5378-1:43296:8715":{"id":"0:5378-1:43296:8715","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[65,31],"end":[65,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::RChunksExact","name":"RChunksExact","id":"1:43296:8715","glob":false}}},"0:7071:2760":{"id":"0:7071:2760","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1011,4],"end":[1013,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    let mut output = Vec::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:7527:2620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4846-1:10247:119":{"id":"0:4846-1:10247:119","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[586,20],"end":[586,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::fmt::Debug","name":"Debug","id":"1:10247:119","glob":false}}},"b:1:2892-0:6007:71":{"id":"b:1:2892-0:6007:71","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32053:3459-0:1311:4371":{"id":"a:1:32053:3459-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:5854-0:6007:71":{"id":"b:0:5854-0:6007:71","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2546,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7274:4213":{"id":"0:7274:4213","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3194,4],"end":[3196,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:7621:8665":{"id":"b:1:2898-0:7621:8665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:943:4057":{"id":"0:943:4057","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1427,0],"end":[1429,1]},"visibility":"public","docs":"An iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::iter()`]. See its\ndocumentation for more.\n\n[`iter`]: BinaryHeap::iter","links":{"`BinaryHeap::iter()`":"0:909:954"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:943:4057","a:1:32053:3459-0:943:4057","a:1:3111:246-0:943:4057","a:1:31996:236-0:943:4057","a:1:41612:4469-0:943:4057","a:1:41611:4468-0:943:4057","b:0:727-0:943:4057","b:1:8171-0:943:4057","b:1:2888-0:943:4057","b:1:2618-0:943:4057","b:1:2615-0:943:4057","b:1:3727-0:943:4057","b:1:2892-0:943:4057","b:1:2903-0:943:4057","b:1:2898-0:943:4057","0:967","0:947","0:953","0:960","0:950","0:964"]}}},"0:1392":{"id":"0:1392","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[274,0],"end":[295,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1397:5098"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3405":{"id":"0:3405","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1286,0],"end":[1294,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_extract_if\", issue = \"70530\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:3397:4776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3409:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1659:3429":{"id":"0:1659:3429","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1507,4],"end":[1509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:3648:4057":{"id":"b:1:2898-0:3648:4057","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:3648:4057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7950":{"id":"0:7950","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[31,0],"end":[31,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2665:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"0:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:7954:678","0:7955:1135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5904":{"id":"0:5904","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2869,0],"end":[2873,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8163:144","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::borrow::Cow","id":"0:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"items":["0:5906:813"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1054":{"id":"0:1054","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1709,0],"end":[1715,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2701:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DrainSorted","id":"0:7402:4039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1058:311"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3384":{"id":"0:3384","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1236,0],"end":[1255,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8167:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:3387:172","0:3388:4175","0:3389:933"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4496:2750":{"id":"0:4496:2750","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[807,4],"end":[819,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted in the given\ndeque. The collection may reserve more space to speculatively avoid frequent reallocations.\n\n# Panics\n\nPanics if the new capacity overflows `usize`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = [1].into();\nbuf.reserve(10);\nassert!(buf.capacity() >= 11);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2888-0:1311:4371":{"id":"b:1:2888-0:1311:4371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1311:4371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2891:2716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2901:136":{"id":"1:2901:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:2146:5000":{"id":"0:2146:5000","crate_id":0,"name":"with_mutable_key","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[3005,4],"end":[3007,5]},"visibility":"public","docs":"Converts the cursor into a [`CursorMutKey`], which allows mutating\nthe key of elements in the tree.\n\n# Safety\n\nSince this cursor allows mutating keys, you must ensure that the `BTreeMap`\ninvariants are maintained. Specifically:\n\n* The key of the newly inserted element must be unique in the tree.\n* All keys in the tree must remain in sorted order.","links":{"`CursorMutKey`":"0:2114:4932"},"attrs":["#[unstable(feature = \"btree_cursors\", issue = \"107540\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41611:4468-0:7436:4175":{"id":"a:1:41611:4468-0:7436:4175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41611:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:7436:4175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3961:1135":{"id":"0:3961:1135","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2098,4],"end":[2100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4798:810":{"id":"0:4798:810","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[906,4],"end":[909,5]},"visibility":"default","docs":"Converts a `&CStr` into a `Rc<CStr>`,\nby copying the contents into a newly allocated [`Rc`].","links":{"`Rc`":"0:4925:216"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Rc","id":"0:4925:216","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:40050:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6329":{"id":"0:6329","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[3345,0],"end":[3360,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2865:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Arc","id":"0:6007:71","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"items":["0:6331:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1678:462":{"id":"0:1678:462","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1554,4],"end":[1556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5356-1:11935:3545":{"id":"0:5356-1:11935:3545","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[51,38],"end":[51,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::slice::from_raw_parts_mut","name":"from_raw_parts_mut","id":"1:11935:3545","glob":false}}},"b:1:2615-0:3245:5783":{"id":"b:1:2615-0:3245:5783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:3245:5783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1697":{"id":"0:1697","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1606,0],"end":[1615,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","try_rfold","rfold","nth_back","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8205:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:1480:4509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1701:3437"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3445:198":{"id":"0:3445:198","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1354,4],"end":[1354,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"BTreeSet","id":"0:3209:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:3763:3437":{"id":"0:3763:3437","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1222,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4171:6999":{"id":"0:4171:6999","crate_id":0,"name":"try_fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[75,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8313:177","args":null}}}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3554:253","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2898-0:2114:4932":{"id":"b:1:2898-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2901:136","1:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1577:4553":{"id":"0:1577:4553","crate_id":0,"name":"RangeMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[595,0],"end":[600,1]},"visibility":"public","docs":"A mutable iterator over a sub-range of entries in a `BTreeMap`.\n\nThis `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`range_mut`]: BTreeMap::range_mut","links":{"BTreeMap::range_mut":"0:1632:4727","`BTreeMap`":"0:1428:99"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3146:11953-0:1577:4553","a:1:32053:3459-0:1577:4553","a:1:3111:246-0:1577:4553","a:1:31996:236-0:1577:4553","a:1:41612:4469-0:1577:4553","a:1:41611:4468-0:1577:4553","b:1:8171-0:1577:4553","b:1:2888-0:1577:4553","b:1:2618-0:1577:4553","b:1:2615-0:1577:4553","b:1:3727-0:1577:4553","b:1:2892-0:1577:4553","b:1:2903-0:1577:4553","b:1:2898-0:1577:4553","0:1994","0:1583","0:1989","0:1980"]}}},"0:5309":{"id":"0:5309","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[3510,0],"end":[3564,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"UniqueRc","id":"0:7621:8665","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:5311:1153","0:5312:8240","0:5313:8678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5545-1:43349:8925":{"id":"0:5545-1:43349:8925","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,66],"end":[36,71]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::Chars","name":"Chars","id":"1:43349:8925","glob":false}}},"a:1:31996:236-0:3279:5798":{"id":"a:1:31996:236-0:3279:5798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:3279:5798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7392:4150":{"id":"0:7392:4150","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/collections/binary_heap/mod.rs","begin":[1644,0],"end":[1650,1]},"visibility":"public","docs":"A draining iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::drain()`]. See its\ndocumentation for more.\n\n[`drain`]: BinaryHeap::drain","links":{"`BinaryHeap::drain()`":"0:924:4149"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:13756:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"crate::alloc::Global","id":"0:7363:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1033","a:1:3146:11953-0:7392:4150","a:1:32053:3459-0:7392:4150","a:1:3111:246-0:7392:4150","a:1:31996:236-0:7392:4150","a:1:41612:4469-0:7392:4150","a:1:41611:4468-0:7392:4150","b:1:8171-0:7392:4150","b:1:2888-0:7392:4150","b:1:2618-0:7392:4150","b:1:2615-0:7392:4150","b:1:3727-0:7392:4150","b:1:2892-0:7392:4150","b:1:2903-0:7392:4150","b:1:2898-0:7392:4150","0:1037","0:7397","0:1051","0:1047","0:1043"]}}},"a:1:32053:3459-0:1557:4545":{"id":"a:1:32053:3459-0:1557:4545","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:1557:4545","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2615-0:7645:9281":{"id":"b:1:2615-0:7645:9281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FromUtf8Error","id":"0:7645:9281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2617:2400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3727-0:1527:4528":{"id":"b:1:3727-0:1527:4528","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31997:2893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:1527:4528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41612:4469-0:2114:4932":{"id":"a:1:41612:4469-0:2114:4932","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41612:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CursorMutKey","id":"0:2114:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3431:2350":{"id":"0:3431:2350","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1327,4],"end":[1329,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["elem",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5016:8205":{"id":"0:5016:8205","crate_id":0,"name":"increment_strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[1293,4],"end":[1295,5]},"visibility":"public","docs":"Increments the strong reference count on the `Rc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Rc::into_raw`, the\nassociated `Rc` instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method, and `ptr` must point to a block of memory\nallocated by the global allocator.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nunsafe {\n    let ptr = Rc::into_raw(five);\n    Rc::increment_strong_count(ptr);\n\n    let five = Rc::from_raw(ptr);\n    assert_eq!(2, Rc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7092:6255":{"id":"0:7092:6255","crate_id":0,"name":"retain_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1678,4],"end":[1769,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate, passing a mutable reference to it.\n\nIn other words, remove all elements `e` such that `f(&mut e)` returns `false`.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3, 4];\nvec.retain_mut(|x| if *x <= 3 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(vec, [2, 3, 4]);\n```","links":{},"attrs":["#[stable(feature = \"vec_retain_mut\", since = \"1.61.0\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3355:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5620:7285":{"id":"0:5620:7285","crate_id":0,"name":"into_string","span":{"filename":"library/alloc/src/str.rs","begin":[500,4],"end":[503,5]},"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"0:295:2399","`String`":"0:7632:242"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[rustc_allow_incoherent_impl]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"0:295:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"0:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32053:3459-0:7597:7097":{"id":"a:1:32053:3459-0:7597:7097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32053:3459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FromVecWithNulError","id":"0:7597:7097","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:5539-1:12366:3545":{"id":"0:5539-1:12366:3545","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,36],"end":[34,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"str_from_raw_parts\", issue = \"119206\")]"],"deprecation":null,"inner":{"import":{"source":"core::str::from_raw_parts_mut","name":"from_raw_parts_mut","id":"1:12366:3545","glob":false}}},"0:4355:3440":{"id":"0:4355:3440","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:42504:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"0:5:1877":{"crate_id":0,"path":["alloc","vec"],"kind":"macro"},"1:9946:7840":{"crate_id":1,"path":["core","fmt","builders","DebugTuple"],"kind":"struct"},"1:21458:27588":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:44369:11988":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:10266:7843":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:43185:8704":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:44182:19078":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:41279:15162":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:39969:8932":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:39130:11981":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:12818:8910":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2609:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:43940:12225":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11072:4509":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:21578:14995":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:44378:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:46468:15309":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:12628:8727":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:41953:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:22724:24920":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:52081:1269":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:3832:4150":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:21473:27591":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:45281:15196":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:42488:25427":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:40093:8923":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:2608:2400":{"crate_id":1,"path":["core","borrow"],"kind":"module"},"1:22876:24893":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:12363:8927":{"crate_id":1,"path":["core","str","converts","from_utf8_unchecked_mut"],"kind":"function"},"1:6035:11934":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:21558:24893":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"0:704:2400":{"crate_id":0,"path":["alloc","borrow"],"kind":"module"},"0:7527:2620":{"crate_id":0,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"0:738:3355":{"crate_id":0,"path":["alloc","borrow","Cow","Owned"],"kind":"variant"},"1:32659:11965":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8621:3829":{"crate_id":1,"path":["core","iter","traits","marker","TrustedFused"],"kind":"trait"},"1:4336:15609":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"0:3635:181":{"crate_id":0,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:22674:15403":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:43529:8936":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:43204:8708":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"0:4866:793":{"crate_id":0,"path":["alloc","fmt","format"],"kind":"function"},"1:30429:2613":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:10202:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"0:830:3912":{"crate_id":0,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:44290:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:10715:14610":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:43903:12224":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:52095:1800":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:40050:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:45567:15229":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:45818:15242":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:5862:6471":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10256:7835":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:39992:13698":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:43761:12218":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:45396:15211":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:42736:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:40103:7105":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8628:3827":{"crate_id":1,"path":["core","iter","traits","marker","InPlaceIterable"],"kind":"trait"},"1:42530:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:43696:8932":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:37833:11978":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:41457:19068":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:10254:7836":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"0:723:249":{"crate_id":0,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:42459:7830":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:30482:7830":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:9723:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:43277:8714":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:37723:11976":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:41611:4468":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"0:3792:4918":{"crate_id":0,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"0:111:585":{"crate_id":0,"path":["alloc","alloc","dealloc"],"kind":"function"},"1:44417:15463":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4543:8012":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"0:3872:4776":{"crate_id":0,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:13701:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:52089:733":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:30493:24914":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:5958:6471":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:41612:4469":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:43296:8715":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:5247:954":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:22553:15400":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12812:2367":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:13644:10393":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:39985:8930":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3481:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:5146:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:40187:11929":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:2498:11860":{"crate_id":1,"path":["core","ptr","null"],"kind":"function"},"1:12364:3544":{"crate_id":1,"path":["core","str","converts","from_raw_parts"],"kind":"function"},"1:4617:12091":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"0:3648:4057":{"crate_id":0,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:16:11825":{"crate_id":1,"path":["core","writeln"],"kind":"macro"},"1:1937:4230":{"crate_id":1,"path":["core","mem","replace"],"kind":"function"},"1:12344:12039":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:41914:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:44006:8944":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:42758:15439":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:9402:8910":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:45928:15262":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:43338:8928":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:40004:13699":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:12551:12088":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11359:8725":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44171:15460":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:21487:27583":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:52077:1149":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:52102:1371":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:9711:375":{"crate_id":1,"path":["core","sync","atomic"],"kind":"module"},"1:12514:12086":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:41561:4175":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:6149:11925":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:44105:12078":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:21456:27580":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:22990:15023":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:2044:3544":{"crate_id":1,"path":["core","ptr","metadata","from_raw_parts"],"kind":"function"},"1:45413:15212":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8622:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12886:12212":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:45375:15206":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:2522:3831":{"crate_id":1,"path":["core","ptr","swap"],"kind":"function"},"1:39958:13705":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:9910:15553":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:10471:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:44113:12080":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:39260:5685":{"crate_id":1,"path":["core","ops","range","Bound","Included"],"kind":"variant"},"1:15:2895":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:42970:8691":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:44121:12075":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:3348:2794":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:22253:24186":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:39977:8931":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"0:7472:4175":{"crate_id":0,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:43365:8923":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:22469:24181":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:41695:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:41698:224":{"crate_id":1,"path":["core","sync","atomic","Ordering","Release"],"kind":"variant"},"1:43828:12222":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:41696:223":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"1:10260:7845":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2128:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"0:826:101":{"crate_id":0,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:21507:24102":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:43306:8716":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"0:7538:2621":{"crate_id":0,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:44147:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:40151:15617":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:11179:8712":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4360:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:5167:28032":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:52084:1672":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"0:7372:4175":{"crate_id":0,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2665:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:43379:8711":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:22117:24100":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:22659:14996":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:32845:11968":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3184:3004":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:2715:4798":{"crate_id":1,"path":["core","cmp","min"],"kind":"function"},"1:21984:12040":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1537:294":{"crate_id":1,"path":["core","intrinsics","abort"],"kind":"function"},"1:23012:15025":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:44315:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"0:7569:7099":{"crate_id":0,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:7609:7098":{"crate_id":0,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:2533:9086":{"crate_id":1,"path":["core","ptr","read_unaligned"],"kind":"function"},"1:43797:12220":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11097:8711":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:42711:11903":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:46155:15300":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8625:3830":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:42719:15438":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:41257:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:12590:12087":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11891:8703":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:11373:8723":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:734:12016":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"0:6007:71":{"crate_id":0,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1863:6471":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:10903:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:39046:11987":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"0:4665:3696":{"crate_id":0,"path":["alloc","collections","btree_set"],"kind":"module"},"1:52078:458":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:41445:15436":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11932:3544":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:40270:11935":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:22844:12015":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2992:3518":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:7595:6990":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3104:3002":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:42216:7836":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:22913:15016":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:31987:4181":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:40238:11932":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:44348:10391":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4696:11994":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:31973:15616":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:43811:12221":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:21957:24893":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:1110:2611":{"crate_id":1,"path":["core","hint"],"kind":"module"},"1:11252:8720":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:42551:7834":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:40131:12064":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:2541:11869":{"crate_id":1,"path":["core","ptr","write_volatile"],"kind":"function"},"1:52076:405":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:8055:6393":{"crate_id":1,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"1:3242:11973":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:45524:15219":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"0:7621:8665":{"crate_id":0,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:39158:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:8163:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:12574:12085":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:39288:11983":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:13696:307":{"crate_id":1,"path":["core","alloc"],"kind":"module"},"1:44356:10392":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:1765:2612":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:22782:24916":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:22341:24385":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:3355:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:41630:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:1913:1635":{"crate_id":1,"path":["core","mem","size_of_val"],"kind":"function"},"1:4741:12100":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:40322:4291":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:23034:15027":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:42748:15186":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:31924:9779":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:41553:4509":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:8167:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:4973:9397":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:38467:11980":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:22831:12029":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:0:543":{"crate_id":1,"path":["core"],"kind":"module"},"0:6393:2404":{"crate_id":0,"path":["alloc","task"],"kind":"module"},"1:2631:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:46409:15306":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:3187:3005":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3153:11870":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2836:14059":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:45480:15216":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"0:6:793":{"crate_id":0,"path":["alloc","format"],"kind":"macro"},"1:40279:11936":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:40247:11933":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:42727:11902":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40218:11930":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:43633:8934":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"0:6039:8069":{"crate_id":0,"path":["alloc","sync","Weak"],"kind":"struct"},"1:46232:15301":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:45495:15217":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:52079:1822":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:4797:11996":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:22797:24912":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:39143:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10597:7106":{"crate_id":1,"path":["core","slice","memchr"],"kind":"module"},"1:11945:8696":{"crate_id":1,"path":["core","slice","raw","from_mut_ptr_range"],"kind":"function"},"1:1939:651":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:2539:2833":{"crate_id":1,"path":["core","ptr","read_volatile"],"kind":"function"},"1:40228:11931":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:25886:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"0:3807:4931":{"crate_id":0,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7927:812":{"crate_id":1,"path":["core","iter","sources","from_fn","from_fn"],"kind":"function"},"1:43671:8916":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:43601:8939":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2940:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:40772:11919":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"0:98:307":{"crate_id":0,"path":["alloc","alloc"],"kind":"module"},"1:10203:7841":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:52103:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:45687:15235":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:6658:11946":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3636:3012":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:46430:15307":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:40288:11945":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:45605:15231":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8205:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:33452:5740":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:22924:15017":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:40371:11941":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7659:16615":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:22115:24893":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:41536:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"0:7363:2619":{"crate_id":0,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4383:2999":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11331:8724":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"0:5624:3015":{"crate_id":0,"path":["alloc","str","from_boxed_utf8_unchecked"],"kind":"function"},"1:3337:3011":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"0:4694:419":{"crate_id":0,"path":["alloc","ffi","c_str"],"kind":"module"},"1:42033:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:31996:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:3965:4175":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10893:24893":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:23486:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44307:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2707:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:30210:12013":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:46477:15310":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43251:8686":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3162:5743":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:43286:8717":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:35847:11975":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2039:3520":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11345:8722":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:43643:8935":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"0:3620:3692":{"crate_id":0,"path":["alloc","collections","linked_list"],"kind":"module"},"1:46057:15267":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:41545:4057":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:45311:15200":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:45734:15238":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:46587:15322":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2656:469":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:3342:219":{"crate_id":1,"path":["core","ops","deref","Receiver"],"kind":"trait"},"1:11048:4057":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"0:5511:1672":{"crate_id":0,"path":["alloc","str"],"kind":"module"},"1:39266:5693":{"crate_id":1,"path":["core","ops","range","Bound","Unbounded"],"kind":"variant"},"1:43349:8925":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8313:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:31980:11994":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"0:5852:250":{"crate_id":0,"path":["alloc","string","ToString"],"kind":"trait"},"1:44093:12074":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:39126:4364":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:22329:24188":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:13664:10390":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:22209:24185":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:2701:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:4770:11957":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:33315:11971":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43583:8938":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:41622:3013":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:9980:7839":{"crate_id":1,"path":["core","fmt","builders","DebugSet"],"kind":"struct"},"1:22606:15402":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9999:7837":{"crate_id":1,"path":["core","fmt","builders","DebugList"],"kind":"struct"},"1:40716:15428":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:41517:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:41339:15171":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:22746:15003":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3301:3008":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:44117:12081":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3157:3571":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:42223:7844":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:40158:8686":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10984:4502":{"crate_id":1,"path":["core","slice","index","range"],"kind":"function"},"1:2249:2616":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:22738:15002":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:43965:12227":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:1971:2615":{"crate_id":1,"path":["core","mem","SizedTypeProperties"],"kind":"trait"},"1:41686:4175":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:40723:11911":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"0:7380:4065":{"crate_id":0,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:4686:12099":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:43876:12223":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:10463:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:13046:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:32083:3001":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:1933:3831":{"crate_id":1,"path":["core","mem","swap"],"kind":"function"},"1:43662:8918":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11290:8721":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:12353:1672":{"crate_id":1,"path":["core","str"],"kind":"module"},"0:5217:8069":{"crate_id":0,"path":["alloc","rc","Weak"],"kind":"struct"},"1:2725:2785":{"crate_id":1,"path":["core","cmp","max"],"kind":"function"},"1:40066:7175":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4259:6471":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:21996:27592":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:41678:4509":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:46549:15316":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:40300:11937":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:41570:2419":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:42476:25428":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"0:5453:8837":{"crate_id":0,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12361:8922":{"crate_id":1,"path":["core","str","converts","from_utf8_mut"],"kind":"function"},"1:3116:3519":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2531:2711":{"crate_id":1,"path":["core","ptr","read"],"kind":"function"},"0:4925:216":{"crate_id":0,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41836:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:40764:11917":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3146:11953":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:22427:24893":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:13502:11898":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:12366:3545":{"crate_id":1,"path":["core","str","converts","from_raw_parts_mut"],"kind":"function"},"1:42449:15179":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:39218:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:43483:8724":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:39935:13702":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:52098:1794":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:39295:11874":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:52091:869":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:45649:15233":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:45719:15237":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:32054:11955":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:13756:2618":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:37778:11977":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:22343:11864":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:45945:15263":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11942:8697":{"crate_id":1,"path":["core","slice","raw","from_ptr_range"],"kind":"function"},"1:12362:8926":{"crate_id":1,"path":["core","str","converts","from_utf8_unchecked"],"kind":"function"},"1:10506:2415":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:33138:11972":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:30467:11856":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:39180:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:22315:24893":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10617:13849":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:10412:850":{"crate_id":1,"path":["core","hash"],"kind":"module"},"1:52092:875":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:46040:15266":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"0:127:2617":{"crate_id":0,"path":["alloc","alloc","handle_alloc_error"],"kind":"function"},"1:40332:11938":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2951:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:3387:6395":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2612:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:52094:862":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"0:732:118":{"crate_id":0,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1946:11853":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"0:7645:9281":{"crate_id":0,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:45702:15236":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9924:120":{"crate_id":1,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"1:4348:15610":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:22690:14997":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43214:8709":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7710:11907":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"0:142:2398":{"crate_id":0,"path":["alloc","boxed"],"kind":"module"},"1:21419:11886":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2512:11865":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:45620:15232":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"0:801:3690":{"crate_id":0,"path":["alloc","collections","binary_heap"],"kind":"module"},"1:52082:333":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:11858:8702":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:41311:19067":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:44297:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:46019:15265":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1750:538":{"crate_id":1,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"0:3661:4509":{"crate_id":0,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:46277:15302":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:46322:15303":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:39258:4363":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:22474:24179":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:2865:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:33971:11974":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:45833:15243":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:40256:15421":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11217:8728":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7942:9608":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:43782:12219":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:41700:69":{"crate_id":1,"path":["core","sync","atomic","Ordering","Acquire"],"kind":"variant"},"1:46078:15268":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:45463:15215":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:39920:24904":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:39481:12693":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"0:7632:242":{"crate_id":0,"path":["alloc","string","String"],"kind":"struct"},"1:43653:8919":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:46380:15305":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:2856:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:43954:12226":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:22855:12030":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:3319:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:737:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:3352:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:40357:11940":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40309:11926":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:21429:27585":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:6847:11927":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9905:18219":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2872:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2529:4230":{"crate_id":1,"path":["core","ptr","replace"],"kind":"function"},"1:22979:15022":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:22396:11864":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:11940:8694":{"crate_id":1,"path":["core","slice","raw","from_mut"],"kind":"function"},"1:13626:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:39082:3009":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"0:0:307":{"crate_id":0,"path":["alloc"],"kind":"module"},"1:13450:25218":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:39893:8931":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2868:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:45990:15264":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:52100:943":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"0:4688:763":{"crate_id":0,"path":["alloc","ffi"],"kind":"module"},"1:45907:15261":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:39909:13703":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10221:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4402:11875":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4:1231":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:45751:15239":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:22957:15020":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"0:7541:2720":{"crate_id":0,"path":["alloc","collections","TryReserveErrorKind","AllocError"],"kind":"variant"},"0:7553:7100":{"crate_id":0,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:52085:1760":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:52090:887":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:3155:3003":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:40209:11924":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:5205:15613":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:1935:3926":{"crate_id":1,"path":["core","mem","take"],"kind":"function"},"1:31997:2893":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:32085:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:33625:5741":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11935:3545":{"crate_id":1,"path":["core","slice","raw","from_raw_parts_mut"],"kind":"function"},"0:5631:2403":{"crate_id":0,"path":["alloc","string"],"kind":"module"},"1:10610:5983":{"crate_id":1,"path":["core","slice","sort"],"kind":"module"},"1:10988:8699":{"crate_id":1,"path":["core","slice","index","try_range"],"kind":"function"},"1:46602:15323":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"0:6440:1877":{"crate_id":0,"path":["alloc","vec"],"kind":"module"},"1:2835:24893":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10264:7842":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:42072:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3192:3006":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:40506:11942":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:31998:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7594:6989":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:40121:12063":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:12838:8909":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:45509:15218":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:30840:134":{"crate_id":1,"path":["core","cmp","Ordering","Equal"],"kind":"variant"},"1:8631:11920":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:12360:7286":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:21686:14995":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10247:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:30837:5172":{"crate_id":1,"path":["core","cmp","Ordering","Less"],"kind":"variant"},"1:39198:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:22935:15018":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:23023:15026":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"0:113:310":{"crate_id":0,"path":["alloc","alloc","alloc_zeroed"],"kind":"function"},"1:40745:11915":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:7882:11910":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:41497:15175":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:39899:11876":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:43176:8705":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:43397:8720":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12827:8912":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1976:1312":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:30843:5173":{"crate_id":1,"path":["core","cmp","Ordering","Greater"],"kind":"variant"},"0:7402:4039":{"crate_id":0,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:43125:15621":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10018:7838":{"crate_id":1,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"1:52099:1776":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:29:487":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"0:7048:263":{"crate_id":0,"path":["alloc","vec","Vec"],"kind":"struct"},"1:10050:7833":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:22762:24910":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:32053:3459":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:3172:11967":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:10469:152":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:40754:11916":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:45296:15199":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:4500:12103":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:41601:12209":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3106:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:44293:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:22968:15021":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:13477:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1907:792":{"crate_id":1,"path":["core","mem","forget"],"kind":"function"},"1:3544:11982":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:2592:3014":{"crate_id":1,"path":["core","ptr","addr_of_mut"],"kind":"macro"},"1:21475:27589":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"3:0:11842":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:9884:780":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:9718:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40730:11912":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:12772:8933":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:4622:12092":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"0:7655:9289":{"crate_id":0,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:21441:27585":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:41295:15164":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3559:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:22441:24180":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:52093:881":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:8176:4212":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:40739:11914":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:42951:8904":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:45588:15230":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:21962:24104":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:2053:14992":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"0:6402:10439":{"crate_id":0,"path":["alloc","task","Wake"],"kind":"trait"},"1:22291:24187":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:7656:3828":{"crate_id":1,"path":["core","iter","adapters","SourceIter"],"kind":"trait"},"1:33256:11969":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:45538:15220":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:40381:11928":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:43429:8941":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:42766:15440":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:42966:15441":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"0:110:307":{"crate_id":0,"path":["alloc","alloc","alloc"],"kind":"function"},"1:4750:11995":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:3584:28274":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:43988:8943":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:6853:15393":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"0:5848:9778":{"crate_id":0,"path":["alloc","string","ParseError"],"kind":"type_alias"},"1:22824:15409":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2496:652":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43501:8722":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:43547:8937":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1925:8013":{"crate_id":1,"path":["core","mem","align_of_val_raw"],"kind":"function"},"1:7489:4847":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:42209:7835":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:10258:7844":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:42111:12240":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11938:8693":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:30836:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:46572:15321":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:52083:1638":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"0:112:1365":{"crate_id":0,"path":["alloc","alloc","realloc"],"kind":"function"},"1:43687:8931":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:43325:7107":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4469:12102":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2062:11871":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:46508:15313":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:41758:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2535:2895":{"crate_id":1,"path":["core","ptr","write"],"kind":"function"},"0:800:2401":{"crate_id":0,"path":["alloc","collections"],"kind":"module"},"0:4869:2402":{"crate_id":0,"path":["alloc","rc"],"kind":"module"},"1:46534:15315":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"0:4835:780":{"crate_id":0,"path":["alloc","fmt"],"kind":"module"},"0:5953:1694":{"crate_id":0,"path":["alloc","sync"],"kind":"module"},"1:43194:8710":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:41875:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3599:3007":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:40530:11944":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:46625:15324":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3554:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:31966:15615":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:46523:15314":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:39263:5687":{"crate_id":1,"path":["core","ops","range","Bound","Excluded"],"kind":"variant"},"2:0:485":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"0:4663:3694":{"crate_id":0,"path":["alloc","collections","btree_map"],"kind":"module"},"1:40516:11943":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:40011:13700":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3565:11984":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:39308:13525":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:46497:15312":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:40178:6394":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:44109:12082":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"0:4027:3693":{"crate_id":0,"path":["alloc","collections","vec_deque"],"kind":"module"},"1:9292:12210":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:52096:1782":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:45428:15213":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:41670:4057":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:41423:24915":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:11140:8727":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:45780:15240":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:40037:13697":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:12328:12037":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:37888:11979":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8669:18217":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:44101:12079":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"0:7597:7097":{"crate_id":0,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8258:3439":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:21674:24893":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"0:5324:1638":{"crate_id":0,"path":["alloc","slice"],"kind":"module"},"1:3571:11986":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:33197:11970":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:45801:15241":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:40018:13701":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"0:295:2399":{"crate_id":0,"path":["alloc","boxed","Box"],"kind":"struct"},"1:22713:12014":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:43225:8689":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:30863:11886":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:41797:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10683:14607":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:41479:15172":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:2510:11864":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:40341:11939":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:39948:13704":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10700:14608":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:43678:8930":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:39238:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:46451:15308":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:43447:8940":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3725:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:10573:1638":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:33798:5742":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:44270:8914":{"crate_id":1,"path":["core","unicode","unicode_data","conversions"],"kind":"module"},"1:22:795":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:1911:1634":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:44129:15193":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:45328:15203":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:44405:2720":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:46664:15340":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:6858:14606":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:2670:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"0:4423:264":{"crate_id":0,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"0:6421:10507":{"crate_id":0,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:2537:11868":{"crate_id":1,"path":["core","ptr","write_unaligned"],"kind":"function"},"1:33079:3572":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"0:735:3354":{"crate_id":0,"path":["alloc","borrow","Cow","Borrowed"],"kind":"variant"},"1:45343:15204":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:46488:15311":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"0:5922:4150":{"crate_id":0,"path":["alloc","string","Drain"],"kind":"struct"},"1:52088:717":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:4432:8011":{"crate_id":1,"path":["core","cell"],"kind":"module"},"1:2862:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:30461:2614":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"0:943:4057":{"crate_id":0,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:32473:11966":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3358:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2859:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:10250:119":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:41613:12347":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8021:6392":{"crate_id":1,"path":["core","iter","sources","repeat_n","repeat_n"],"kind":"function"},"1:12833:8911":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3332:3010":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8130:11921":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:45878:15260":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:23001:15024":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:21684:24099":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"0:5457:8847":{"crate_id":0,"path":["alloc","slice","Join"],"kind":"trait"},"1:21566:24101":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44125:12076":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:40081:12066":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10511:11901":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:43355:8924":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:42513:7830":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:21505:24893":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:45442:15214":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:1567:1740":{"crate_id":1,"path":["core","intrinsics","transmute"],"kind":"function"},"1:10252:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:45360:15205":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:22382:24189":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:8126:11922":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1760:1909":{"crate_id":1,"path":["core","intrinsics","write_bytes"],"kind":"function"},"1:3111:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:10262:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:31962:4311":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:42230:7845":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:46351:15304":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:52101:1861":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"0:7539:2715":{"crate_id":0,"path":["alloc","collections","TryReserveErrorKind","CapacityOverflow"],"kind":"variant"},"1:43975:12228":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:45670:15234":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:41992:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:43264:8687":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4613:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21560:24098":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:40055:12065":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:22946:15019":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"0:7392:4150":{"crate_id":0,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:1120:935":{"crate_id":1,"path":["core","intrinsics"],"kind":"module"},"1:44394:2610":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:1755:536":{"crate_id":1,"path":["core","intrinsics","copy"],"kind":"function"},"1:10268:2895":{"crate_id":1,"path":["core","fmt","write"],"kind":"function"},"1:40200:11923":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3781:333":{"crate_id":1,"path":["core","array"],"kind":"module"},"1:2561:678":{"crate_id":1,"path":["core","ptr","eq"],"kind":"function"},"1:41719:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44097:12077":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:52097:1788":{"crate_id":1,"path":["core","u32"],"kind":"primitive"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}